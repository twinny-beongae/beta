{"version":3,"file":"js/about.0e59373f.js","mappings":"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","sources":["webpack://twinny-beongae/./node_modules/core-js/internals/an-instance.js","webpack://twinny-beongae/./node_modules/core-js/internals/dom-exception-constants.js","webpack://twinny-beongae/./node_modules/core-js/modules/web.dom-exception.stack.js","webpack://twinny-beongae/./src/views/AboutView.vue","webpack://twinny-beongae/../src/constants.ts","webpack://twinny-beongae/../src/assert.ts","webpack://twinny-beongae/../src/crypt.ts","webpack://twinny-beongae/../src/deepCopy.ts","webpack://twinny-beongae/../src/deferred.ts","webpack://twinny-beongae/../src/environment.ts","webpack://twinny-beongae/../src/errors.ts","webpack://twinny-beongae/../src/json.ts","webpack://twinny-beongae/../src/jwt.ts","webpack://twinny-beongae/../src/obj.ts","webpack://twinny-beongae/../src/query.ts","webpack://twinny-beongae/../src/sha1.ts","webpack://twinny-beongae/../src/validation.ts","webpack://twinny-beongae/../src/utf8.ts","webpack://twinny-beongae/../src/compat.ts","webpack://twinny-beongae/../../src/component.ts","webpack://twinny-beongae/../../src/constants.ts","webpack://twinny-beongae/../../src/provider.ts","webpack://twinny-beongae/../../src/component_container.ts","webpack://twinny-beongae/../../src/logger.ts","webpack://twinny-beongae/./node_modules/idb/build/wrap-idb-value.js","webpack://twinny-beongae/./node_modules/idb/build/index.js","webpack://twinny-beongae/../../src/platformLoggerService.ts","webpack://twinny-beongae/../../src/internal.ts","webpack://twinny-beongae/../../src/errors.ts","webpack://twinny-beongae/../../src/firebaseApp.ts","webpack://twinny-beongae/../../src/api.ts","webpack://twinny-beongae/../../src/indexeddb.ts","webpack://twinny-beongae/../../src/heartbeatService.ts","webpack://twinny-beongae/../../src/registerCoreComponents.ts","webpack://twinny-beongae/../../src/index.ts","webpack://twinny-beongae/../index.ts","webpack://twinny-beongae/./node_modules/@firebase/database/dist/index.esm2017.js","webpack://twinny-beongae/./src/views/AboutView.vue?d56f"],"sourcesContent":["var isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar $TypeError = TypeError;\n\nmodule.exports = function (it, Prototype) {\n  if (isPrototypeOf(Prototype, it)) return it;\n  throw $TypeError('Incorrect invocation');\n};\n","module.exports = {\n  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },\n  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },\n  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },\n  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },\n  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },\n  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },\n  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },\n  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },\n  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },\n  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },\n  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },\n  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },\n  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },\n  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },\n  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },\n  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },\n  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },\n  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },\n  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },\n  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },\n  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },\n  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },\n  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },\n  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },\n  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar defineProperty = require('../internals/object-define-property').f;\nvar hasOwn = require('../internals/has-own-property');\nvar anInstance = require('../internals/an-instance');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\nvar DOMExceptionConstants = require('../internals/dom-exception-constants');\nvar clearErrorStack = require('../internals/clear-error-stack');\nvar IS_PURE = require('../internals/is-pure');\n\nvar DOM_EXCEPTION = 'DOMException';\nvar Error = getBuiltIn('Error');\nvar NativeDOMException = getBuiltIn(DOM_EXCEPTION);\n\nvar $DOMException = function DOMException() {\n  anInstance(this, DOMExceptionPrototype);\n  var argumentsLength = arguments.length;\n  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);\n  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');\n  var that = new NativeDOMException(message, name);\n  var error = Error(message);\n  error.name = DOM_EXCEPTION;\n  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));\n  inheritIfRequired(that, this, $DOMException);\n  return that;\n};\n\nvar DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;\n\nvar ERROR_HAS_STACK = 'stack' in Error(DOM_EXCEPTION);\nvar DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);\nvar FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;\n\n// `DOMException` constructor patch for `.stack` where it's required\n// https://webidl.spec.whatwg.org/#es-DOMException-specialness\n$({ global: true, constructor: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, { // TODO: fix export logic\n  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException\n});\n\nvar PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);\nvar PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;\n\nif (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {\n  if (!IS_PURE) {\n    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));\n  }\n\n  for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {\n    var constant = DOMExceptionConstants[key];\n    var constantName = constant.s;\n    if (!hasOwn(PolyfilledDOMException, constantName)) {\n      defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));\n    }\n  }\n}\n","<template>\n  <div class=\"about\">\n    <h1>This is an about page</h1>\n  </div>\n</template>\n\n<script>\nimport { initializeApp } from 'firebase/app'\nimport { getDatabase, ref, onValue } from 'firebase/database'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyAXzw2BNqhI6HJLFvDxGk8aFNnGEGz7ge0',\n  authDomain: 'twinny-beongae-ea0a4.firebaseapp.com',\n  databaseURL: 'https://twinny-beongae-ea0a4-default-rtdb.firebaseio.com',\n  projectId: 'twinny-beongae-ea0a4',\n  storageBucket: 'twinny-beongae-ea0a4.appspot.com',\n  messagingSenderId: '82638857824',\n  appId: '1:82638857824:web:ef5ea88e03accb25bc4505',\n  measurementId: 'G-1FVMVDJYTB'\n}\n\nconst app = initializeApp(firebaseConfig)\n\n// Get a reference to the database service\nconst db = getDatabase(app)\nconst appointmentTimeRef = ref(db, 'rooms/' + 'room1' + '/appointment_time')\nonValue(appointmentTimeRef, (snapshot) => {\n  console.log(snapshot.val())\n})\n\nexport default {\n  name: 'AboutView',\n  components: {\n  },\n  date () {\n    return {\n      appointmentTime: 1\n    }\n  },\n  methods: {\n  }\n}\n</script>\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  STORAGE_DELETE = 'storage-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppError.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppError.STORAGE_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.STORAGE_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_GET, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    throw ERROR_FACTORY.create(AppError.STORAGE_WRITE, {\n      originalErrorMessage: (e as Error)?.message\n    });\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.1\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** The semver (www.semver.org) version of the SDK. */\r\nlet SDK_VERSION = '';\r\n/**\r\n * SDK_VERSION should be set before any database instance is created\r\n * @internal\r\n */\r\nfunction setSDKVersion(version) {\r\n    SDK_VERSION = version;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n */\r\nclass DOMStorageWrapper {\r\n    /**\r\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\r\n     */\r\n    constructor(domStorage_) {\r\n        this.domStorage_ = domStorage_;\r\n        // Use a prefix to avoid collisions with other stuff saved by the app.\r\n        this.prefix_ = 'firebase:';\r\n    }\r\n    /**\r\n     * @param key - The key to save the value under\r\n     * @param value - The value being stored, or null to remove the key.\r\n     */\r\n    set(key, value) {\r\n        if (value == null) {\r\n            this.domStorage_.removeItem(this.prefixedName_(key));\r\n        }\r\n        else {\r\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\r\n        }\r\n    }\r\n    /**\r\n     * @returns The value that was stored under this key, or null\r\n     */\r\n    get(key) {\r\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\r\n        if (storedVal == null) {\r\n            return null;\r\n        }\r\n        else {\r\n            return jsonEval(storedVal);\r\n        }\r\n    }\r\n    remove(key) {\r\n        this.domStorage_.removeItem(this.prefixedName_(key));\r\n    }\r\n    prefixedName_(name) {\r\n        return this.prefix_ + name;\r\n    }\r\n    toString() {\r\n        return this.domStorage_.toString();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n */\r\nclass MemoryStorage {\r\n    constructor() {\r\n        this.cache_ = {};\r\n        this.isInMemoryStorage = true;\r\n    }\r\n    set(key, value) {\r\n        if (value == null) {\r\n            delete this.cache_[key];\r\n        }\r\n        else {\r\n            this.cache_[key] = value;\r\n        }\r\n    }\r\n    get(key) {\r\n        if (contains(this.cache_, key)) {\r\n            return this.cache_[key];\r\n        }\r\n        return null;\r\n    }\r\n    remove(key) {\r\n        delete this.cache_[key];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param domStorageName - Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @returns Turning off type information until a common interface is defined.\r\n */\r\nconst createStoragefor = function (domStorageName) {\r\n    try {\r\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\r\n        // so it must be inside the try/catch.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window[domStorageName] !== 'undefined') {\r\n            // Need to test cache. Just because it's here doesn't mean it works\r\n            const domStorage = window[domStorageName];\r\n            domStorage.setItem('firebase:sentinel', 'cache');\r\n            domStorage.removeItem('firebase:sentinel');\r\n            return new DOMStorageWrapper(domStorage);\r\n        }\r\n    }\r\n    catch (e) { }\r\n    // Failed to create wrapper.  Just return in-memory storage.\r\n    // TODO: log?\r\n    return new MemoryStorage();\r\n};\r\n/** A storage object that lasts across sessions */\r\nconst PersistentStorage = createStoragefor('localStorage');\r\n/** A storage object that only lasts one session */\r\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logClient = new Logger('@firebase/database');\r\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n */\r\nconst LUIDGenerator = (function () {\r\n    let id = 1;\r\n    return function () {\r\n        return id++;\r\n    };\r\n})();\r\n/**\r\n * Sha1 hash of the input string\r\n * @param str - The string to hash\r\n * @returns {!string} The resulting hash\r\n */\r\nconst sha1 = function (str) {\r\n    const utf8Bytes = stringToByteArray(str);\r\n    const sha1 = new Sha1();\r\n    sha1.update(utf8Bytes);\r\n    const sha1Bytes = sha1.digest();\r\n    return base64.encodeByteArray(sha1Bytes);\r\n};\r\nconst buildLogMessage_ = function (...varArgs) {\r\n    let message = '';\r\n    for (let i = 0; i < varArgs.length; i++) {\r\n        const arg = varArgs[i];\r\n        if (Array.isArray(arg) ||\r\n            (arg &&\r\n                typeof arg === 'object' &&\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                typeof arg.length === 'number')) {\r\n            message += buildLogMessage_.apply(null, arg);\r\n        }\r\n        else if (typeof arg === 'object') {\r\n            message += stringify(arg);\r\n        }\r\n        else {\r\n            message += arg;\r\n        }\r\n        message += ' ';\r\n    }\r\n    return message;\r\n};\r\n/**\r\n * Use this for all debug messages in Firebase.\r\n */\r\nlet logger = null;\r\n/**\r\n * Flag to check for log availability on first log message\r\n */\r\nlet firstLog_ = true;\r\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param logger_ - A flag to turn on logging, or a custom logger\r\n * @param persistent - Whether or not to persist logging settings across refreshes\r\n */\r\nconst enableLogging$1 = function (logger_, persistent) {\r\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\r\n    if (logger_ === true) {\r\n        logClient.logLevel = LogLevel.VERBOSE;\r\n        logger = logClient.log.bind(logClient);\r\n        if (persistent) {\r\n            SessionStorage.set('logging_enabled', true);\r\n        }\r\n    }\r\n    else if (typeof logger_ === 'function') {\r\n        logger = logger_;\r\n    }\r\n    else {\r\n        logger = null;\r\n        SessionStorage.remove('logging_enabled');\r\n    }\r\n};\r\nconst log = function (...varArgs) {\r\n    if (firstLog_ === true) {\r\n        firstLog_ = false;\r\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\r\n            enableLogging$1(true);\r\n        }\r\n    }\r\n    if (logger) {\r\n        const message = buildLogMessage_.apply(null, varArgs);\r\n        logger(message);\r\n    }\r\n};\r\nconst logWrapper = function (prefix) {\r\n    return function (...varArgs) {\r\n        log(prefix, ...varArgs);\r\n    };\r\n};\r\nconst error = function (...varArgs) {\r\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\r\n    logClient.error(message);\r\n};\r\nconst fatal = function (...varArgs) {\r\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\r\n    logClient.error(message);\r\n    throw new Error(message);\r\n};\r\nconst warn = function (...varArgs) {\r\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\r\n    logClient.warn(message);\r\n};\r\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\r\nconst warnIfPageIsSecure = function () {\r\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\r\n    if (typeof window !== 'undefined' &&\r\n        window.location &&\r\n        window.location.protocol &&\r\n        window.location.protocol.indexOf('https:') !== -1) {\r\n        warn('Insecure Firebase access from a secure page. ' +\r\n            'Please use https in calls to new Firebase().');\r\n    }\r\n};\r\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n */\r\nconst isInvalidJSONNumber = function (data) {\r\n    return (typeof data === 'number' &&\r\n        (data !== data || // NaN\r\n            data === Number.POSITIVE_INFINITY ||\r\n            data === Number.NEGATIVE_INFINITY));\r\n};\r\nconst executeWhenDOMReady = function (fn) {\r\n    if (isNodeSdk() || document.readyState === 'complete') {\r\n        fn();\r\n    }\r\n    else {\r\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\r\n        // fire before onload), but fall back to onload.\r\n        let called = false;\r\n        const wrappedFn = function () {\r\n            if (!document.body) {\r\n                setTimeout(wrappedFn, Math.floor(10));\r\n                return;\r\n            }\r\n            if (!called) {\r\n                called = true;\r\n                fn();\r\n            }\r\n        };\r\n        if (document.addEventListener) {\r\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\r\n            // fallback to onload.\r\n            window.addEventListener('load', wrappedFn, false);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (document.attachEvent) {\r\n            // IE.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            document.attachEvent('onreadystatechange', () => {\r\n                if (document.readyState === 'complete') {\r\n                    wrappedFn();\r\n                }\r\n            });\r\n            // fallback to onload.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            window.attachEvent('onload', wrappedFn);\r\n            // jQuery has an extra hack for IE that we could employ (based on\r\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\r\n            // I'm hoping we don't need it.\r\n        }\r\n    }\r\n};\r\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n */\r\nconst MIN_NAME = '[MIN_NAME]';\r\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n */\r\nconst MAX_NAME = '[MAX_NAME]';\r\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n */\r\nconst nameCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a === MIN_NAME || b === MAX_NAME) {\r\n        return -1;\r\n    }\r\n    else if (b === MIN_NAME || a === MAX_NAME) {\r\n        return 1;\r\n    }\r\n    else {\r\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\r\n        if (aAsInt !== null) {\r\n            if (bAsInt !== null) {\r\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (bAsInt !== null) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return a < b ? -1 : 1;\r\n        }\r\n    }\r\n};\r\n/**\r\n * @returns {!number} comparison result.\r\n */\r\nconst stringCompare = function (a, b) {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    else if (a < b) {\r\n        return -1;\r\n    }\r\n    else {\r\n        return 1;\r\n    }\r\n};\r\nconst requireKey = function (key, obj) {\r\n    if (obj && key in obj) {\r\n        return obj[key];\r\n    }\r\n    else {\r\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\r\n    }\r\n};\r\nconst ObjectToUniqueKey = function (obj) {\r\n    if (typeof obj !== 'object' || obj === null) {\r\n        return stringify(obj);\r\n    }\r\n    const keys = [];\r\n    // eslint-disable-next-line guard-for-in\r\n    for (const k in obj) {\r\n        keys.push(k);\r\n    }\r\n    // Export as json, but with the keys sorted.\r\n    keys.sort();\r\n    let key = '{';\r\n    for (let i = 0; i < keys.length; i++) {\r\n        if (i !== 0) {\r\n            key += ',';\r\n        }\r\n        key += stringify(keys[i]);\r\n        key += ':';\r\n        key += ObjectToUniqueKey(obj[keys[i]]);\r\n    }\r\n    key += '}';\r\n    return key;\r\n};\r\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param str - The string\r\n * @param segsize - The maximum number of chars in the string.\r\n * @returns The string, split into appropriately-sized chunks\r\n */\r\nconst splitStringBySize = function (str, segsize) {\r\n    const len = str.length;\r\n    if (len <= segsize) {\r\n        return [str];\r\n    }\r\n    const dataSegs = [];\r\n    for (let c = 0; c < len; c += segsize) {\r\n        if (c + segsize > len) {\r\n            dataSegs.push(str.substring(c, len));\r\n        }\r\n        else {\r\n            dataSegs.push(str.substring(c, c + segsize));\r\n        }\r\n    }\r\n    return dataSegs;\r\n};\r\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj - The object or array to iterate over\r\n * @param fn - The function to apply\r\n */\r\nfunction each(obj, fn) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            fn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param v - A double\r\n *\r\n */\r\nconst doubleToIEEE754String = function (v) {\r\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\r\n    const ebits = 11, fbits = 52;\r\n    const bias = (1 << (ebits - 1)) - 1;\r\n    let s, e, f, ln, i;\r\n    // Compute sign, exponent, fraction\r\n    // Skip NaN / Infinity handling --MJL.\r\n    if (v === 0) {\r\n        e = 0;\r\n        f = 0;\r\n        s = 1 / v === -Infinity ? 1 : 0;\r\n    }\r\n    else {\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n        if (v >= Math.pow(2, 1 - bias)) {\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }\r\n        else {\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n    // Pack sign, exponent, fraction\r\n    const bits = [];\r\n    for (i = fbits; i; i -= 1) {\r\n        bits.push(f % 2 ? 1 : 0);\r\n        f = Math.floor(f / 2);\r\n    }\r\n    for (i = ebits; i; i -= 1) {\r\n        bits.push(e % 2 ? 1 : 0);\r\n        e = Math.floor(e / 2);\r\n    }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    const str = bits.join('');\r\n    // Return the data as a hex string. --MJL\r\n    let hexByteString = '';\r\n    for (i = 0; i < 64; i += 8) {\r\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\r\n        if (hexByte.length === 1) {\r\n            hexByte = '0' + hexByte;\r\n        }\r\n        hexByteString = hexByteString + hexByte;\r\n    }\r\n    return hexByteString.toLowerCase();\r\n};\r\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n */\r\nconst isChromeExtensionContentScript = function () {\r\n    return !!(typeof window === 'object' &&\r\n        window['chrome'] &&\r\n        window['chrome']['extension'] &&\r\n        !/^chrome/.test(window.location.href));\r\n};\r\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n */\r\nconst isWindowsStoreApp = function () {\r\n    // Check for the presence of a couple WinRT globals\r\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\r\n};\r\n/**\r\n * Converts a server error code to a Javascript Error\r\n */\r\nfunction errorForServerCode(code, query) {\r\n    let reason = 'Unknown Error';\r\n    if (code === 'too_big') {\r\n        reason =\r\n            'The data requested exceeds the maximum size ' +\r\n                'that can be accessed with a single request.';\r\n    }\r\n    else if (code === 'permission_denied') {\r\n        reason = \"Client doesn't have permission to access the desired data.\";\r\n    }\r\n    else if (code === 'unavailable') {\r\n        reason = 'The service is unavailable';\r\n    }\r\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    error.code = code.toUpperCase();\r\n    return error;\r\n}\r\n/**\r\n * Used to test for integer-looking strings\r\n */\r\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\r\n/**\r\n * For use in keys, the minimum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MIN = -2147483648;\r\n/**\r\n * For use in kyes, the maximum possible 32-bit integer.\r\n */\r\nconst INTEGER_32_MAX = 2147483647;\r\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n */\r\nconst tryParseInt = function (str) {\r\n    if (INTEGER_REGEXP_.test(str)) {\r\n        const intVal = Number(str);\r\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\r\n            return intVal;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param fn - The code to guard.\r\n */\r\nconst exceptionGuard = function (fn) {\r\n    try {\r\n        fn();\r\n    }\r\n    catch (e) {\r\n        // Re-throw exception when it's safe.\r\n        setTimeout(() => {\r\n            // It used to be that \"throw e\" would result in a good console error with\r\n            // relevant context, but as of Chrome 39, you just get the firebase.js\r\n            // file/line number where we re-throw it, which is useless. So we log\r\n            // e.stack explicitly.\r\n            const stack = e.stack || '';\r\n            warn('Exception was thrown by user callback.', stack);\r\n            throw e;\r\n        }, Math.floor(0));\r\n    }\r\n};\r\n/**\r\n * @returns {boolean} true if we think we're currently being crawled.\r\n */\r\nconst beingCrawled = function () {\r\n    const userAgent = (typeof window === 'object' &&\r\n        window['navigator'] &&\r\n        window['navigator']['userAgent']) ||\r\n        '';\r\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\r\n    // believe to support JavaScript/AJAX rendering.\r\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\r\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\r\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\r\n};\r\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param fn - Function to run.\r\n * @param time - Milliseconds to wait before running.\r\n * @returns The setTimeout() return value.\r\n */\r\nconst setTimeoutNonBlocking = function (fn, time) {\r\n    const timeout = setTimeout(fn, time);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if (typeof timeout === 'object' && timeout['unref']) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        timeout['unref']();\r\n    }\r\n    return timeout;\r\n};\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around AppCheck's token fetching capabilities.\r\n */\r\nclass AppCheckTokenProvider {\r\n    constructor(appName_, appCheckProvider) {\r\n        this.appName_ = appName_;\r\n        this.appCheckProvider = appCheckProvider;\r\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\r\n        if (!this.appCheck) {\r\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.appCheck) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAppCheck. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // AppCheck and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.appCheck) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.appCheck.getToken(forceRefresh);\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        var _a;\r\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\r\n            'are invalid. This usually indicates your app was not initialized correctly.');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\r\nclass FirebaseAuthTokenProvider {\r\n    constructor(appName_, firebaseOptions_, authProvider_) {\r\n        this.appName_ = appName_;\r\n        this.firebaseOptions_ = firebaseOptions_;\r\n        this.authProvider_ = authProvider_;\r\n        this.auth_ = null;\r\n        this.auth_ = authProvider_.getImmediate({ optional: true });\r\n        if (!this.auth_) {\r\n            authProvider_.onInit(auth => (this.auth_ = auth));\r\n        }\r\n    }\r\n    getToken(forceRefresh) {\r\n        if (!this.auth_) {\r\n            return new Promise((resolve, reject) => {\r\n                // Support delayed initialization of FirebaseAuth. This allows our\r\n                // customers to initialize the RTDB SDK before initializing Firebase\r\n                // Auth and ensures that all requests are authenticated if a token\r\n                // becomes available before the timoeout below expires.\r\n                setTimeout(() => {\r\n                    if (this.auth_) {\r\n                        this.getToken(forceRefresh).then(resolve, reject);\r\n                    }\r\n                    else {\r\n                        resolve(null);\r\n                    }\r\n                }, 0);\r\n            });\r\n        }\r\n        return this.auth_.getToken(forceRefresh).catch(error => {\r\n            // TODO: Need to figure out all the cases this is raised and whether\r\n            // this makes sense.\r\n            if (error && error.code === 'auth/token-not-initialized') {\r\n                log('Got auth/token-not-initialized error.  Treating as null token.');\r\n                return null;\r\n            }\r\n            else {\r\n                return Promise.reject(error);\r\n            }\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // TODO: We might want to wrap the listener and call it with no args to\r\n        // avoid a leaky abstraction, but that makes removing the listener harder.\r\n        if (this.auth_) {\r\n            this.auth_.addAuthTokenListener(listener);\r\n        }\r\n        else {\r\n            this.authProvider_\r\n                .get()\r\n                .then(auth => auth.addAuthTokenListener(listener));\r\n        }\r\n    }\r\n    removeTokenChangeListener(listener) {\r\n        this.authProvider_\r\n            .get()\r\n            .then(auth => auth.removeAuthTokenListener(listener));\r\n    }\r\n    notifyForInvalidToken() {\r\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\r\n            this.appName_ +\r\n            '\" are invalid. This usually indicates your app was not ' +\r\n            'initialized correctly. ';\r\n        if ('credential' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"credential\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else if ('serviceAccount' in this.firebaseOptions_) {\r\n            errorMessage +=\r\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\r\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\r\n                    'project.';\r\n        }\r\n        else {\r\n            errorMessage +=\r\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\r\n                    'initializeApp() match the values provided for your app at ' +\r\n                    'https://console.firebase.google.com/.';\r\n        }\r\n        warn(errorMessage);\r\n    }\r\n}\r\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\r\nclass EmulatorTokenProvider {\r\n    constructor(accessToken) {\r\n        this.accessToken = accessToken;\r\n    }\r\n    getToken(forceRefresh) {\r\n        return Promise.resolve({\r\n            accessToken: this.accessToken\r\n        });\r\n    }\r\n    addTokenChangeListener(listener) {\r\n        // Invoke the listener immediately to match the behavior in Firebase Auth\r\n        // (see packages/auth/src/auth.js#L1807)\r\n        listener(this.accessToken);\r\n    }\r\n    removeTokenChangeListener(listener) { }\r\n    notifyForInvalidToken() { }\r\n}\r\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\r\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst PROTOCOL_VERSION = '5';\r\nconst VERSION_PARAM = 'v';\r\nconst TRANSPORT_SESSION_PARAM = 's';\r\nconst REFERER_PARAM = 'r';\r\nconst FORGE_REF = 'f';\r\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\r\n// firebase.corp.google.com\r\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\r\nconst LAST_SESSION_PARAM = 'ls';\r\nconst APPLICATION_ID_PARAM = 'p';\r\nconst APP_CHECK_TOKEN_PARAM = 'ac';\r\nconst WEBSOCKET = 'websocket';\r\nconst LONG_POLLING = 'long_polling';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A class that holds metadata about a Repo object\r\n */\r\nclass RepoInfo {\r\n    /**\r\n     * @param host - Hostname portion of the url for the repo\r\n     * @param secure - Whether or not this repo is accessed over ssl\r\n     * @param namespace - The namespace represented by the repo\r\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\r\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\r\n     * @param persistenceKey - Override the default session persistence storage key\r\n     */\r\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\r\n        this.secure = secure;\r\n        this.namespace = namespace;\r\n        this.webSocketOnly = webSocketOnly;\r\n        this.nodeAdmin = nodeAdmin;\r\n        this.persistenceKey = persistenceKey;\r\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\r\n        this._host = host.toLowerCase();\r\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\r\n        this.internalHost =\r\n            PersistentStorage.get('host:' + host) || this._host;\r\n    }\r\n    isCacheableHost() {\r\n        return this.internalHost.substr(0, 2) === 's-';\r\n    }\r\n    isCustomHost() {\r\n        return (this._domain !== 'firebaseio.com' &&\r\n            this._domain !== 'firebaseio-demo.com');\r\n    }\r\n    get host() {\r\n        return this._host;\r\n    }\r\n    set host(newHost) {\r\n        if (newHost !== this.internalHost) {\r\n            this.internalHost = newHost;\r\n            if (this.isCacheableHost()) {\r\n                PersistentStorage.set('host:' + this._host, this.internalHost);\r\n            }\r\n        }\r\n    }\r\n    toString() {\r\n        let str = this.toURLString();\r\n        if (this.persistenceKey) {\r\n            str += '<' + this.persistenceKey + '>';\r\n        }\r\n        return str;\r\n    }\r\n    toURLString() {\r\n        const protocol = this.secure ? 'https://' : 'http://';\r\n        const query = this.includeNamespaceInQueryParams\r\n            ? `?ns=${this.namespace}`\r\n            : '';\r\n        return `${protocol}${this.host}/${query}`;\r\n    }\r\n}\r\nfunction repoInfoNeedsQueryParam(repoInfo) {\r\n    return (repoInfo.host !== repoInfo.internalHost ||\r\n        repoInfo.isCustomHost() ||\r\n        repoInfo.includeNamespaceInQueryParams);\r\n}\r\n/**\r\n * Returns the websocket URL for this repo\r\n * @param repoInfo - RepoInfo object\r\n * @param type - of connection\r\n * @param params - list\r\n * @returns The URL for this repo\r\n */\r\nfunction repoInfoConnectionURL(repoInfo, type, params) {\r\n    assert(typeof type === 'string', 'typeof type must == string');\r\n    assert(typeof params === 'object', 'typeof params must == object');\r\n    let connURL;\r\n    if (type === WEBSOCKET) {\r\n        connURL =\r\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\r\n    }\r\n    else if (type === LONG_POLLING) {\r\n        connURL =\r\n            (repoInfo.secure ? 'https://' : 'http://') +\r\n                repoInfo.internalHost +\r\n                '/.lp?';\r\n    }\r\n    else {\r\n        throw new Error('Unknown connection type: ' + type);\r\n    }\r\n    if (repoInfoNeedsQueryParam(repoInfo)) {\r\n        params['ns'] = repoInfo.namespace;\r\n    }\r\n    const pairs = [];\r\n    each(params, (key, value) => {\r\n        pairs.push(key + '=' + value);\r\n    });\r\n    return connURL + pairs.join('&');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Tracks a collection of stats.\r\n */\r\nclass StatsCollection {\r\n    constructor() {\r\n        this.counters_ = {};\r\n    }\r\n    incrementCounter(name, amount = 1) {\r\n        if (!contains(this.counters_, name)) {\r\n            this.counters_[name] = 0;\r\n        }\r\n        this.counters_[name] += amount;\r\n    }\r\n    get() {\r\n        return deepCopy(this.counters_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst collections = {};\r\nconst reporters = {};\r\nfunction statsManagerGetCollection(repoInfo) {\r\n    const hashString = repoInfo.toString();\r\n    if (!collections[hashString]) {\r\n        collections[hashString] = new StatsCollection();\r\n    }\r\n    return collections[hashString];\r\n}\r\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\r\n    const hashString = repoInfo.toString();\r\n    if (!reporters[hashString]) {\r\n        reporters[hashString] = creatorFunction();\r\n    }\r\n    return reporters[hashString];\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n */\r\nclass PacketReceiver {\r\n    /**\r\n     * @param onMessage_\r\n     */\r\n    constructor(onMessage_) {\r\n        this.onMessage_ = onMessage_;\r\n        this.pendingResponses = [];\r\n        this.currentResponseNum = 0;\r\n        this.closeAfterResponse = -1;\r\n        this.onClose = null;\r\n    }\r\n    closeAfter(responseNum, callback) {\r\n        this.closeAfterResponse = responseNum;\r\n        this.onClose = callback;\r\n        if (this.closeAfterResponse < this.currentResponseNum) {\r\n            this.onClose();\r\n            this.onClose = null;\r\n        }\r\n    }\r\n    /**\r\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n     * browsers will respond in the same order as the requests we sent\r\n     */\r\n    handleResponse(requestNum, data) {\r\n        this.pendingResponses[requestNum] = data;\r\n        while (this.pendingResponses[this.currentResponseNum]) {\r\n            const toProcess = this.pendingResponses[this.currentResponseNum];\r\n            delete this.pendingResponses[this.currentResponseNum];\r\n            for (let i = 0; i < toProcess.length; ++i) {\r\n                if (toProcess[i]) {\r\n                    exceptionGuard(() => {\r\n                        this.onMessage_(toProcess[i]);\r\n                    });\r\n                }\r\n            }\r\n            if (this.currentResponseNum === this.closeAfterResponse) {\r\n                if (this.onClose) {\r\n                    this.onClose();\r\n                    this.onClose = null;\r\n                }\r\n                break;\r\n            }\r\n            this.currentResponseNum++;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// URL query parameters associated with longpolling\r\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\r\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\r\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\r\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\r\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\r\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\r\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\r\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\r\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\r\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\r\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\r\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\r\n//Data size constants.\r\n//TODO: Perf: the maximum length actually differs from browser to browser.\r\n// We should check what browser we're on and set accordingly.\r\nconst MAX_URL_DATA_SIZE = 1870;\r\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\r\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\r\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n */\r\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\r\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n */\r\nconst LP_CONNECT_TIMEOUT = 30000;\r\n/**\r\n * This class manages a single long-polling connection.\r\n */\r\nclass BrowserPollConnection {\r\n    /**\r\n     * @param connId An identifier for this connection, used for logging\r\n     * @param repoInfo The info for the endpoint to send data to.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The AppCheck token for this client.\r\n     * @param authToken The AuthToken to use for this connection.\r\n     * @param transportSessionId Optional transportSessionid if we are\r\n     * reconnecting for an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\r\n     * already created a connection previously\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.repoInfo = repoInfo;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.transportSessionId = transportSessionId;\r\n        this.lastSessionId = lastSessionId;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.everConnected_ = false;\r\n        this.log_ = logWrapper(connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.urlFn = (params) => {\r\n            // Always add the token if we have one.\r\n            if (this.appCheckToken) {\r\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\r\n        };\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.curSegmentNum = 0;\r\n        this.onDisconnect_ = onDisconnect;\r\n        this.myPacketOrderer = new PacketReceiver(onMessage);\r\n        this.isClosed_ = false;\r\n        this.connectTimeoutTimer_ = setTimeout(() => {\r\n            this.log_('Timed out trying to connect.');\r\n            // Make sure we clear the host cache\r\n            this.onClosed_();\r\n            this.connectTimeoutTimer_ = null;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(LP_CONNECT_TIMEOUT));\r\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\r\n        executeWhenDOMReady(() => {\r\n            if (this.isClosed_) {\r\n                return;\r\n            }\r\n            //Set up a callback that gets triggered once a connection is set up.\r\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\r\n                const [command, arg1, arg2, arg3, arg4] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                if (!this.scriptTagHolder) {\r\n                    return; // we closed the connection.\r\n                }\r\n                if (this.connectTimeoutTimer_) {\r\n                    clearTimeout(this.connectTimeoutTimer_);\r\n                    this.connectTimeoutTimer_ = null;\r\n                }\r\n                this.everConnected_ = true;\r\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\r\n                    this.id = arg1;\r\n                    this.password = arg2;\r\n                }\r\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\r\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\r\n                    if (arg1) {\r\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\r\n                        // through our already open polls), so don't send any more.\r\n                        this.scriptTagHolder.sendNewPolls = false;\r\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\r\n                        // all of the responses up to this one before closing\r\n                        this.myPacketOrderer.closeAfter(arg1, () => {\r\n                            this.onClosed_();\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.onClosed_();\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Unrecognized command received: ' + command);\r\n                }\r\n            }, (...args) => {\r\n                const [pN, data] = args;\r\n                this.incrementIncomingBytes_(args);\r\n                this.myPacketOrderer.handleResponse(pN, data);\r\n            }, () => {\r\n                this.onClosed_();\r\n            }, this.urlFn);\r\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\r\n            //from cache.\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\r\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\r\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\r\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\r\n            }\r\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n            if (this.transportSessionId) {\r\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\r\n            }\r\n            if (this.lastSessionId) {\r\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\r\n            }\r\n            if (this.applicationId) {\r\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\r\n            }\r\n            if (this.appCheckToken) {\r\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\r\n            }\r\n            if (typeof location !== 'undefined' &&\r\n                location.hostname &&\r\n                FORGE_DOMAIN_RE.test(location.hostname)) {\r\n                urlParams[REFERER_PARAM] = FORGE_REF;\r\n            }\r\n            const connectURL = this.urlFn(urlParams);\r\n            this.log_('Connecting via long-poll to ' + connectURL);\r\n            this.scriptTagHolder.addTag(connectURL, () => {\r\n                /* do nothing */\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Call this when a handshake has completed successfully and we want to consider the connection established\r\n     */\r\n    start() {\r\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\r\n        this.addDisconnectPingFrame(this.id, this.password);\r\n    }\r\n    /**\r\n     * Forces long polling to be considered as a potential transport\r\n     */\r\n    static forceAllow() {\r\n        BrowserPollConnection.forceAllow_ = true;\r\n    }\r\n    /**\r\n     * Forces longpolling to not be considered as a potential transport\r\n     */\r\n    static forceDisallow() {\r\n        BrowserPollConnection.forceDisallow_ = true;\r\n    }\r\n    // Static method, use string literal so it can be accessed in a generic way\r\n    static isAvailable() {\r\n        if (isNodeSdk()) {\r\n            return false;\r\n        }\r\n        else if (BrowserPollConnection.forceAllow_) {\r\n            return true;\r\n        }\r\n        else {\r\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\r\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\r\n            return (!BrowserPollConnection.forceDisallow_ &&\r\n                typeof document !== 'undefined' &&\r\n                document.createElement != null &&\r\n                !isChromeExtensionContentScript() &&\r\n                !isWindowsStoreApp());\r\n        }\r\n    }\r\n    /**\r\n     * No-op for polling\r\n     */\r\n    markConnectionHealthy() { }\r\n    /**\r\n     * Stops polling and cleans up the iframe\r\n     */\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.scriptTagHolder) {\r\n            this.scriptTagHolder.close();\r\n            this.scriptTagHolder = null;\r\n        }\r\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\r\n        if (this.myDisconnFrame) {\r\n            document.body.removeChild(this.myDisconnFrame);\r\n            this.myDisconnFrame = null;\r\n        }\r\n        if (this.connectTimeoutTimer_) {\r\n            clearTimeout(this.connectTimeoutTimer_);\r\n            this.connectTimeoutTimer_ = null;\r\n        }\r\n    }\r\n    /**\r\n     * Triggered when this transport is closed\r\n     */\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is closing itself');\r\n            this.shutdown_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_(this.everConnected_);\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n     * that we've left.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('Longpoll is being closed.');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n     * broken into chunks (since URLs have a small maximum length).\r\n     * @param data - The JSON data to transmit.\r\n     */\r\n    send(data) {\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //first, lets get the base64-encoded data\r\n        const base64data = base64Encode(dataStr);\r\n        //We can only fit a certain amount in each URL, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\r\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\r\n        //of segments so that we can reassemble the packet on the server.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\r\n            this.curSegmentNum++;\r\n        }\r\n    }\r\n    /**\r\n     * This is how we notify the server that we're leaving.\r\n     * We aren't able to send requests with DHTML on a window close event, but we can\r\n     * trigger XHR requests in some browsers (everything but Opera basically).\r\n     */\r\n    addDisconnectPingFrame(id, pw) {\r\n        if (isNodeSdk()) {\r\n            return;\r\n        }\r\n        this.myDisconnFrame = document.createElement('iframe');\r\n        const urlParams = {};\r\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\r\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\r\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\r\n        this.myDisconnFrame.src = this.urlFn(urlParams);\r\n        this.myDisconnFrame.style.display = 'none';\r\n        document.body.appendChild(this.myDisconnFrame);\r\n    }\r\n    /**\r\n     * Used to track the bytes received by this client\r\n     */\r\n    incrementIncomingBytes_(args) {\r\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\r\n        const bytesReceived = stringify(args).length;\r\n        this.bytesReceived += bytesReceived;\r\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\r\n    }\r\n}\r\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n *********************************************************************************************/\r\nclass FirebaseIFrameScriptHolder {\r\n    /**\r\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n     */\r\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.urlFn = urlFn;\r\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\r\n        //problems in some browsers.\r\n        this.outstandingRequests = new Set();\r\n        //A queue of the pending segments waiting for transmission to the server.\r\n        this.pendingSegs = [];\r\n        //A serial number. We use this for two things:\r\n        // 1) A way to ensure the browser doesn't cache responses to polls\r\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\r\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\r\n        //    JSONP code in the order it was added to the iframe.\r\n        this.currentSerial = Math.floor(Math.random() * 100000000);\r\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\r\n        // incoming data from the server that we're waiting for).\r\n        this.sendNewPolls = true;\r\n        if (!isNodeSdk()) {\r\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\r\n            //iframes where we put the long-polling script tags. We have two callbacks:\r\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\r\n            //   2) Message Callback - Triggered when new data arrives.\r\n            this.uniqueCallbackIdentifier = LUIDGenerator();\r\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\r\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\r\n                onMessageCB;\r\n            //Create an iframe for us to add script tags to.\r\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\r\n            // Set the iframe's contents.\r\n            let script = '';\r\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\r\n            // for ie9, but ie8 needs to do it again in the document itself.\r\n            if (this.myIFrame.src &&\r\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\r\n                const currentDomain = document.domain;\r\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\r\n            }\r\n            const iframeContents = '<html><body>' + script + '</body></html>';\r\n            try {\r\n                this.myIFrame.doc.open();\r\n                this.myIFrame.doc.write(iframeContents);\r\n                this.myIFrame.doc.close();\r\n            }\r\n            catch (e) {\r\n                log('frame writing exception');\r\n                if (e.stack) {\r\n                    log(e.stack);\r\n                }\r\n                log(e);\r\n            }\r\n        }\r\n        else {\r\n            this.commandCB = commandCB;\r\n            this.onMessageCB = onMessageCB;\r\n        }\r\n    }\r\n    /**\r\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n     * actually use.\r\n     */\r\n    static createIFrame_() {\r\n        const iframe = document.createElement('iframe');\r\n        iframe.style.display = 'none';\r\n        // This is necessary in order to initialize the document inside the iframe\r\n        if (document.body) {\r\n            document.body.appendChild(iframe);\r\n            try {\r\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\r\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\r\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\r\n                const a = iframe.contentWindow.document;\r\n                if (!a) {\r\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\r\n                    log('No IE domain setting required');\r\n                }\r\n            }\r\n            catch (e) {\r\n                const domain = document.domain;\r\n                iframe.src =\r\n                    \"javascript:void((function(){document.open();document.domain='\" +\r\n                        domain +\r\n                        \"';document.close();})())\";\r\n            }\r\n        }\r\n        else {\r\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\r\n            // never gets hit.\r\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\r\n        }\r\n        // Get the document of the iframe in a browser-specific way.\r\n        if (iframe.contentDocument) {\r\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\r\n        }\r\n        else if (iframe.contentWindow) {\r\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        else if (iframe.document) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            iframe.doc = iframe.document; //others?\r\n        }\r\n        return iframe;\r\n    }\r\n    /**\r\n     * Cancel all outstanding queries and remove the frame.\r\n     */\r\n    close() {\r\n        //Mark this iframe as dead, so no new requests are sent.\r\n        this.alive = false;\r\n        if (this.myIFrame) {\r\n            //We have to actually remove all of the html inside this iframe before removing it from the\r\n            //window, or IE will continue loading and executing the script tags we've already added, which\r\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\r\n            this.myIFrame.doc.body.innerHTML = '';\r\n            setTimeout(() => {\r\n                if (this.myIFrame !== null) {\r\n                    document.body.removeChild(this.myIFrame);\r\n                    this.myIFrame = null;\r\n                }\r\n            }, Math.floor(0));\r\n        }\r\n        // Protect from being called recursively.\r\n        const onDisconnect = this.onDisconnect;\r\n        if (onDisconnect) {\r\n            this.onDisconnect = null;\r\n            onDisconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n     * @param id - The ID of this connection\r\n     * @param pw - The password for this connection\r\n     */\r\n    startLongPoll(id, pw) {\r\n        this.myID = id;\r\n        this.myPW = pw;\r\n        this.alive = true;\r\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\r\n        while (this.newRequest_()) { }\r\n    }\r\n    /**\r\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n     * too many outstanding requests and we are still alive.\r\n     *\r\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n     * needed.\r\n     */\r\n    newRequest_() {\r\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\r\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\r\n        // close the old request.\r\n        if (this.alive &&\r\n            this.sendNewPolls &&\r\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\r\n            //construct our url\r\n            this.currentSerial++;\r\n            const urlParams = {};\r\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\r\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\r\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\r\n            let theURL = this.urlFn(urlParams);\r\n            //Now add as much data as we can.\r\n            let curDataString = '';\r\n            let i = 0;\r\n            while (this.pendingSegs.length > 0) {\r\n                //first, lets see if the next segment will fit.\r\n                const nextSeg = this.pendingSegs[0];\r\n                if (nextSeg.d.length +\r\n                    SEG_HEADER_SIZE +\r\n                    curDataString.length <=\r\n                    MAX_URL_DATA_SIZE) {\r\n                    //great, the segment will fit. Lets append it.\r\n                    const theSeg = this.pendingSegs.shift();\r\n                    curDataString =\r\n                        curDataString +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.seg +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.ts +\r\n                            '&' +\r\n                            FIREBASE_LONGPOLL_DATA_PARAM +\r\n                            i +\r\n                            '=' +\r\n                            theSeg.d;\r\n                    i++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            theURL = theURL + curDataString;\r\n            this.addLongPollTag_(theURL, this.currentSerial);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Queue a packet for transmission to the server.\r\n     * @param segnum - A sequential id for this packet segment used for reassembly\r\n     * @param totalsegs - The total number of segments in this packet\r\n     * @param data - The data for this segment.\r\n     */\r\n    enqueueSegment(segnum, totalsegs, data) {\r\n        //add this to the queue of segments to send.\r\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\r\n        //send the data immediately if there isn't already data being transmitted, unless\r\n        //startLongPoll hasn't been called yet.\r\n        if (this.alive) {\r\n            this.newRequest_();\r\n        }\r\n    }\r\n    /**\r\n     * Add a script tag for a regular long-poll request.\r\n     * @param url - The URL of the script tag.\r\n     * @param serial - The serial number of the request.\r\n     */\r\n    addLongPollTag_(url, serial) {\r\n        //remember that we sent this request.\r\n        this.outstandingRequests.add(serial);\r\n        const doNewRequest = () => {\r\n            this.outstandingRequests.delete(serial);\r\n            this.newRequest_();\r\n        };\r\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\r\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\r\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\r\n        const readyStateCB = () => {\r\n            // Request completed.  Cancel the keepalive.\r\n            clearTimeout(keepaliveTimeout);\r\n            // Trigger a new request so we can continue receiving data.\r\n            doNewRequest();\r\n        };\r\n        this.addTag(url, readyStateCB);\r\n    }\r\n    /**\r\n     * Add an arbitrary script tag to the iframe.\r\n     * @param url - The URL for the script tag source.\r\n     * @param loadCB - A callback to be triggered once the script has loaded.\r\n     */\r\n    addTag(url, loadCB) {\r\n        if (isNodeSdk()) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.doNodeLongPoll(url, loadCB);\r\n        }\r\n        else {\r\n            setTimeout(() => {\r\n                try {\r\n                    // if we're already closed, don't add this poll\r\n                    if (!this.sendNewPolls) {\r\n                        return;\r\n                    }\r\n                    const newScript = this.myIFrame.doc.createElement('script');\r\n                    newScript.type = 'text/javascript';\r\n                    newScript.async = true;\r\n                    newScript.src = url;\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    newScript.onload = newScript.onreadystatechange =\r\n                        function () {\r\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                            const rstate = newScript.readyState;\r\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\r\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                                newScript.onload = newScript.onreadystatechange = null;\r\n                                if (newScript.parentNode) {\r\n                                    newScript.parentNode.removeChild(newScript);\r\n                                }\r\n                                loadCB();\r\n                            }\r\n                        };\r\n                    newScript.onerror = () => {\r\n                        log('Long-poll script failed to load: ' + url);\r\n                        this.sendNewPolls = false;\r\n                        this.close();\r\n                    };\r\n                    this.myIFrame.doc.body.appendChild(newScript);\r\n                }\r\n                catch (e) {\r\n                    // TODO: we should make this error visible somehow\r\n                }\r\n            }, Math.floor(1));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\r\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\r\nlet WebSocketImpl = null;\r\nif (typeof MozWebSocket !== 'undefined') {\r\n    WebSocketImpl = MozWebSocket;\r\n}\r\nelse if (typeof WebSocket !== 'undefined') {\r\n    WebSocketImpl = WebSocket;\r\n}\r\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n */\r\nclass WebSocketConnection {\r\n    /**\r\n     * @param connId identifier for this transport\r\n     * @param repoInfo The info for the websocket endpoint.\r\n     * @param applicationId The Firebase App ID for this project.\r\n     * @param appCheckToken The App Check Token for this client.\r\n     * @param authToken The Auth Token for this client.\r\n     * @param transportSessionId Optional transportSessionId if this is connecting\r\n     * to an existing transport session\r\n     * @param lastSessionId Optional lastSessionId if there was a previous\r\n     * connection\r\n     */\r\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\r\n        this.connId = connId;\r\n        this.applicationId = applicationId;\r\n        this.appCheckToken = appCheckToken;\r\n        this.authToken = authToken;\r\n        this.keepaliveTimer = null;\r\n        this.frames = null;\r\n        this.totalFrames = 0;\r\n        this.bytesSent = 0;\r\n        this.bytesReceived = 0;\r\n        this.log_ = logWrapper(this.connId);\r\n        this.stats_ = statsManagerGetCollection(repoInfo);\r\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\r\n        this.nodeAdmin = repoInfo.nodeAdmin;\r\n    }\r\n    /**\r\n     * @param repoInfo - The info for the websocket endpoint.\r\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\r\n     *                                         session\r\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\r\n     * @returns connection url\r\n     */\r\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\r\n        const urlParams = {};\r\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\r\n        if (!isNodeSdk() &&\r\n            typeof location !== 'undefined' &&\r\n            location.hostname &&\r\n            FORGE_DOMAIN_RE.test(location.hostname)) {\r\n            urlParams[REFERER_PARAM] = FORGE_REF;\r\n        }\r\n        if (transportSessionId) {\r\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\r\n        }\r\n        if (lastSessionId) {\r\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\r\n        }\r\n        if (appCheckToken) {\r\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\r\n        }\r\n        if (applicationId) {\r\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\r\n        }\r\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\r\n    }\r\n    /**\r\n     * @param onMessage - Callback when messages arrive\r\n     * @param onDisconnect - Callback with connection lost.\r\n     */\r\n    open(onMessage, onDisconnect) {\r\n        this.onDisconnect = onDisconnect;\r\n        this.onMessage = onMessage;\r\n        this.log_('Websocket connecting to ' + this.connURL);\r\n        this.everConnected_ = false;\r\n        // Assume failure until proven otherwise.\r\n        PersistentStorage.set('previous_websocket_failure', true);\r\n        try {\r\n            let options;\r\n            if (isNodeSdk()) {\r\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\r\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\r\n                const options = {\r\n                    headers: {\r\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\r\n                        'X-Firebase-GMPID': this.applicationId || ''\r\n                    }\r\n                };\r\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\r\n                // Note that we send the credentials here even if they aren't admin credentials, which is\r\n                // not a problem.\r\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\r\n                // through the websocket connection once it is established.\r\n                if (this.authToken) {\r\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\r\n                }\r\n                if (this.appCheckToken) {\r\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\r\n                }\r\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\r\n                const env = process['env'];\r\n                const proxy = this.connURL.indexOf('wss://') === 0\r\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\r\n                    : env['HTTP_PROXY'] || env['http_proxy'];\r\n                if (proxy) {\r\n                    options['proxy'] = { origin: proxy };\r\n                }\r\n            }\r\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\r\n        }\r\n        catch (e) {\r\n            this.log_('Error instantiating WebSocket.');\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n            return;\r\n        }\r\n        this.mySock.onopen = () => {\r\n            this.log_('Websocket connected.');\r\n            this.everConnected_ = true;\r\n        };\r\n        this.mySock.onclose = () => {\r\n            this.log_('Websocket connection was disconnected.');\r\n            this.mySock = null;\r\n            this.onClosed_();\r\n        };\r\n        this.mySock.onmessage = m => {\r\n            this.handleIncomingFrame(m);\r\n        };\r\n        this.mySock.onerror = e => {\r\n            this.log_('WebSocket error.  Closing connection.');\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const error = e.message || e.data;\r\n            if (error) {\r\n                this.log_(error);\r\n            }\r\n            this.onClosed_();\r\n        };\r\n    }\r\n    /**\r\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n     */\r\n    start() { }\r\n    static forceDisallow() {\r\n        WebSocketConnection.forceDisallow_ = true;\r\n    }\r\n    static isAvailable() {\r\n        let isOldAndroid = false;\r\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\r\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\r\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\r\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\r\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\r\n                    isOldAndroid = true;\r\n                }\r\n            }\r\n        }\r\n        return (!isOldAndroid &&\r\n            WebSocketImpl !== null &&\r\n            !WebSocketConnection.forceDisallow_);\r\n    }\r\n    /**\r\n     * Returns true if we previously failed to connect with this transport.\r\n     */\r\n    static previouslyFailed() {\r\n        // If our persistent storage is actually only in-memory storage,\r\n        // we default to assuming that it previously failed to be safe.\r\n        return (PersistentStorage.isInMemoryStorage ||\r\n            PersistentStorage.get('previous_websocket_failure') === true);\r\n    }\r\n    markConnectionHealthy() {\r\n        PersistentStorage.remove('previous_websocket_failure');\r\n    }\r\n    appendFrame_(data) {\r\n        this.frames.push(data);\r\n        if (this.frames.length === this.totalFrames) {\r\n            const fullMess = this.frames.join('');\r\n            this.frames = null;\r\n            const jsonMess = jsonEval(fullMess);\r\n            //handle the message\r\n            this.onMessage(jsonMess);\r\n        }\r\n    }\r\n    /**\r\n     * @param frameCount - The number of frames we are expecting from the server\r\n     */\r\n    handleNewFrameCount_(frameCount) {\r\n        this.totalFrames = frameCount;\r\n        this.frames = [];\r\n    }\r\n    /**\r\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n     * @returns Any remaining data to be process, or null if there is none\r\n     */\r\n    extractFrameCount_(data) {\r\n        assert(this.frames === null, 'We already have a frame buffer');\r\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\r\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\r\n        if (data.length <= 6) {\r\n            const frameCount = Number(data);\r\n            if (!isNaN(frameCount)) {\r\n                this.handleNewFrameCount_(frameCount);\r\n                return null;\r\n            }\r\n        }\r\n        this.handleNewFrameCount_(1);\r\n        return data;\r\n    }\r\n    /**\r\n     * Process a websocket frame that has arrived from the server.\r\n     * @param mess - The frame data\r\n     */\r\n    handleIncomingFrame(mess) {\r\n        if (this.mySock === null) {\r\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\r\n        }\r\n        const data = mess['data'];\r\n        this.bytesReceived += data.length;\r\n        this.stats_.incrementCounter('bytes_received', data.length);\r\n        this.resetKeepAlive();\r\n        if (this.frames !== null) {\r\n            // we're buffering\r\n            this.appendFrame_(data);\r\n        }\r\n        else {\r\n            // try to parse out a frame count, otherwise, assume 1 and process it\r\n            const remainingData = this.extractFrameCount_(data);\r\n            if (remainingData !== null) {\r\n                this.appendFrame_(remainingData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Send a message to the server\r\n     * @param data - The JSON object to transmit\r\n     */\r\n    send(data) {\r\n        this.resetKeepAlive();\r\n        const dataStr = stringify(data);\r\n        this.bytesSent += dataStr.length;\r\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\r\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\r\n        //up into multiple pieces if it doesn't fit in one request.\r\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\r\n        //Send the length header\r\n        if (dataSegs.length > 1) {\r\n            this.sendString_(String(dataSegs.length));\r\n        }\r\n        //Send the actual data in segments.\r\n        for (let i = 0; i < dataSegs.length; i++) {\r\n            this.sendString_(dataSegs[i]);\r\n        }\r\n    }\r\n    shutdown_() {\r\n        this.isClosed_ = true;\r\n        if (this.keepaliveTimer) {\r\n            clearInterval(this.keepaliveTimer);\r\n            this.keepaliveTimer = null;\r\n        }\r\n        if (this.mySock) {\r\n            this.mySock.close();\r\n            this.mySock = null;\r\n        }\r\n    }\r\n    onClosed_() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is closing itself');\r\n            this.shutdown_();\r\n            // since this is an internal close, trigger the close listener\r\n            if (this.onDisconnect) {\r\n                this.onDisconnect(this.everConnected_);\r\n                this.onDisconnect = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * External-facing close handler.\r\n     * Close the websocket and kill the connection.\r\n     */\r\n    close() {\r\n        if (!this.isClosed_) {\r\n            this.log_('WebSocket is being closed');\r\n            this.shutdown_();\r\n        }\r\n    }\r\n    /**\r\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n     * the last activity.\r\n     */\r\n    resetKeepAlive() {\r\n        clearInterval(this.keepaliveTimer);\r\n        this.keepaliveTimer = setInterval(() => {\r\n            //If there has been no websocket activity for a while, send a no-op\r\n            if (this.mySock) {\r\n                this.sendString_('0');\r\n            }\r\n            this.resetKeepAlive();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\r\n    }\r\n    /**\r\n     * Send a string over the websocket.\r\n     *\r\n     * @param str - String to send.\r\n     */\r\n    sendString_(str) {\r\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\r\n        // calls for some unknown reason.  We treat these as an error and disconnect.\r\n        // See https://app.asana.com/0/58926111402292/68021340250410\r\n        try {\r\n            this.mySock.send(str);\r\n        }\r\n        catch (e) {\r\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\r\n            setTimeout(this.onClosed_.bind(this), 0);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Number of response before we consider the connection \"healthy.\"\r\n */\r\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\r\n/**\r\n * Time to wait for the connection te become healthy before giving up.\r\n */\r\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n */\r\nclass TransportManager {\r\n    /**\r\n     * @param repoInfo - Metadata around the namespace we're connecting to\r\n     */\r\n    constructor(repoInfo) {\r\n        this.initTransports_(repoInfo);\r\n    }\r\n    static get ALL_TRANSPORTS() {\r\n        return [BrowserPollConnection, WebSocketConnection];\r\n    }\r\n    /**\r\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\r\n     * TransportManager has already set up transports_\r\n     */\r\n    static get IS_TRANSPORT_INITIALIZED() {\r\n        return this.globalTransportInitialized_;\r\n    }\r\n    initTransports_(repoInfo) {\r\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\r\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\r\n        if (repoInfo.webSocketOnly) {\r\n            if (!isWebSocketsAvailable) {\r\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\r\n            }\r\n            isSkipPollConnection = true;\r\n        }\r\n        if (isSkipPollConnection) {\r\n            this.transports_ = [WebSocketConnection];\r\n        }\r\n        else {\r\n            const transports = (this.transports_ = []);\r\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\r\n                if (transport && transport['isAvailable']()) {\r\n                    transports.push(transport);\r\n                }\r\n            }\r\n            TransportManager.globalTransportInitialized_ = true;\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the initial transport to use\r\n     */\r\n    initialTransport() {\r\n        if (this.transports_.length > 0) {\r\n            return this.transports_[0];\r\n        }\r\n        else {\r\n            throw new Error('No transports available');\r\n        }\r\n    }\r\n    /**\r\n     * @returns The constructor for the next transport, or null\r\n     */\r\n    upgradeTransport() {\r\n        if (this.transports_.length > 1) {\r\n            return this.transports_[1];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Keeps track of whether the TransportManager has already chosen a transport to use\r\nTransportManager.globalTransportInitialized_ = false;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Abort upgrade attempt if it takes longer than 60s.\r\nconst UPGRADE_TIMEOUT = 60000;\r\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\r\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\r\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\r\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\r\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\r\n// but we've sent/received enough bytes, we don't cancel the connection.\r\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\r\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\r\nconst MESSAGE_TYPE = 't';\r\nconst MESSAGE_DATA = 'd';\r\nconst CONTROL_SHUTDOWN = 's';\r\nconst CONTROL_RESET = 'r';\r\nconst CONTROL_ERROR = 'e';\r\nconst CONTROL_PONG = 'o';\r\nconst SWITCH_ACK = 'a';\r\nconst END_TRANSMISSION = 'n';\r\nconst PING = 'p';\r\nconst SERVER_HELLO = 'h';\r\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n */\r\nclass Connection {\r\n    /**\r\n     * @param id - an id for this connection\r\n     * @param repoInfo_ - the info for the endpoint to connect to\r\n     * @param applicationId_ - the Firebase App ID for this project\r\n     * @param appCheckToken_ - The App Check Token for this device.\r\n     * @param authToken_ - The auth token for this session.\r\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\r\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\r\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n     */\r\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\r\n        this.id = id;\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.appCheckToken_ = appCheckToken_;\r\n        this.authToken_ = authToken_;\r\n        this.onMessage_ = onMessage_;\r\n        this.onReady_ = onReady_;\r\n        this.onDisconnect_ = onDisconnect_;\r\n        this.onKill_ = onKill_;\r\n        this.lastSessionId = lastSessionId;\r\n        this.connectionCount = 0;\r\n        this.pendingDataMessages = [];\r\n        this.state_ = 0 /* CONNECTING */;\r\n        this.log_ = logWrapper('c:' + this.id + ':');\r\n        this.transportManager_ = new TransportManager(repoInfo_);\r\n        this.log_('Connection created');\r\n        this.start_();\r\n    }\r\n    /**\r\n     * Starts a connection attempt\r\n     */\r\n    start_() {\r\n        const conn = this.transportManager_.initialTransport();\r\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessageReceived = this.connReceiver_(this.conn_);\r\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\r\n        this.tx_ = this.conn_;\r\n        this.rx_ = this.conn_;\r\n        this.secondaryConn_ = null;\r\n        this.isHealthy_ = false;\r\n        /*\r\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n         * still have the context of your originating frame.\r\n         */\r\n        setTimeout(() => {\r\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\r\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\r\n        }, Math.floor(0));\r\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\r\n        if (healthyTimeoutMS > 0) {\r\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\r\n                this.healthyTimeout_ = null;\r\n                if (!this.isHealthy_) {\r\n                    if (this.conn_ &&\r\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has received ' +\r\n                            this.conn_.bytesReceived +\r\n                            ' bytes.  Marking connection healthy.');\r\n                        this.isHealthy_ = true;\r\n                        this.conn_.markConnectionHealthy();\r\n                    }\r\n                    else if (this.conn_ &&\r\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\r\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\r\n                            this.conn_.bytesSent +\r\n                            ' bytes.  Leaving connection alive.');\r\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\r\n                        // the server.\r\n                    }\r\n                    else {\r\n                        this.log_('Closing unhealthy connection after timeout.');\r\n                        this.close();\r\n                    }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            }, Math.floor(healthyTimeoutMS));\r\n        }\r\n    }\r\n    nextTransportId_() {\r\n        return 'c:' + this.id + ':' + this.connectionCount++;\r\n    }\r\n    disconnReceiver_(conn) {\r\n        return everConnected => {\r\n            if (conn === this.conn_) {\r\n                this.onConnectionLost_(everConnected);\r\n            }\r\n            else if (conn === this.secondaryConn_) {\r\n                this.log_('Secondary connection lost.');\r\n                this.onSecondaryConnectionLost_();\r\n            }\r\n            else {\r\n                this.log_('closing an old connection');\r\n            }\r\n        };\r\n    }\r\n    connReceiver_(conn) {\r\n        return (message) => {\r\n            if (this.state_ !== 2 /* DISCONNECTED */) {\r\n                if (conn === this.rx_) {\r\n                    this.onPrimaryMessageReceived_(message);\r\n                }\r\n                else if (conn === this.secondaryConn_) {\r\n                    this.onSecondaryMessageReceived_(message);\r\n                }\r\n                else {\r\n                    this.log_('message on old connection');\r\n                }\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * @param dataMsg - An arbitrary data message to be sent to the server\r\n     */\r\n    sendRequest(dataMsg) {\r\n        // wrap in a data message envelope and send it on\r\n        const msg = { t: 'd', d: dataMsg };\r\n        this.sendData_(msg);\r\n    }\r\n    tryCleanupConnection() {\r\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\r\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\r\n            this.conn_ = this.secondaryConn_;\r\n            this.secondaryConn_ = null;\r\n            // the server will shutdown the old connection\r\n        }\r\n    }\r\n    onSecondaryControl_(controlData) {\r\n        if (MESSAGE_TYPE in controlData) {\r\n            const cmd = controlData[MESSAGE_TYPE];\r\n            if (cmd === SWITCH_ACK) {\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // Most likely the session wasn't valid. Abandon the switch attempt\r\n                this.log_('Got a reset on secondary, closing it');\r\n                this.secondaryConn_.close();\r\n                // If we were already using this connection for something, than we need to fully close\r\n                if (this.tx_ === this.secondaryConn_ ||\r\n                    this.rx_ === this.secondaryConn_) {\r\n                    this.close();\r\n                }\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on secondary.');\r\n                this.secondaryResponsesRequired_--;\r\n                this.upgradeIfSecondaryHealthy_();\r\n            }\r\n        }\r\n    }\r\n    onSecondaryMessageReceived_(parsedData) {\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onSecondaryControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            // got a data message, but we're still second connection. Need to buffer it up\r\n            this.pendingDataMessages.push(data);\r\n        }\r\n        else {\r\n            throw new Error('Unknown protocol layer: ' + layer);\r\n        }\r\n    }\r\n    upgradeIfSecondaryHealthy_() {\r\n        if (this.secondaryResponsesRequired_ <= 0) {\r\n            this.log_('Secondary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n            this.secondaryConn_.markConnectionHealthy();\r\n            this.proceedWithUpgrade_();\r\n        }\r\n        else {\r\n            // Send a ping to make sure the connection is healthy.\r\n            this.log_('sending ping on secondary.');\r\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    proceedWithUpgrade_() {\r\n        // tell this connection to consider itself open\r\n        this.secondaryConn_.start();\r\n        // send ack\r\n        this.log_('sending client ack on secondary');\r\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\r\n        // send end packet on primary transport, switch to sending on this one\r\n        // can receive on this one, buffer responses until end received on primary transport\r\n        this.log_('Ending transmission on primary');\r\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\r\n        this.tx_ = this.secondaryConn_;\r\n        this.tryCleanupConnection();\r\n    }\r\n    onPrimaryMessageReceived_(parsedData) {\r\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\r\n        const layer = requireKey('t', parsedData);\r\n        const data = requireKey('d', parsedData);\r\n        if (layer === 'c') {\r\n            this.onControl_(data);\r\n        }\r\n        else if (layer === 'd') {\r\n            this.onDataMessage_(data);\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        this.onPrimaryResponse_();\r\n        // We don't do anything with data messages, just kick them up a level\r\n        this.onMessage_(message);\r\n    }\r\n    onPrimaryResponse_() {\r\n        if (!this.isHealthy_) {\r\n            this.primaryResponsesRequired_--;\r\n            if (this.primaryResponsesRequired_ <= 0) {\r\n                this.log_('Primary connection is healthy.');\r\n                this.isHealthy_ = true;\r\n                this.conn_.markConnectionHealthy();\r\n            }\r\n        }\r\n    }\r\n    onControl_(controlData) {\r\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\r\n        if (MESSAGE_DATA in controlData) {\r\n            const payload = controlData[MESSAGE_DATA];\r\n            if (cmd === SERVER_HELLO) {\r\n                this.onHandshake_(payload);\r\n            }\r\n            else if (cmd === END_TRANSMISSION) {\r\n                this.log_('recvd end transmission on primary');\r\n                this.rx_ = this.secondaryConn_;\r\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\r\n                    this.onDataMessage_(this.pendingDataMessages[i]);\r\n                }\r\n                this.pendingDataMessages = [];\r\n                this.tryCleanupConnection();\r\n            }\r\n            else if (cmd === CONTROL_SHUTDOWN) {\r\n                // This was previously the 'onKill' callback passed to the lower-level connection\r\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\r\n                this.onConnectionShutdown_(payload);\r\n            }\r\n            else if (cmd === CONTROL_RESET) {\r\n                // payload in this case is the host we should contact\r\n                this.onReset_(payload);\r\n            }\r\n            else if (cmd === CONTROL_ERROR) {\r\n                error('Server Error: ' + payload);\r\n            }\r\n            else if (cmd === CONTROL_PONG) {\r\n                this.log_('got pong on primary.');\r\n                this.onPrimaryResponse_();\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }\r\n            else {\r\n                error('Unknown control packet command: ' + cmd);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param handshake - The handshake data returned from the server\r\n     */\r\n    onHandshake_(handshake) {\r\n        const timestamp = handshake.ts;\r\n        const version = handshake.v;\r\n        const host = handshake.h;\r\n        this.sessionId = handshake.s;\r\n        this.repoInfo_.host = host;\r\n        // if we've already closed the connection, then don't bother trying to progress further\r\n        if (this.state_ === 0 /* CONNECTING */) {\r\n            this.conn_.start();\r\n            this.onConnectionEstablished_(this.conn_, timestamp);\r\n            if (PROTOCOL_VERSION !== version) {\r\n                warn('Protocol version mismatch detected');\r\n            }\r\n            // TODO: do we want to upgrade? when? maybe a delay?\r\n            this.tryStartUpgrade_();\r\n        }\r\n    }\r\n    tryStartUpgrade_() {\r\n        const conn = this.transportManager_.upgradeTransport();\r\n        if (conn) {\r\n            this.startUpgrade_(conn);\r\n        }\r\n    }\r\n    startUpgrade_(conn) {\r\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\r\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\r\n        // can consider the transport healthy.\r\n        this.secondaryResponsesRequired_ =\r\n            conn['responsesRequiredToBeHealthy'] || 0;\r\n        const onMessage = this.connReceiver_(this.secondaryConn_);\r\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\r\n        this.secondaryConn_.open(onMessage, onDisconnect);\r\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\r\n        setTimeoutNonBlocking(() => {\r\n            if (this.secondaryConn_) {\r\n                this.log_('Timed out trying to upgrade.');\r\n                this.secondaryConn_.close();\r\n            }\r\n        }, Math.floor(UPGRADE_TIMEOUT));\r\n    }\r\n    onReset_(host) {\r\n        this.log_('Reset packet received.  New host: ' + host);\r\n        this.repoInfo_.host = host;\r\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\r\n        // We don't currently support resets after the connection has already been established\r\n        if (this.state_ === 1 /* CONNECTED */) {\r\n            this.close();\r\n        }\r\n        else {\r\n            // Close whatever connections we have open and start again.\r\n            this.closeConnections_();\r\n            this.start_();\r\n        }\r\n    }\r\n    onConnectionEstablished_(conn, timestamp) {\r\n        this.log_('Realtime connection established.');\r\n        this.conn_ = conn;\r\n        this.state_ = 1 /* CONNECTED */;\r\n        if (this.onReady_) {\r\n            this.onReady_(timestamp, this.sessionId);\r\n            this.onReady_ = null;\r\n        }\r\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\r\n        // send some pings.\r\n        if (this.primaryResponsesRequired_ === 0) {\r\n            this.log_('Primary connection is healthy.');\r\n            this.isHealthy_ = true;\r\n        }\r\n        else {\r\n            setTimeoutNonBlocking(() => {\r\n                this.sendPingOnPrimaryIfNecessary_();\r\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\r\n        }\r\n    }\r\n    sendPingOnPrimaryIfNecessary_() {\r\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\r\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('sending ping on primary.');\r\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\r\n        }\r\n    }\r\n    onSecondaryConnectionLost_() {\r\n        const conn = this.secondaryConn_;\r\n        this.secondaryConn_ = null;\r\n        if (this.tx_ === conn || this.rx_ === conn) {\r\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\r\n            this.close();\r\n        }\r\n    }\r\n    /**\r\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\r\n     * we should flush the host cache\r\n     */\r\n    onConnectionLost_(everConnected) {\r\n        this.conn_ = null;\r\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\r\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\r\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\r\n            this.log_('Realtime connection failed.');\r\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\r\n            if (this.repoInfo_.isCacheableHost()) {\r\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\r\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\r\n                this.repoInfo_.internalHost = this.repoInfo_.host;\r\n            }\r\n        }\r\n        else if (this.state_ === 1 /* CONNECTED */) {\r\n            this.log_('Realtime connection lost.');\r\n        }\r\n        this.close();\r\n    }\r\n    onConnectionShutdown_(reason) {\r\n        this.log_('Connection shutdown command received. Shutting down...');\r\n        if (this.onKill_) {\r\n            this.onKill_(reason);\r\n            this.onKill_ = null;\r\n        }\r\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\r\n        // so clear the callback.\r\n        this.onDisconnect_ = null;\r\n        this.close();\r\n    }\r\n    sendData_(data) {\r\n        if (this.state_ !== 1 /* CONNECTED */) {\r\n            throw 'Connection is not connected';\r\n        }\r\n        else {\r\n            this.tx_.send(data);\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up this connection, calling the appropriate callbacks\r\n     */\r\n    close() {\r\n        if (this.state_ !== 2 /* DISCONNECTED */) {\r\n            this.log_('Closing realtime connection.');\r\n            this.state_ = 2 /* DISCONNECTED */;\r\n            this.closeConnections_();\r\n            if (this.onDisconnect_) {\r\n                this.onDisconnect_();\r\n                this.onDisconnect_ = null;\r\n            }\r\n        }\r\n    }\r\n    closeConnections_() {\r\n        this.log_('Shutting down all connections');\r\n        if (this.conn_) {\r\n            this.conn_.close();\r\n            this.conn_ = null;\r\n        }\r\n        if (this.secondaryConn_) {\r\n            this.secondaryConn_.close();\r\n            this.secondaryConn_ = null;\r\n        }\r\n        if (this.healthyTimeout_) {\r\n            clearTimeout(this.healthyTimeout_);\r\n            this.healthyTimeout_ = null;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\r\nclass ServerActions {\r\n    put(pathString, data, onComplete, hash) { }\r\n    merge(pathString, data, onComplete, hash) { }\r\n    /**\r\n     * Refreshes the auth token for the current connection.\r\n     * @param token - The authentication token\r\n     */\r\n    refreshAuthToken(token) { }\r\n    /**\r\n     * Refreshes the app check token for the current connection.\r\n     * @param token The app check token\r\n     */\r\n    refreshAppCheckToken(token) { }\r\n    onDisconnectPut(pathString, data, onComplete) { }\r\n    onDisconnectMerge(pathString, data, onComplete) { }\r\n    onDisconnectCancel(pathString, onComplete) { }\r\n    reportStats(stats) { }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\r\nclass EventEmitter {\r\n    constructor(allowedEvents_) {\r\n        this.allowedEvents_ = allowedEvents_;\r\n        this.listeners_ = {};\r\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\r\n    }\r\n    /**\r\n     * To be called by derived classes to trigger events.\r\n     */\r\n    trigger(eventType, ...varArgs) {\r\n        if (Array.isArray(this.listeners_[eventType])) {\r\n            // Clone the list, since callbacks could add/remove listeners.\r\n            const listeners = [...this.listeners_[eventType]];\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                listeners[i].callback.apply(listeners[i].context, varArgs);\r\n            }\r\n        }\r\n    }\r\n    on(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\r\n        this.listeners_[eventType].push({ callback, context });\r\n        const eventData = this.getInitialEvent(eventType);\r\n        if (eventData) {\r\n            callback.apply(context, eventData);\r\n        }\r\n    }\r\n    off(eventType, callback, context) {\r\n        this.validateEventType_(eventType);\r\n        const listeners = this.listeners_[eventType] || [];\r\n        for (let i = 0; i < listeners.length; i++) {\r\n            if (listeners[i].callback === callback &&\r\n                (!context || context === listeners[i].context)) {\r\n                listeners.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    validateEventType_(eventType) {\r\n        assert(this.allowedEvents_.find(et => {\r\n            return et === eventType;\r\n        }), 'Unknown event: ' + eventType);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n */\r\nclass OnlineMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['online']);\r\n        this.online_ = true;\r\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\r\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\r\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\r\n        // for Cordova.\r\n        if (typeof window !== 'undefined' &&\r\n            typeof window.addEventListener !== 'undefined' &&\r\n            !isMobileCordova()) {\r\n            window.addEventListener('online', () => {\r\n                if (!this.online_) {\r\n                    this.online_ = true;\r\n                    this.trigger('online', true);\r\n                }\r\n            }, false);\r\n            window.addEventListener('offline', () => {\r\n                if (this.online_) {\r\n                    this.online_ = false;\r\n                    this.trigger('online', false);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new OnlineMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\r\n        return [this.online_];\r\n    }\r\n    currentlyOnline() {\r\n        return this.online_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/** Maximum key depth. */\r\nconst MAX_PATH_DEPTH = 32;\r\n/** Maximum number of (UTF8) bytes in a Firebase path. */\r\nconst MAX_PATH_LENGTH_BYTES = 768;\r\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\r\nclass Path {\r\n    /**\r\n     * @param pathOrString - Path string to parse, or another path, or the raw\r\n     * tokens array\r\n     */\r\n    constructor(pathOrString, pieceNum) {\r\n        if (pieceNum === void 0) {\r\n            this.pieces_ = pathOrString.split('/');\r\n            // Remove empty pieces.\r\n            let copyTo = 0;\r\n            for (let i = 0; i < this.pieces_.length; i++) {\r\n                if (this.pieces_[i].length > 0) {\r\n                    this.pieces_[copyTo] = this.pieces_[i];\r\n                    copyTo++;\r\n                }\r\n            }\r\n            this.pieces_.length = copyTo;\r\n            this.pieceNum_ = 0;\r\n        }\r\n        else {\r\n            this.pieces_ = pathOrString;\r\n            this.pieceNum_ = pieceNum;\r\n        }\r\n    }\r\n    toString() {\r\n        let pathString = '';\r\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\r\n            if (this.pieces_[i] !== '') {\r\n                pathString += '/' + this.pieces_[i];\r\n            }\r\n        }\r\n        return pathString || '/';\r\n    }\r\n}\r\nfunction newEmptyPath() {\r\n    return new Path('');\r\n}\r\nfunction pathGetFront(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    return path.pieces_[path.pieceNum_];\r\n}\r\n/**\r\n * @returns The number of segments in this path\r\n */\r\nfunction pathGetLength(path) {\r\n    return path.pieces_.length - path.pieceNum_;\r\n}\r\nfunction pathPopFront(path) {\r\n    let pieceNum = path.pieceNum_;\r\n    if (pieceNum < path.pieces_.length) {\r\n        pieceNum++;\r\n    }\r\n    return new Path(path.pieces_, pieceNum);\r\n}\r\nfunction pathGetBack(path) {\r\n    if (path.pieceNum_ < path.pieces_.length) {\r\n        return path.pieces_[path.pieces_.length - 1];\r\n    }\r\n    return null;\r\n}\r\nfunction pathToUrlEncodedString(path) {\r\n    let pathString = '';\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        if (path.pieces_[i] !== '') {\r\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\r\n        }\r\n    }\r\n    return pathString || '/';\r\n}\r\n/**\r\n * Shallow copy of the parts of the path.\r\n *\r\n */\r\nfunction pathSlice(path, begin = 0) {\r\n    return path.pieces_.slice(path.pieceNum_ + begin);\r\n}\r\nfunction pathParent(path) {\r\n    if (path.pieceNum_ >= path.pieces_.length) {\r\n        return null;\r\n    }\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\nfunction pathChild(path, childPathObj) {\r\n    const pieces = [];\r\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\r\n        pieces.push(path.pieces_[i]);\r\n    }\r\n    if (childPathObj instanceof Path) {\r\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\r\n            pieces.push(childPathObj.pieces_[i]);\r\n        }\r\n    }\r\n    else {\r\n        const childPieces = childPathObj.split('/');\r\n        for (let i = 0; i < childPieces.length; i++) {\r\n            if (childPieces[i].length > 0) {\r\n                pieces.push(childPieces[i]);\r\n            }\r\n        }\r\n    }\r\n    return new Path(pieces, 0);\r\n}\r\n/**\r\n * @returns True if there are no segments in this path\r\n */\r\nfunction pathIsEmpty(path) {\r\n    return path.pieceNum_ >= path.pieces_.length;\r\n}\r\n/**\r\n * @returns The path from outerPath to innerPath\r\n */\r\nfunction newRelativePath(outerPath, innerPath) {\r\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\r\n    if (outer === null) {\r\n        return innerPath;\r\n    }\r\n    else if (outer === inner) {\r\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\r\n    }\r\n    else {\r\n        throw new Error('INTERNAL ERROR: innerPath (' +\r\n            innerPath +\r\n            ') is not within ' +\r\n            'outerPath (' +\r\n            outerPath +\r\n            ')');\r\n    }\r\n}\r\n/**\r\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\r\n */\r\nfunction pathCompare(left, right) {\r\n    const leftKeys = pathSlice(left, 0);\r\n    const rightKeys = pathSlice(right, 0);\r\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\r\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\r\n        if (cmp !== 0) {\r\n            return cmp;\r\n        }\r\n    }\r\n    if (leftKeys.length === rightKeys.length) {\r\n        return 0;\r\n    }\r\n    return leftKeys.length < rightKeys.length ? -1 : 1;\r\n}\r\n/**\r\n * @returns true if paths are the same.\r\n */\r\nfunction pathEquals(path, other) {\r\n    if (pathGetLength(path) !== pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * @returns True if this path is a parent (or the same as) other\r\n */\r\nfunction pathContains(path, other) {\r\n    let i = path.pieceNum_;\r\n    let j = other.pieceNum_;\r\n    if (pathGetLength(path) > pathGetLength(other)) {\r\n        return false;\r\n    }\r\n    while (i < path.pieces_.length) {\r\n        if (path.pieces_[i] !== other.pieces_[j]) {\r\n            return false;\r\n        }\r\n        ++i;\r\n        ++j;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\r\nclass ValidationPath {\r\n    /**\r\n     * @param path - Initial Path.\r\n     * @param errorPrefix_ - Prefix for any error messages.\r\n     */\r\n    constructor(path, errorPrefix_) {\r\n        this.errorPrefix_ = errorPrefix_;\r\n        this.parts_ = pathSlice(path, 0);\r\n        /** Initialize to number of '/' chars needed in path. */\r\n        this.byteLength_ = Math.max(1, this.parts_.length);\r\n        for (let i = 0; i < this.parts_.length; i++) {\r\n            this.byteLength_ += stringLength(this.parts_[i]);\r\n        }\r\n        validationPathCheckValid(this);\r\n    }\r\n}\r\nfunction validationPathPush(validationPath, child) {\r\n    // Count the needed '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ += 1;\r\n    }\r\n    validationPath.parts_.push(child);\r\n    validationPath.byteLength_ += stringLength(child);\r\n    validationPathCheckValid(validationPath);\r\n}\r\nfunction validationPathPop(validationPath) {\r\n    const last = validationPath.parts_.pop();\r\n    validationPath.byteLength_ -= stringLength(last);\r\n    // Un-count the previous '/'\r\n    if (validationPath.parts_.length > 0) {\r\n        validationPath.byteLength_ -= 1;\r\n    }\r\n}\r\nfunction validationPathCheckValid(validationPath) {\r\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'has a key path longer than ' +\r\n            MAX_PATH_LENGTH_BYTES +\r\n            ' bytes (' +\r\n            validationPath.byteLength_ +\r\n            ').');\r\n    }\r\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\r\n        throw new Error(validationPath.errorPrefix_ +\r\n            'path specified exceeds the maximum depth that can be written (' +\r\n            MAX_PATH_DEPTH +\r\n            ') or object contains a cycle ' +\r\n            validationPathToErrorString(validationPath));\r\n    }\r\n}\r\n/**\r\n * String for use in error messages - uses '.' notation for path.\r\n */\r\nfunction validationPathToErrorString(validationPath) {\r\n    if (validationPath.parts_.length === 0) {\r\n        return '';\r\n    }\r\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass VisibilityMonitor extends EventEmitter {\r\n    constructor() {\r\n        super(['visible']);\r\n        let hidden;\r\n        let visibilityChange;\r\n        if (typeof document !== 'undefined' &&\r\n            typeof document.addEventListener !== 'undefined') {\r\n            if (typeof document['hidden'] !== 'undefined') {\r\n                // Opera 12.10 and Firefox 18 and later support\r\n                visibilityChange = 'visibilitychange';\r\n                hidden = 'hidden';\r\n            }\r\n            else if (typeof document['mozHidden'] !== 'undefined') {\r\n                visibilityChange = 'mozvisibilitychange';\r\n                hidden = 'mozHidden';\r\n            }\r\n            else if (typeof document['msHidden'] !== 'undefined') {\r\n                visibilityChange = 'msvisibilitychange';\r\n                hidden = 'msHidden';\r\n            }\r\n            else if (typeof document['webkitHidden'] !== 'undefined') {\r\n                visibilityChange = 'webkitvisibilitychange';\r\n                hidden = 'webkitHidden';\r\n            }\r\n        }\r\n        // Initially, we always assume we are visible. This ensures that in browsers\r\n        // without page visibility support or in cases where we are never visible\r\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\r\n        // reconnects\r\n        this.visible_ = true;\r\n        if (visibilityChange) {\r\n            document.addEventListener(visibilityChange, () => {\r\n                const visible = !document[hidden];\r\n                if (visible !== this.visible_) {\r\n                    this.visible_ = visible;\r\n                    this.trigger('visible', visible);\r\n                }\r\n            }, false);\r\n        }\r\n    }\r\n    static getInstance() {\r\n        return new VisibilityMonitor();\r\n    }\r\n    getInitialEvent(eventType) {\r\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\r\n        return [this.visible_];\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RECONNECT_MIN_DELAY = 1000;\r\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\r\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\r\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\r\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\r\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\r\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\r\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\r\nconst INVALID_TOKEN_THRESHOLD = 3;\r\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\r\nclass PersistentConnection extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param applicationId_ - The Firebase App ID for this project\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.applicationId_ = applicationId_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.onConnectStatus_ = onConnectStatus_;\r\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        this.authOverride_ = authOverride_;\r\n        // Used for diagnostic logging.\r\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\r\n        this.log_ = logWrapper('p:' + this.id + ':');\r\n        this.interruptReasons_ = {};\r\n        this.listens = new Map();\r\n        this.outstandingPuts_ = [];\r\n        this.outstandingGets_ = [];\r\n        this.outstandingPutCount_ = 0;\r\n        this.outstandingGetCount_ = 0;\r\n        this.onDisconnectRequestQueue_ = [];\r\n        this.connected_ = false;\r\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\r\n        this.securityDebugCallback_ = null;\r\n        this.lastSessionId = null;\r\n        this.establishConnectionTimer_ = null;\r\n        this.visible_ = false;\r\n        // Before we get connected, we keep a queue of pending messages to send.\r\n        this.requestCBHash_ = {};\r\n        this.requestNumber_ = 0;\r\n        this.realtime_ = null;\r\n        this.authToken_ = null;\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = false;\r\n        this.invalidAuthTokenCount_ = 0;\r\n        this.invalidAppCheckTokenCount_ = 0;\r\n        this.firstConnection_ = true;\r\n        this.lastConnectionAttemptTime_ = null;\r\n        this.lastConnectionEstablishedTime_ = null;\r\n        if (authOverride_ && !isNodeSdk()) {\r\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\r\n        }\r\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\r\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\r\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\r\n        }\r\n    }\r\n    sendRequest(action, body, onResponse) {\r\n        const curReqNum = ++this.requestNumber_;\r\n        const msg = { r: curReqNum, a: action, b: body };\r\n        this.log_(stringify(msg));\r\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\r\n        this.realtime_.sendRequest(msg);\r\n        if (onResponse) {\r\n            this.requestCBHash_[curReqNum] = onResponse;\r\n        }\r\n    }\r\n    get(query) {\r\n        this.initConnection_();\r\n        const deferred = new Deferred();\r\n        const request = {\r\n            p: query._path.toString(),\r\n            q: query._queryObject\r\n        };\r\n        const outstandingGet = {\r\n            action: 'g',\r\n            request,\r\n            onComplete: (message) => {\r\n                const payload = message['d'];\r\n                if (message['s'] === 'ok') {\r\n                    this.onDataUpdate_(request['p'], payload, \r\n                    /*isMerge*/ false, \r\n                    /*tag*/ null);\r\n                    deferred.resolve(payload);\r\n                }\r\n                else {\r\n                    deferred.reject(payload);\r\n                }\r\n            }\r\n        };\r\n        this.outstandingGets_.push(outstandingGet);\r\n        this.outstandingGetCount_++;\r\n        const index = this.outstandingGets_.length - 1;\r\n        if (!this.connected_) {\r\n            setTimeout(() => {\r\n                const get = this.outstandingGets_[index];\r\n                if (get === undefined || outstandingGet !== get) {\r\n                    return;\r\n                }\r\n                delete this.outstandingGets_[index];\r\n                this.outstandingGetCount_--;\r\n                if (this.outstandingGetCount_ === 0) {\r\n                    this.outstandingGets_ = [];\r\n                }\r\n                this.log_('get ' + index + ' timed out on connection');\r\n                deferred.reject(new Error('Client is offline.'));\r\n            }, GET_CONNECT_TIMEOUT);\r\n        }\r\n        if (this.connected_) {\r\n            this.sendGet_(index);\r\n        }\r\n        return deferred.promise;\r\n    }\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        this.initConnection_();\r\n        const queryId = query._queryIdentifier;\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\r\n        if (!this.listens.has(pathString)) {\r\n            this.listens.set(pathString, new Map());\r\n        }\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\r\n        assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\r\n        const listenSpec = {\r\n            onComplete,\r\n            hashFn: currentHashFn,\r\n            query,\r\n            tag\r\n        };\r\n        this.listens.get(pathString).set(queryId, listenSpec);\r\n        if (this.connected_) {\r\n            this.sendListen_(listenSpec);\r\n        }\r\n    }\r\n    sendGet_(index) {\r\n        const get = this.outstandingGets_[index];\r\n        this.sendRequest('g', get.request, (message) => {\r\n            delete this.outstandingGets_[index];\r\n            this.outstandingGetCount_--;\r\n            if (this.outstandingGetCount_ === 0) {\r\n                this.outstandingGets_ = [];\r\n            }\r\n            if (get.onComplete) {\r\n                get.onComplete(message);\r\n            }\r\n        });\r\n    }\r\n    sendListen_(listenSpec) {\r\n        const query = listenSpec.query;\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'q';\r\n        // Only bother to send query if it's non-default.\r\n        if (listenSpec.tag) {\r\n            req['q'] = query._queryObject;\r\n            req['t'] = listenSpec.tag;\r\n        }\r\n        req[ /*hash*/'h'] = listenSpec.hashFn();\r\n        this.sendRequest(action, req, (message) => {\r\n            const payload = message[ /*data*/'d'];\r\n            const status = message[ /*status*/'s'];\r\n            // print warnings in any case...\r\n            PersistentConnection.warnOnListenWarnings_(payload, query);\r\n            const currentListenSpec = this.listens.get(pathString) &&\r\n                this.listens.get(pathString).get(queryId);\r\n            // only trigger actions if the listen hasn't been removed and readded\r\n            if (currentListenSpec === listenSpec) {\r\n                this.log_('listen response', message);\r\n                if (status !== 'ok') {\r\n                    this.removeListen_(pathString, queryId);\r\n                }\r\n                if (listenSpec.onComplete) {\r\n                    listenSpec.onComplete(status, payload);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static warnOnListenWarnings_(payload, query) {\r\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const warnings = safeGet(payload, 'w');\r\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\r\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\r\n                const indexPath = query._path.toString();\r\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\r\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\r\n                    `${indexPath} to your security rules for better performance.`);\r\n            }\r\n        }\r\n    }\r\n    refreshAuthToken(token) {\r\n        this.authToken_ = token;\r\n        this.log_('Auth token refreshed');\r\n        if (this.authToken_) {\r\n            this.tryAuth();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\r\n            //the credential so we dont become authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unauth', {}, () => { });\r\n            }\r\n        }\r\n        this.reduceReconnectDelayIfAdminCredential_(token);\r\n    }\r\n    reduceReconnectDelayIfAdminCredential_(credential) {\r\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\r\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\r\n        const isFirebaseSecret = credential && credential.length === 40;\r\n        if (isFirebaseSecret || isAdmin(credential)) {\r\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\r\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n        }\r\n    }\r\n    refreshAppCheckToken(token) {\r\n        this.appCheckToken_ = token;\r\n        this.log_('App check token refreshed');\r\n        if (this.appCheckToken_) {\r\n            this.tryAppCheck();\r\n        }\r\n        else {\r\n            //If we're connected we want to let the server know to unauthenticate us.\r\n            //If we're not connected, simply delete the credential so we dont become\r\n            // authenticated next time we connect.\r\n            if (this.connected_) {\r\n                this.sendRequest('unappeck', {}, () => { });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n     * a auth revoked (the connection is closed).\r\n     */\r\n    tryAuth() {\r\n        if (this.connected_ && this.authToken_) {\r\n            const token = this.authToken_;\r\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\r\n            const requestData = { cred: token };\r\n            if (this.authOverride_ === null) {\r\n                requestData['noauth'] = true;\r\n            }\r\n            else if (typeof this.authOverride_ === 'object') {\r\n                requestData['authvar'] = this.authOverride_;\r\n            }\r\n            this.sendRequest(authMethod, requestData, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (this.authToken_ === token) {\r\n                    if (status === 'ok') {\r\n                        this.invalidAuthTokenCount_ = 0;\r\n                    }\r\n                    else {\r\n                        // Triggers reconnect and force refresh for auth token\r\n                        this.onAuthRevoked_(status, data);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to authenticate with the given token. If the authentication\r\n     * attempt fails, it's triggered like the token was revoked (the connection is\r\n     * closed).\r\n     */\r\n    tryAppCheck() {\r\n        if (this.connected_ && this.appCheckToken_) {\r\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\r\n                const status = res[ /*status*/'s'];\r\n                const data = res[ /*data*/'d'] || 'error';\r\n                if (status === 'ok') {\r\n                    this.invalidAppCheckTokenCount_ = 0;\r\n                }\r\n                else {\r\n                    this.onAppCheckRevoked_(status, data);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    unlisten(query, tag) {\r\n        const pathString = query._path.toString();\r\n        const queryId = query._queryIdentifier;\r\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\r\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && this.connected_) {\r\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\r\n        }\r\n    }\r\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\r\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\r\n        const req = { /*path*/ p: pathString };\r\n        const action = 'n';\r\n        // Only bother sending queryId if it's non-default.\r\n        if (tag) {\r\n            req['q'] = queryObj;\r\n            req['t'] = tag;\r\n        }\r\n        this.sendRequest(action, req);\r\n    }\r\n    onDisconnectPut(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'o',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectMerge(pathString, data, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'om',\r\n                data,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    onDisconnectCancel(pathString, onComplete) {\r\n        this.initConnection_();\r\n        if (this.connected_) {\r\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\r\n        }\r\n        else {\r\n            this.onDisconnectRequestQueue_.push({\r\n                pathString,\r\n                action: 'oc',\r\n                data: null,\r\n                onComplete\r\n            });\r\n        }\r\n    }\r\n    sendOnDisconnect_(action, pathString, data, onComplete) {\r\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\r\n        this.log_('onDisconnect ' + action, request);\r\n        this.sendRequest(action, request, (response) => {\r\n            if (onComplete) {\r\n                setTimeout(() => {\r\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\r\n                }, Math.floor(0));\r\n            }\r\n        });\r\n    }\r\n    put(pathString, data, onComplete, hash) {\r\n        this.putInternal('p', pathString, data, onComplete, hash);\r\n    }\r\n    merge(pathString, data, onComplete, hash) {\r\n        this.putInternal('m', pathString, data, onComplete, hash);\r\n    }\r\n    putInternal(action, pathString, data, onComplete, hash) {\r\n        this.initConnection_();\r\n        const request = {\r\n            /*path*/ p: pathString,\r\n            /*data*/ d: data\r\n        };\r\n        if (hash !== undefined) {\r\n            request[ /*hash*/'h'] = hash;\r\n        }\r\n        // TODO: Only keep track of the most recent put for a given path?\r\n        this.outstandingPuts_.push({\r\n            action,\r\n            request,\r\n            onComplete\r\n        });\r\n        this.outstandingPutCount_++;\r\n        const index = this.outstandingPuts_.length - 1;\r\n        if (this.connected_) {\r\n            this.sendPut_(index);\r\n        }\r\n        else {\r\n            this.log_('Buffering put: ' + pathString);\r\n        }\r\n    }\r\n    sendPut_(index) {\r\n        const action = this.outstandingPuts_[index].action;\r\n        const request = this.outstandingPuts_[index].request;\r\n        const onComplete = this.outstandingPuts_[index].onComplete;\r\n        this.outstandingPuts_[index].queued = this.connected_;\r\n        this.sendRequest(action, request, (message) => {\r\n            this.log_(action + ' response', message);\r\n            delete this.outstandingPuts_[index];\r\n            this.outstandingPutCount_--;\r\n            // Clean up array occasionally.\r\n            if (this.outstandingPutCount_ === 0) {\r\n                this.outstandingPuts_ = [];\r\n            }\r\n            if (onComplete) {\r\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\r\n            }\r\n        });\r\n    }\r\n    reportStats(stats) {\r\n        // If we're not connected, we just drop the stats.\r\n        if (this.connected_) {\r\n            const request = { /*counters*/ c: stats };\r\n            this.log_('reportStats', request);\r\n            this.sendRequest(/*stats*/ 's', request, result => {\r\n                const status = result[ /*status*/'s'];\r\n                if (status !== 'ok') {\r\n                    const errorReason = result[ /* data */'d'];\r\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    onDataMessage_(message) {\r\n        if ('r' in message) {\r\n            // this is a response\r\n            this.log_('from server: ' + stringify(message));\r\n            const reqNum = message['r'];\r\n            const onResponse = this.requestCBHash_[reqNum];\r\n            if (onResponse) {\r\n                delete this.requestCBHash_[reqNum];\r\n                onResponse(message[ /*body*/'b']);\r\n            }\r\n        }\r\n        else if ('error' in message) {\r\n            throw 'A server-side error has occurred: ' + message['error'];\r\n        }\r\n        else if ('a' in message) {\r\n            // a and b are action and body, respectively\r\n            this.onDataPush_(message['a'], message['b']);\r\n        }\r\n    }\r\n    onDataPush_(action, body) {\r\n        this.log_('handleServerMessage', action, body);\r\n        if (action === 'd') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge*/ false, body['t']);\r\n        }\r\n        else if (action === 'm') {\r\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \r\n            /*isMerge=*/ true, body['t']);\r\n        }\r\n        else if (action === 'c') {\r\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\r\n        }\r\n        else if (action === 'ac') {\r\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'apc') {\r\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\r\n        }\r\n        else if (action === 'sd') {\r\n            this.onSecurityDebugPacket_(body);\r\n        }\r\n        else {\r\n            error('Unrecognized action received from server: ' +\r\n                stringify(action) +\r\n                '\\nAre you using the latest client?');\r\n        }\r\n    }\r\n    onReady_(timestamp, sessionId) {\r\n        this.log_('connection ready');\r\n        this.connected_ = true;\r\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\r\n        this.handleTimestamp_(timestamp);\r\n        this.lastSessionId = sessionId;\r\n        if (this.firstConnection_) {\r\n            this.sendConnectStats_();\r\n        }\r\n        this.restoreState_();\r\n        this.firstConnection_ = false;\r\n        this.onConnectStatus_(true);\r\n    }\r\n    scheduleConnect_(timeout) {\r\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\r\n        if (this.establishConnectionTimer_) {\r\n            clearTimeout(this.establishConnectionTimer_);\r\n        }\r\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\r\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\r\n        this.establishConnectionTimer_ = setTimeout(() => {\r\n            this.establishConnectionTimer_ = null;\r\n            this.establishConnection_();\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }, Math.floor(timeout));\r\n    }\r\n    initConnection_() {\r\n        if (!this.realtime_ && this.firstConnection_) {\r\n            this.scheduleConnect_(0);\r\n        }\r\n    }\r\n    onVisible_(visible) {\r\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\r\n        if (visible &&\r\n            !this.visible_ &&\r\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\r\n            this.log_('Window became visible.  Reducing delay.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        this.visible_ = visible;\r\n    }\r\n    onOnline_(online) {\r\n        if (online) {\r\n            this.log_('Browser went online.');\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n        else {\r\n            this.log_('Browser went offline.  Killing connection.');\r\n            if (this.realtime_) {\r\n                this.realtime_.close();\r\n            }\r\n        }\r\n    }\r\n    onRealtimeDisconnect_() {\r\n        this.log_('data client disconnected');\r\n        this.connected_ = false;\r\n        this.realtime_ = null;\r\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\r\n        this.cancelSentTransactions_();\r\n        // Clear out the pending requests.\r\n        this.requestCBHash_ = {};\r\n        if (this.shouldReconnect_()) {\r\n            if (!this.visible_) {\r\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\r\n                this.reconnectDelay_ = this.maxReconnectDelay_;\r\n                this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            }\r\n            else if (this.lastConnectionEstablishedTime_) {\r\n                // If we've been connected long enough, reset reconnect delay to minimum.\r\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\r\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\r\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n                }\r\n                this.lastConnectionEstablishedTime_ = null;\r\n            }\r\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\r\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\r\n            reconnectDelay = Math.random() * reconnectDelay;\r\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\r\n            this.scheduleConnect_(reconnectDelay);\r\n            // Adjust reconnect delay for next time.\r\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\r\n        }\r\n        this.onConnectStatus_(false);\r\n    }\r\n    async establishConnection_() {\r\n        if (this.shouldReconnect_()) {\r\n            this.log_('Making a connection attempt');\r\n            this.lastConnectionAttemptTime_ = new Date().getTime();\r\n            this.lastConnectionEstablishedTime_ = null;\r\n            const onDataMessage = this.onDataMessage_.bind(this);\r\n            const onReady = this.onReady_.bind(this);\r\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\r\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\r\n            const lastSessionId = this.lastSessionId;\r\n            let canceled = false;\r\n            let connection = null;\r\n            const closeFn = function () {\r\n                if (connection) {\r\n                    connection.close();\r\n                }\r\n                else {\r\n                    canceled = true;\r\n                    onDisconnect();\r\n                }\r\n            };\r\n            const sendRequestFn = function (msg) {\r\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\r\n                connection.sendRequest(msg);\r\n            };\r\n            this.realtime_ = {\r\n                close: closeFn,\r\n                sendRequest: sendRequestFn\r\n            };\r\n            const forceRefresh = this.forceTokenRefresh_;\r\n            this.forceTokenRefresh_ = false;\r\n            try {\r\n                // First fetch auth and app check token, and establish connection after\r\n                // fetching the token was successful\r\n                const [authToken, appCheckToken] = await Promise.all([\r\n                    this.authTokenProvider_.getToken(forceRefresh),\r\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\r\n                ]);\r\n                if (!canceled) {\r\n                    log('getToken() completed. Creating connection.');\r\n                    this.authToken_ = authToken && authToken.accessToken;\r\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\r\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \r\n                    /* onKill= */ reason => {\r\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\r\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\r\n                    }, lastSessionId);\r\n                }\r\n                else {\r\n                    log('getToken() completed but was canceled');\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.log_('Failed to get token: ' + error);\r\n                if (!canceled) {\r\n                    if (this.repoInfo_.nodeAdmin) {\r\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\r\n                        // But getToken() may also just have temporarily failed, so we still want to\r\n                        // continue retrying.\r\n                        warn(error);\r\n                    }\r\n                    closeFn();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    interrupt(reason) {\r\n        log('Interrupting connection for reason: ' + reason);\r\n        this.interruptReasons_[reason] = true;\r\n        if (this.realtime_) {\r\n            this.realtime_.close();\r\n        }\r\n        else {\r\n            if (this.establishConnectionTimer_) {\r\n                clearTimeout(this.establishConnectionTimer_);\r\n                this.establishConnectionTimer_ = null;\r\n            }\r\n            if (this.connected_) {\r\n                this.onRealtimeDisconnect_();\r\n            }\r\n        }\r\n    }\r\n    resume(reason) {\r\n        log('Resuming connection for reason: ' + reason);\r\n        delete this.interruptReasons_[reason];\r\n        if (isEmpty(this.interruptReasons_)) {\r\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\r\n            if (!this.realtime_) {\r\n                this.scheduleConnect_(0);\r\n            }\r\n        }\r\n    }\r\n    handleTimestamp_(timestamp) {\r\n        const delta = timestamp - new Date().getTime();\r\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\r\n    }\r\n    cancelSentTransactions_() {\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            const put = this.outstandingPuts_[i];\r\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\r\n                if (put.onComplete) {\r\n                    put.onComplete('disconnect');\r\n                }\r\n                delete this.outstandingPuts_[i];\r\n                this.outstandingPutCount_--;\r\n            }\r\n        }\r\n        // Clean up array occasionally.\r\n        if (this.outstandingPutCount_ === 0) {\r\n            this.outstandingPuts_ = [];\r\n        }\r\n    }\r\n    onListenRevoked_(pathString, query) {\r\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\r\n        let queryId;\r\n        if (!query) {\r\n            queryId = 'default';\r\n        }\r\n        else {\r\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\r\n        }\r\n        const listen = this.removeListen_(pathString, queryId);\r\n        if (listen && listen.onComplete) {\r\n            listen.onComplete('permission_denied');\r\n        }\r\n    }\r\n    removeListen_(pathString, queryId) {\r\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\r\n        let listen;\r\n        if (this.listens.has(normalizedPathString)) {\r\n            const map = this.listens.get(normalizedPathString);\r\n            listen = map.get(queryId);\r\n            map.delete(queryId);\r\n            if (map.size === 0) {\r\n                this.listens.delete(normalizedPathString);\r\n            }\r\n        }\r\n        else {\r\n            // all listens for this path has already been removed\r\n            listen = undefined;\r\n        }\r\n        return listen;\r\n    }\r\n    onAuthRevoked_(statusCode, explanation) {\r\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\r\n        this.authToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        this.realtime_.close();\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAuthTokenCount_++;\r\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                // Set a long reconnect delay because recovery is unlikely\r\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\r\n                // Notify the auth token provider that the token is invalid, which will log\r\n                // a warning\r\n                this.authTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onAppCheckRevoked_(statusCode, explanation) {\r\n        log('App check token revoked: ' + statusCode + '/' + explanation);\r\n        this.appCheckToken_ = null;\r\n        this.forceTokenRefresh_ = true;\r\n        // Note: We don't close the connection as the developer may not have\r\n        // enforcement enabled. The backend closes connections with enforcements.\r\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\r\n            // We'll wait a couple times before logging the warning / increasing the\r\n            // retry period since oauth tokens will report as \"invalid\" if they're\r\n            // just expired. Plus there may be transient issues that resolve themselves.\r\n            this.invalidAppCheckTokenCount_++;\r\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\r\n                this.appCheckTokenProvider_.notifyForInvalidToken();\r\n            }\r\n        }\r\n    }\r\n    onSecurityDebugPacket_(body) {\r\n        if (this.securityDebugCallback_) {\r\n            this.securityDebugCallback_(body);\r\n        }\r\n        else {\r\n            if ('msg' in body) {\r\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\r\n            }\r\n        }\r\n    }\r\n    restoreState_() {\r\n        //Re-authenticate ourselves if we have a credential stored.\r\n        this.tryAuth();\r\n        this.tryAppCheck();\r\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\r\n        // make sure to send listens before puts.\r\n        for (const queries of this.listens.values()) {\r\n            for (const listenSpec of queries.values()) {\r\n                this.sendListen_(listenSpec);\r\n            }\r\n        }\r\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\r\n            if (this.outstandingPuts_[i]) {\r\n                this.sendPut_(i);\r\n            }\r\n        }\r\n        while (this.onDisconnectRequestQueue_.length) {\r\n            const request = this.onDisconnectRequestQueue_.shift();\r\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\r\n        }\r\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\r\n            if (this.outstandingGets_[i]) {\r\n                this.sendGet_(i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sends client stats for first connection\r\n     */\r\n    sendConnectStats_() {\r\n        const stats = {};\r\n        let clientName = 'js';\r\n        if (isNodeSdk()) {\r\n            if (this.repoInfo_.nodeAdmin) {\r\n                clientName = 'admin_node';\r\n            }\r\n            else {\r\n                clientName = 'node';\r\n            }\r\n        }\r\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\r\n        if (isMobileCordova()) {\r\n            stats['framework.cordova'] = 1;\r\n        }\r\n        else if (isReactNative()) {\r\n            stats['framework.reactnative'] = 1;\r\n        }\r\n        this.reportStats(stats);\r\n    }\r\n    shouldReconnect_() {\r\n        const online = OnlineMonitor.getInstance().currentlyOnline();\r\n        return isEmpty(this.interruptReasons_) && online;\r\n    }\r\n}\r\nPersistentConnection.nextPersistentConnectionId_ = 0;\r\n/**\r\n * Counter for number of connections created. Mainly used for tagging in the logs\r\n */\r\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass NamedNode {\r\n    constructor(name, node) {\r\n        this.name = name;\r\n        this.node = node;\r\n    }\r\n    static Wrap(name, node) {\r\n        return new NamedNode(name, node);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Index {\r\n    /**\r\n     * @returns A standalone comparison function for\r\n     * this index\r\n     */\r\n    getCompare() {\r\n        return this.compare.bind(this);\r\n    }\r\n    /**\r\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n     *\r\n     *\r\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n     */\r\n    indexedValueChanged(oldNode, newNode) {\r\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\r\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\r\n        return this.compare(oldWrapped, newWrapped) !== 0;\r\n    }\r\n    /**\r\n     * @returns a node wrapper that will sort equal to or less than\r\n     * any other node wrapper, using this index\r\n     */\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __EMPTY_NODE;\r\nclass KeyIndex extends Index {\r\n    static get __EMPTY_NODE() {\r\n        return __EMPTY_NODE;\r\n    }\r\n    static set __EMPTY_NODE(val) {\r\n        __EMPTY_NODE = val;\r\n    }\r\n    compare(a, b) {\r\n        return nameCompare(a.name, b.name);\r\n    }\r\n    isDefinedOn(node) {\r\n        // We could probably return true here (since every node has a key), but it's never called\r\n        // so just leaving unimplemented for now.\r\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return false; // The key for a node never changes.\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // TODO: This should really be created once and cached in a static property, but\r\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\r\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\r\n    }\r\n    makePost(indexValue, name) {\r\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\r\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\r\n        return new NamedNode(indexValue, __EMPTY_NODE);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.key';\r\n    }\r\n}\r\nconst KEY_INDEX = new KeyIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An iterator over an LLRBNode.\r\n */\r\nclass SortedMapIterator {\r\n    /**\r\n     * @param node - Node to iterate.\r\n     * @param isReverse_ - Whether or not to iterate in reverse\r\n     */\r\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\r\n        this.isReverse_ = isReverse_;\r\n        this.resultGenerator_ = resultGenerator_;\r\n        this.nodeStack_ = [];\r\n        let cmp = 1;\r\n        while (!node.isEmpty()) {\r\n            node = node;\r\n            cmp = startKey ? comparator(node.key, startKey) : 1;\r\n            // flip the comparison if we're going in reverse\r\n            if (isReverse_) {\r\n                cmp *= -1;\r\n            }\r\n            if (cmp < 0) {\r\n                // This node is less than our start key. ignore it\r\n                if (this.isReverse_) {\r\n                    node = node.left;\r\n                }\r\n                else {\r\n                    node = node.right;\r\n                }\r\n            }\r\n            else if (cmp === 0) {\r\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\r\n                this.nodeStack_.push(node);\r\n                break;\r\n            }\r\n            else {\r\n                // This node is greater than our start key, add it to the stack and move to the next one\r\n                this.nodeStack_.push(node);\r\n                if (this.isReverse_) {\r\n                    node = node.right;\r\n                }\r\n                else {\r\n                    node = node.left;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getNext() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        let node = this.nodeStack_.pop();\r\n        let result;\r\n        if (this.resultGenerator_) {\r\n            result = this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            result = { key: node.key, value: node.value };\r\n        }\r\n        if (this.isReverse_) {\r\n            node = node.left;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.right;\r\n            }\r\n        }\r\n        else {\r\n            node = node.right;\r\n            while (!node.isEmpty()) {\r\n                this.nodeStack_.push(node);\r\n                node = node.left;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNext() {\r\n        return this.nodeStack_.length > 0;\r\n    }\r\n    peek() {\r\n        if (this.nodeStack_.length === 0) {\r\n            return null;\r\n        }\r\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\r\n        if (this.resultGenerator_) {\r\n            return this.resultGenerator_(node.key, node.value);\r\n        }\r\n        else {\r\n            return { key: node.key, value: node.value };\r\n        }\r\n    }\r\n}\r\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\r\nclass LLRBNode {\r\n    /**\r\n     * @param key - Key associated with this node.\r\n     * @param value - Value associated with this node.\r\n     * @param color - Whether this node is red.\r\n     * @param left - Left child.\r\n     * @param right - Right child.\r\n     */\r\n    constructor(key, value, color, left, right) {\r\n        this.key = key;\r\n        this.value = value;\r\n        this.color = color != null ? color : LLRBNode.RED;\r\n        this.left =\r\n            left != null ? left : SortedMap.EMPTY_NODE;\r\n        this.right =\r\n            right != null ? right : SortedMap.EMPTY_NODE;\r\n    }\r\n    /**\r\n     * Returns a copy of the current node, optionally replacing pieces of it.\r\n     *\r\n     * @param key - New key for the node, or null.\r\n     * @param value - New value for the node, or null.\r\n     * @param color - New color for the node, or null.\r\n     * @param left - New left child for the node, or null.\r\n     * @param right - New right child for the node, or null.\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return this.left.count() + 1 + this.right.count();\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     *   node.  If it returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return (this.left.inorderTraversal(action) ||\r\n            !!action(this.key, this.value) ||\r\n            this.right.inorderTraversal(action));\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return (this.right.reverseTraversal(action) ||\r\n            action(this.key, this.value) ||\r\n            this.left.reverseTraversal(action));\r\n    }\r\n    /**\r\n     * @returns The minimum node in the tree.\r\n     */\r\n    min_() {\r\n        if (this.left.isEmpty()) {\r\n            return this;\r\n        }\r\n        else {\r\n            return this.left.min_();\r\n        }\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    minKey() {\r\n        return this.min_().key;\r\n    }\r\n    /**\r\n     * @returns The maximum key in the tree.\r\n     */\r\n    maxKey() {\r\n        if (this.right.isEmpty()) {\r\n            return this.key;\r\n        }\r\n        else {\r\n            return this.right.maxKey();\r\n        }\r\n    }\r\n    /**\r\n     * @param key - Key to insert.\r\n     * @param value - Value to insert.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the key/value added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        let n = this;\r\n        const cmp = comparator(key, n.key);\r\n        if (cmp < 0) {\r\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\r\n        }\r\n        else if (cmp === 0) {\r\n            n = n.copy(null, value, null, null, null);\r\n        }\r\n        else {\r\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns New tree, with the minimum key removed.\r\n     */\r\n    removeMin_() {\r\n        if (this.left.isEmpty()) {\r\n            return SortedMap.EMPTY_NODE;\r\n        }\r\n        let n = this;\r\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\r\n            n = n.moveRedLeft_();\r\n        }\r\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @param key - The key of the item to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with the specified item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        let n, smallest;\r\n        n = this;\r\n        if (comparator(key, n.key) < 0) {\r\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\r\n                n = n.moveRedLeft_();\r\n            }\r\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\r\n        }\r\n        else {\r\n            if (n.left.isRed_()) {\r\n                n = n.rotateRight_();\r\n            }\r\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\r\n                n = n.moveRedRight_();\r\n            }\r\n            if (comparator(key, n.key) === 0) {\r\n                if (n.right.isEmpty()) {\r\n                    return SortedMap.EMPTY_NODE;\r\n                }\r\n                else {\r\n                    smallest = n.right.min_();\r\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\r\n                }\r\n            }\r\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\r\n        }\r\n        return n.fixUp_();\r\n    }\r\n    /**\r\n     * @returns Whether this is a RED node.\r\n     */\r\n    isRed_() {\r\n        return this.color;\r\n    }\r\n    /**\r\n     * @returns New tree after performing any needed rotations.\r\n     */\r\n    fixUp_() {\r\n        let n = this;\r\n        if (n.right.isRed_() && !n.left.isRed_()) {\r\n            n = n.rotateLeft_();\r\n        }\r\n        if (n.left.isRed_() && n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n        }\r\n        if (n.left.isRed_() && n.right.isRed_()) {\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedLeft.\r\n     */\r\n    moveRedLeft_() {\r\n        let n = this.colorFlip_();\r\n        if (n.right.left.isRed_()) {\r\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\r\n            n = n.rotateLeft_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after moveRedRight.\r\n     */\r\n    moveRedRight_() {\r\n        let n = this.colorFlip_();\r\n        if (n.left.left.isRed_()) {\r\n            n = n.rotateRight_();\r\n            n = n.colorFlip_();\r\n        }\r\n        return n;\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateLeft.\r\n     */\r\n    rotateLeft_() {\r\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\r\n        return this.right.copy(null, null, this.color, nl, null);\r\n    }\r\n    /**\r\n     * @returns New tree, after rotateRight.\r\n     */\r\n    rotateRight_() {\r\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\r\n        return this.left.copy(null, null, this.color, null, nr);\r\n    }\r\n    /**\r\n     * @returns Newt ree, after colorFlip.\r\n     */\r\n    colorFlip_() {\r\n        const left = this.left.copy(null, null, !this.left.color, null, null);\r\n        const right = this.right.copy(null, null, !this.right.color, null, null);\r\n        return this.copy(null, null, !this.color, left, right);\r\n    }\r\n    /**\r\n     * For testing.\r\n     *\r\n     * @returns True if all is well.\r\n     */\r\n    checkMaxDepth_() {\r\n        const blackDepth = this.check_();\r\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\r\n    }\r\n    check_() {\r\n        if (this.isRed_() && this.left.isRed_()) {\r\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\r\n        }\r\n        if (this.right.isRed_()) {\r\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\r\n        }\r\n        const blackDepth = this.left.check_();\r\n        if (blackDepth !== this.right.check_()) {\r\n            throw new Error('Black depths differ');\r\n        }\r\n        else {\r\n            return blackDepth + (this.isRed_() ? 0 : 1);\r\n        }\r\n    }\r\n}\r\nLLRBNode.RED = true;\r\nLLRBNode.BLACK = false;\r\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\r\nclass LLRBEmptyNode {\r\n    /**\r\n     * Returns a copy of the current node.\r\n     *\r\n     * @returns The node copy.\r\n     */\r\n    copy(key, value, color, left, right) {\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key/value added.\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item added.\r\n     */\r\n    insert(key, value, comparator) {\r\n        return new LLRBNode(key, value, null);\r\n    }\r\n    /**\r\n     * Returns a copy of the tree, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @param comparator - Comparator.\r\n     * @returns New tree, with item removed.\r\n     */\r\n    remove(key, comparator) {\r\n        return this;\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the tree.\r\n     */\r\n    count() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns True if the tree is empty.\r\n     */\r\n    isEmpty() {\r\n        return true;\r\n    }\r\n    /**\r\n     * Traverses the tree in key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    inorderTraversal(action) {\r\n        return false;\r\n    }\r\n    /**\r\n     * Traverses the tree in reverse key order and calls the specified action function\r\n     * for each node.\r\n     *\r\n     * @param action - Callback function to be called for each\r\n     * node.  If it returns true, traversal is aborted.\r\n     * @returns True if traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return false;\r\n    }\r\n    minKey() {\r\n        return null;\r\n    }\r\n    maxKey() {\r\n        return null;\r\n    }\r\n    check_() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @returns Whether this node is red.\r\n     */\r\n    isRed_() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\r\nclass SortedMap {\r\n    /**\r\n     * @param comparator_ - Key comparator.\r\n     * @param root_ - Optional root node for the map.\r\n     */\r\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\r\n        this.comparator_ = comparator_;\r\n        this.root_ = root_;\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key/value added or replaced.\r\n     * (TODO: We should perhaps rename this method to 'put')\r\n     *\r\n     * @param key - Key to be added.\r\n     * @param value - Value to be added.\r\n     * @returns New map, with item added.\r\n     */\r\n    insert(key, value) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .insert(key, value, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns a copy of the map, with the specified key removed.\r\n     *\r\n     * @param key - The key to remove.\r\n     * @returns New map, with item removed.\r\n     */\r\n    remove(key) {\r\n        return new SortedMap(this.comparator_, this.root_\r\n            .remove(key, this.comparator_)\r\n            .copy(null, null, LLRBNode.BLACK, null, null));\r\n    }\r\n    /**\r\n     * Returns the value of the node with the given key, or null.\r\n     *\r\n     * @param key - The key to look up.\r\n     * @returns The value of the node with the given key, or null if the\r\n     * key doesn't exist.\r\n     */\r\n    get(key) {\r\n        let cmp;\r\n        let node = this.root_;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                return node.value;\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                node = node.right;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n     * @param key - The key to find the predecessor of\r\n     * @returns The predecessor key.\r\n     */\r\n    getPredecessorKey(key) {\r\n        let cmp, node = this.root_, rightParent = null;\r\n        while (!node.isEmpty()) {\r\n            cmp = this.comparator_(key, node.key);\r\n            if (cmp === 0) {\r\n                if (!node.left.isEmpty()) {\r\n                    node = node.left;\r\n                    while (!node.right.isEmpty()) {\r\n                        node = node.right;\r\n                    }\r\n                    return node.key;\r\n                }\r\n                else if (rightParent) {\r\n                    return rightParent.key;\r\n                }\r\n                else {\r\n                    return null; // first item.\r\n                }\r\n            }\r\n            else if (cmp < 0) {\r\n                node = node.left;\r\n            }\r\n            else if (cmp > 0) {\r\n                rightParent = node;\r\n                node = node.right;\r\n            }\r\n        }\r\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\r\n    }\r\n    /**\r\n     * @returns True if the map is empty.\r\n     */\r\n    isEmpty() {\r\n        return this.root_.isEmpty();\r\n    }\r\n    /**\r\n     * @returns The total number of nodes in the map.\r\n     */\r\n    count() {\r\n        return this.root_.count();\r\n    }\r\n    /**\r\n     * @returns The minimum key in the map.\r\n     */\r\n    minKey() {\r\n        return this.root_.minKey();\r\n    }\r\n    /**\r\n     * @returns The maximum key in the map.\r\n     */\r\n    maxKey() {\r\n        return this.root_.maxKey();\r\n    }\r\n    /**\r\n     * Traverses the map in key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns The first truthy value returned by action, or the last falsey\r\n     *   value returned by action\r\n     */\r\n    inorderTraversal(action) {\r\n        return this.root_.inorderTraversal(action);\r\n    }\r\n    /**\r\n     * Traverses the map in reverse key order and calls the specified action function\r\n     * for each key/value pair.\r\n     *\r\n     * @param action - Callback function to be called\r\n     * for each key/value pair.  If action returns true, traversal is aborted.\r\n     * @returns True if the traversal was aborted.\r\n     */\r\n    reverseTraversal(action) {\r\n        return this.root_.reverseTraversal(action);\r\n    }\r\n    /**\r\n     * Returns an iterator over the SortedMap.\r\n     * @returns The iterator.\r\n     */\r\n    getIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\r\n    }\r\n    getIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\r\n    }\r\n    getReverseIteratorFrom(key, resultGenerator) {\r\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\r\n    }\r\n    getReverseIterator(resultGenerator) {\r\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\r\n    }\r\n}\r\n/**\r\n * Always use the same empty node, to reduce memory.\r\n */\r\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction NAME_ONLY_COMPARATOR(left, right) {\r\n    return nameCompare(left.name, right.name);\r\n}\r\nfunction NAME_COMPARATOR(left, right) {\r\n    return nameCompare(left, right);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet MAX_NODE$2;\r\nfunction setMaxNode$1(val) {\r\n    MAX_NODE$2 = val;\r\n}\r\nconst priorityHashText = function (priority) {\r\n    if (typeof priority === 'number') {\r\n        return 'number:' + doubleToIEEE754String(priority);\r\n    }\r\n    else {\r\n        return 'string:' + priority;\r\n    }\r\n};\r\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n */\r\nconst validatePriorityNode = function (priorityNode) {\r\n    if (priorityNode.isLeafNode()) {\r\n        const val = priorityNode.val();\r\n        assert(typeof val === 'string' ||\r\n            typeof val === 'number' ||\r\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\r\n    }\r\n    else {\r\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\r\n    }\r\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\r\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet __childrenNodeConstructor;\r\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\r\nclass LeafNode {\r\n    /**\r\n     * @param value_ - The value to store in this leaf node. The object type is\r\n     * possible in the event of a deferred value\r\n     * @param priorityNode_ - The priority of this node.\r\n     */\r\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n        this.value_ = value_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.lazyHash_ = null;\r\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\r\n        validatePriorityNode(this.priorityNode_);\r\n    }\r\n    static set __childrenNodeConstructor(val) {\r\n        __childrenNodeConstructor = val;\r\n    }\r\n    static get __childrenNodeConstructor() {\r\n        return __childrenNodeConstructor;\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return true;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        return new LeafNode(this.value_, newPriorityNode);\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this;\r\n        }\r\n        else if (pathGetFront(path) === '.priority') {\r\n            return this.priorityNode_;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\r\n        }\r\n    }\r\n    hasChild() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode) {\r\n        return null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else if (newChildNode.isEmpty() && front !== '.priority') {\r\n            return this;\r\n        }\r\n        else {\r\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return 0;\r\n    }\r\n    /** @inheritDoc */\r\n    forEachChild(index, action) {\r\n        return false;\r\n    }\r\n    val(exportFormat) {\r\n        if (exportFormat && !this.getPriority().isEmpty()) {\r\n            return {\r\n                '.value': this.getValue(),\r\n                '.priority': this.getPriority().val()\r\n            };\r\n        }\r\n        else {\r\n            return this.getValue();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.priorityNode_.isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.priorityNode_.val()) +\r\n                        ':';\r\n            }\r\n            const type = typeof this.value_;\r\n            toHash += type + ':';\r\n            if (type === 'number') {\r\n                toHash += doubleToIEEE754String(this.value_);\r\n            }\r\n            else {\r\n                toHash += this.value_;\r\n            }\r\n            this.lazyHash_ = sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /**\r\n     * Returns the value of the leaf node.\r\n     * @returns The value of the node.\r\n     */\r\n    getValue() {\r\n        return this.value_;\r\n    }\r\n    compareTo(other) {\r\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\r\n            return 1;\r\n        }\r\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\r\n            return -1;\r\n        }\r\n        else {\r\n            assert(other.isLeafNode(), 'Unknown node type');\r\n            return this.compareToLeafNode_(other);\r\n        }\r\n    }\r\n    /**\r\n     * Comparison specifically for two leaf nodes\r\n     */\r\n    compareToLeafNode_(otherLeaf) {\r\n        const otherLeafType = typeof otherLeaf.value_;\r\n        const thisLeafType = typeof this.value_;\r\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\r\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\r\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\r\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\r\n        if (otherIndex === thisIndex) {\r\n            // Same type, compare values\r\n            if (thisLeafType === 'object') {\r\n                // Deferred value nodes are all equal, but we should also never get to this point...\r\n                return 0;\r\n            }\r\n            else {\r\n                // Note that this works because true > false, all others are number or string comparisons\r\n                if (this.value_ < otherLeaf.value_) {\r\n                    return -1;\r\n                }\r\n                else if (this.value_ === otherLeaf.value_) {\r\n                    return 0;\r\n                }\r\n                else {\r\n                    return 1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return thisIndex - otherIndex;\r\n        }\r\n    }\r\n    withIndex() {\r\n        return this;\r\n    }\r\n    isIndexed() {\r\n        return true;\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            const otherLeaf = other;\r\n            return (this.value_ === otherLeaf.value_ &&\r\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n * the same type, the comparison falls back to their value\r\n */\r\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet nodeFromJSON$1;\r\nlet MAX_NODE$1;\r\nfunction setNodeFromJSON(val) {\r\n    nodeFromJSON$1 = val;\r\n}\r\nfunction setMaxNode(val) {\r\n    MAX_NODE$1 = val;\r\n}\r\nclass PriorityIndex extends Index {\r\n    compare(a, b) {\r\n        const aPriority = a.node.getPriority();\r\n        const bPriority = b.node.getPriority();\r\n        const indexCmp = aPriority.compareTo(bPriority);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getPriority().isEmpty();\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.getPriority().equals(newNode.getPriority());\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\r\n    }\r\n    makePost(indexValue, name) {\r\n        const priorityNode = nodeFromJSON$1(indexValue);\r\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.priority';\r\n    }\r\n}\r\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LOG_2 = Math.log(2);\r\nclass Base12Num {\r\n    constructor(length) {\r\n        const logBase2 = (num) => \r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        parseInt((Math.log(num) / LOG_2), 10);\r\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\r\n        this.count = logBase2(length + 1);\r\n        this.current_ = this.count - 1;\r\n        const mask = bitMask(this.count);\r\n        this.bits_ = (length + 1) & mask;\r\n    }\r\n    nextBitIsOne() {\r\n        //noinspection JSBitwiseOperatorUsage\r\n        const result = !(this.bits_ & (0x1 << this.current_));\r\n        this.current_--;\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @param childList - Unsorted list of children\r\n * @param cmp - The comparison method to be used\r\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\r\n * type is not NamedNode\r\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\r\n */\r\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\r\n    childList.sort(cmp);\r\n    const buildBalancedTree = function (low, high) {\r\n        const length = high - low;\r\n        let namedNode;\r\n        let key;\r\n        if (length === 0) {\r\n            return null;\r\n        }\r\n        else if (length === 1) {\r\n            namedNode = childList[low];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            const middle = parseInt((length / 2), 10) + low;\r\n            const left = buildBalancedTree(low, middle);\r\n            const right = buildBalancedTree(middle + 1, high);\r\n            namedNode = childList[middle];\r\n            key = keyFn ? keyFn(namedNode) : namedNode;\r\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\r\n        }\r\n    };\r\n    const buildFrom12Array = function (base12) {\r\n        let node = null;\r\n        let root = null;\r\n        let index = childList.length;\r\n        const buildPennant = function (chunkSize, color) {\r\n            const low = index - chunkSize;\r\n            const high = index;\r\n            index -= chunkSize;\r\n            const childTree = buildBalancedTree(low + 1, high);\r\n            const namedNode = childList[low];\r\n            const key = keyFn ? keyFn(namedNode) : namedNode;\r\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\r\n        };\r\n        const attachPennant = function (pennant) {\r\n            if (node) {\r\n                node.left = pennant;\r\n                node = pennant;\r\n            }\r\n            else {\r\n                root = pennant;\r\n                node = pennant;\r\n            }\r\n        };\r\n        for (let i = 0; i < base12.count; ++i) {\r\n            const isOne = base12.nextBitIsOne();\r\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\r\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\r\n            if (isOne) {\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n            }\r\n            else {\r\n                // current == 2\r\n                buildPennant(chunkSize, LLRBNode.BLACK);\r\n                buildPennant(chunkSize, LLRBNode.RED);\r\n            }\r\n        }\r\n        return root;\r\n    };\r\n    const base12 = new Base12Num(childList.length);\r\n    const root = buildFrom12Array(base12);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    return new SortedMap(mapSortFn || cmp, root);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet _defaultIndexMap;\r\nconst fallbackObject = {};\r\nclass IndexMap {\r\n    constructor(indexes_, indexSet_) {\r\n        this.indexes_ = indexes_;\r\n        this.indexSet_ = indexSet_;\r\n    }\r\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\r\n    static get Default() {\r\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\r\n        _defaultIndexMap =\r\n            _defaultIndexMap ||\r\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\r\n        return _defaultIndexMap;\r\n    }\r\n    get(indexKey) {\r\n        const sortedMap = safeGet(this.indexes_, indexKey);\r\n        if (!sortedMap) {\r\n            throw new Error('No index defined for ' + indexKey);\r\n        }\r\n        if (sortedMap instanceof SortedMap) {\r\n            return sortedMap;\r\n        }\r\n        else {\r\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\r\n            // regular child map\r\n            return null;\r\n        }\r\n    }\r\n    hasIndex(indexDefinition) {\r\n        return contains(this.indexSet_, indexDefinition.toString());\r\n    }\r\n    addIndex(indexDefinition, existingChildren) {\r\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\r\n        const childList = [];\r\n        let sawIndexedValue = false;\r\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n        let next = iter.getNext();\r\n        while (next) {\r\n            sawIndexedValue =\r\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\r\n            childList.push(next);\r\n            next = iter.getNext();\r\n        }\r\n        let newIndex;\r\n        if (sawIndexedValue) {\r\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\r\n        }\r\n        else {\r\n            newIndex = fallbackObject;\r\n        }\r\n        const indexName = indexDefinition.toString();\r\n        const newIndexSet = Object.assign({}, this.indexSet_);\r\n        newIndexSet[indexName] = indexDefinition;\r\n        const newIndexes = Object.assign({}, this.indexes_);\r\n        newIndexes[indexName] = newIndex;\r\n        return new IndexMap(newIndexes, newIndexSet);\r\n    }\r\n    /**\r\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n     */\r\n    addToIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\r\n            const index = safeGet(this.indexSet_, indexName);\r\n            assert(index, 'Missing index implementation for ' + indexName);\r\n            if (indexedChildren === fallbackObject) {\r\n                // Check to see if we need to index everything\r\n                if (index.isDefinedOn(namedNode.node)) {\r\n                    // We need to build this index\r\n                    const childList = [];\r\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\r\n                    let next = iter.getNext();\r\n                    while (next) {\r\n                        if (next.name !== namedNode.name) {\r\n                            childList.push(next);\r\n                        }\r\n                        next = iter.getNext();\r\n                    }\r\n                    childList.push(namedNode);\r\n                    return buildChildSet(childList, index.getCompare());\r\n                }\r\n                else {\r\n                    // No change, this remains a fallback\r\n                    return fallbackObject;\r\n                }\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                let newChildren = indexedChildren;\r\n                if (existingSnap) {\r\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                return newChildren.insert(namedNode, namedNode.node);\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n    /**\r\n     * Create a new IndexMap instance with the given value removed\r\n     */\r\n    removeFromIndexes(namedNode, existingChildren) {\r\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\r\n            if (indexedChildren === fallbackObject) {\r\n                // This is the fallback. Just return it, nothing to do in this case\r\n                return indexedChildren;\r\n            }\r\n            else {\r\n                const existingSnap = existingChildren.get(namedNode.name);\r\n                if (existingSnap) {\r\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\r\n                }\r\n                else {\r\n                    // No record of this child\r\n                    return indexedChildren;\r\n                }\r\n            }\r\n        });\r\n        return new IndexMap(newIndexes, this.indexSet_);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\r\nlet EMPTY_NODE;\r\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n */\r\nclass ChildrenNode {\r\n    /**\r\n     * @param children_ - List of children of this node..\r\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\r\n     */\r\n    constructor(children_, priorityNode_, indexMap_) {\r\n        this.children_ = children_;\r\n        this.priorityNode_ = priorityNode_;\r\n        this.indexMap_ = indexMap_;\r\n        this.lazyHash_ = null;\r\n        /**\r\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n         * class instead of an empty ChildrenNode.\r\n         */\r\n        if (this.priorityNode_) {\r\n            validatePriorityNode(this.priorityNode_);\r\n        }\r\n        if (this.children_.isEmpty()) {\r\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\r\n        }\r\n    }\r\n    static get EMPTY_NODE() {\r\n        return (EMPTY_NODE ||\r\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\r\n    }\r\n    /** @inheritDoc */\r\n    isLeafNode() {\r\n        return false;\r\n    }\r\n    /** @inheritDoc */\r\n    getPriority() {\r\n        return this.priorityNode_ || EMPTY_NODE;\r\n    }\r\n    /** @inheritDoc */\r\n    updatePriority(newPriorityNode) {\r\n        if (this.children_.isEmpty()) {\r\n            // Don't allow priorities on empty nodes\r\n            return this;\r\n        }\r\n        else {\r\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getImmediateChild(childName) {\r\n        // Hack to treat priority as a regular child\r\n        if (childName === '.priority') {\r\n            return this.getPriority();\r\n        }\r\n        else {\r\n            const child = this.children_.get(childName);\r\n            return child === null ? EMPTY_NODE : child;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    getChild(path) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return this;\r\n        }\r\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\r\n    }\r\n    /** @inheritDoc */\r\n    hasChild(childName) {\r\n        return this.children_.get(childName) !== null;\r\n    }\r\n    /** @inheritDoc */\r\n    updateImmediateChild(childName, newChildNode) {\r\n        assert(newChildNode, 'We should always be passing snapshot nodes');\r\n        if (childName === '.priority') {\r\n            return this.updatePriority(newChildNode);\r\n        }\r\n        else {\r\n            const namedNode = new NamedNode(childName, newChildNode);\r\n            let newChildren, newIndexMap;\r\n            if (newChildNode.isEmpty()) {\r\n                newChildren = this.children_.remove(childName);\r\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\r\n            }\r\n            else {\r\n                newChildren = this.children_.insert(childName, newChildNode);\r\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\r\n            }\r\n            const newPriority = newChildren.isEmpty()\r\n                ? EMPTY_NODE\r\n                : this.priorityNode_;\r\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    updateChild(path, newChildNode) {\r\n        const front = pathGetFront(path);\r\n        if (front === null) {\r\n            return newChildNode;\r\n        }\r\n        else {\r\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\r\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\r\n            return this.updateImmediateChild(front, newImmediateChild);\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    isEmpty() {\r\n        return this.children_.isEmpty();\r\n    }\r\n    /** @inheritDoc */\r\n    numChildren() {\r\n        return this.children_.count();\r\n    }\r\n    /** @inheritDoc */\r\n    val(exportFormat) {\r\n        if (this.isEmpty()) {\r\n            return null;\r\n        }\r\n        const obj = {};\r\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\r\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            obj[key] = childNode.val(exportFormat);\r\n            numKeys++;\r\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\r\n                maxKey = Math.max(maxKey, Number(key));\r\n            }\r\n            else {\r\n                allIntegerKeys = false;\r\n            }\r\n        });\r\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\r\n            // convert to array.\r\n            const array = [];\r\n            // eslint-disable-next-line guard-for-in\r\n            for (const key in obj) {\r\n                array[key] = obj[key];\r\n            }\r\n            return array;\r\n        }\r\n        else {\r\n            if (exportFormat && !this.getPriority().isEmpty()) {\r\n                obj['.priority'] = this.getPriority().val();\r\n            }\r\n            return obj;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    hash() {\r\n        if (this.lazyHash_ === null) {\r\n            let toHash = '';\r\n            if (!this.getPriority().isEmpty()) {\r\n                toHash +=\r\n                    'priority:' +\r\n                        priorityHashText(this.getPriority().val()) +\r\n                        ':';\r\n            }\r\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                const childHash = childNode.hash();\r\n                if (childHash !== '') {\r\n                    toHash += ':' + key + ':' + childHash;\r\n                }\r\n            });\r\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\r\n        }\r\n        return this.lazyHash_;\r\n    }\r\n    /** @inheritDoc */\r\n    getPredecessorChildName(childName, childNode, index) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\r\n            return predecessor ? predecessor.name : null;\r\n        }\r\n        else {\r\n            return this.children_.getPredecessorKey(childName);\r\n        }\r\n    }\r\n    getFirstChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const minKey = idx.minKey();\r\n            return minKey && minKey.name;\r\n        }\r\n        else {\r\n            return this.children_.minKey();\r\n        }\r\n    }\r\n    getFirstChild(indexDefinition) {\r\n        const minKey = this.getFirstChildName(indexDefinition);\r\n        if (minKey) {\r\n            return new NamedNode(minKey, this.children_.get(minKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Given an index, return the key name of the largest value we have, according to that index\r\n     */\r\n    getLastChildName(indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            const maxKey = idx.maxKey();\r\n            return maxKey && maxKey.name;\r\n        }\r\n        else {\r\n            return this.children_.maxKey();\r\n        }\r\n    }\r\n    getLastChild(indexDefinition) {\r\n        const maxKey = this.getLastChildName(indexDefinition);\r\n        if (maxKey) {\r\n            return new NamedNode(maxKey, this.children_.get(maxKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    forEachChild(index, action) {\r\n        const idx = this.resolveIndex_(index);\r\n        if (idx) {\r\n            return idx.inorderTraversal(wrappedNode => {\r\n                return action(wrappedNode.name, wrappedNode.node);\r\n            });\r\n        }\r\n        else {\r\n            return this.children_.inorderTraversal(action);\r\n        }\r\n    }\r\n    getIterator(indexDefinition) {\r\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\r\n    }\r\n    getIteratorFrom(startPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getIteratorFrom(startPost, key => key);\r\n        }\r\n        else {\r\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    getReverseIterator(indexDefinition) {\r\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\r\n    }\r\n    getReverseIteratorFrom(endPost, indexDefinition) {\r\n        const idx = this.resolveIndex_(indexDefinition);\r\n        if (idx) {\r\n            return idx.getReverseIteratorFrom(endPost, key => {\r\n                return key;\r\n            });\r\n        }\r\n        else {\r\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\r\n            let next = iterator.peek();\r\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\r\n                iterator.getNext();\r\n                next = iterator.peek();\r\n            }\r\n            return iterator;\r\n        }\r\n    }\r\n    compareTo(other) {\r\n        if (this.isEmpty()) {\r\n            if (other.isEmpty()) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (other.isLeafNode() || other.isEmpty()) {\r\n            return 1;\r\n        }\r\n        else if (other === MAX_NODE) {\r\n            return -1;\r\n        }\r\n        else {\r\n            // Must be another node with children.\r\n            return 0;\r\n        }\r\n    }\r\n    withIndex(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX ||\r\n            this.indexMap_.hasIndex(indexDefinition)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\r\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\r\n        }\r\n    }\r\n    isIndexed(index) {\r\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\r\n    }\r\n    equals(other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        else if (other.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            const otherChildrenNode = other;\r\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\r\n                return false;\r\n            }\r\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\r\n                const thisIter = this.getIterator(PRIORITY_INDEX);\r\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\r\n                let thisCurrent = thisIter.getNext();\r\n                let otherCurrent = otherIter.getNext();\r\n                while (thisCurrent && otherCurrent) {\r\n                    if (thisCurrent.name !== otherCurrent.name ||\r\n                        !thisCurrent.node.equals(otherCurrent.node)) {\r\n                        return false;\r\n                    }\r\n                    thisCurrent = thisIter.getNext();\r\n                    otherCurrent = otherIter.getNext();\r\n                }\r\n                return thisCurrent === null && otherCurrent === null;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n     * instead.\r\n     *\r\n     */\r\n    resolveIndex_(indexDefinition) {\r\n        if (indexDefinition === KEY_INDEX) {\r\n            return null;\r\n        }\r\n        else {\r\n            return this.indexMap_.get(indexDefinition.toString());\r\n        }\r\n    }\r\n}\r\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\r\nclass MaxNode extends ChildrenNode {\r\n    constructor() {\r\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\r\n    }\r\n    compareTo(other) {\r\n        if (other === this) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n    equals(other) {\r\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\r\n        return other === this;\r\n    }\r\n    getPriority() {\r\n        return this;\r\n    }\r\n    getImmediateChild(childName) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    isEmpty() {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n */\r\nconst MAX_NODE = new MaxNode();\r\nObject.defineProperties(NamedNode, {\r\n    MIN: {\r\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\r\n    },\r\n    MAX: {\r\n        value: new NamedNode(MAX_NAME, MAX_NODE)\r\n    }\r\n});\r\n/**\r\n * Reference Extensions\r\n */\r\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\r\nLeafNode.__childrenNodeConstructor = ChildrenNode;\r\nsetMaxNode$1(MAX_NODE);\r\nsetMaxNode(MAX_NODE);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst USE_HINZE = true;\r\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param json - JSON to create a node for.\r\n * @param priority - Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n */\r\nfunction nodeFromJSON(json, priority = null) {\r\n    if (json === null) {\r\n        return ChildrenNode.EMPTY_NODE;\r\n    }\r\n    if (typeof json === 'object' && '.priority' in json) {\r\n        priority = json['.priority'];\r\n    }\r\n    assert(priority === null ||\r\n        typeof priority === 'string' ||\r\n        typeof priority === 'number' ||\r\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\r\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\r\n        json = json['.value'];\r\n    }\r\n    // Valid leaf nodes include non-objects or server-value wrapper objects\r\n    if (typeof json !== 'object' || '.sv' in json) {\r\n        const jsonLeaf = json;\r\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\r\n    }\r\n    if (!(json instanceof Array) && USE_HINZE) {\r\n        const children = [];\r\n        let childrenHavePriority = false;\r\n        const hinzeJsonObj = json;\r\n        each(hinzeJsonObj, (key, child) => {\r\n            if (key.substring(0, 1) !== '.') {\r\n                // Ignore metadata nodes\r\n                const childNode = nodeFromJSON(child);\r\n                if (!childNode.isEmpty()) {\r\n                    childrenHavePriority =\r\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\r\n                    children.push(new NamedNode(key, childNode));\r\n                }\r\n            }\r\n        });\r\n        if (children.length === 0) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\r\n        if (childrenHavePriority) {\r\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\r\n        }\r\n        else {\r\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\r\n        }\r\n    }\r\n    else {\r\n        let node = ChildrenNode.EMPTY_NODE;\r\n        each(json, (key, childData) => {\r\n            if (contains(json, key)) {\r\n                if (key.substring(0, 1) !== '.') {\r\n                    // ignore metadata nodes.\r\n                    const childNode = nodeFromJSON(childData);\r\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\r\n                        node = node.updateImmediateChild(key, childNode);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return node.updatePriority(nodeFromJSON(priority));\r\n    }\r\n}\r\nsetNodeFromJSON(nodeFromJSON);\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PathIndex extends Index {\r\n    constructor(indexPath_) {\r\n        super();\r\n        this.indexPath_ = indexPath_;\r\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\r\n    }\r\n    extractChild(snap) {\r\n        return snap.getChild(this.indexPath_);\r\n    }\r\n    isDefinedOn(node) {\r\n        return !node.getChild(this.indexPath_).isEmpty();\r\n    }\r\n    compare(a, b) {\r\n        const aChild = this.extractChild(a.node);\r\n        const bChild = this.extractChild(b.node);\r\n        const indexCmp = aChild.compareTo(bChild);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\r\n        return new NamedNode(name, node);\r\n    }\r\n    maxPost() {\r\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\r\n        return new NamedNode(MAX_NAME, node);\r\n    }\r\n    toString() {\r\n        return pathSlice(this.indexPath_, 0).join('/');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ValueIndex extends Index {\r\n    compare(a, b) {\r\n        const indexCmp = a.node.compareTo(b.node);\r\n        if (indexCmp === 0) {\r\n            return nameCompare(a.name, b.name);\r\n        }\r\n        else {\r\n            return indexCmp;\r\n        }\r\n    }\r\n    isDefinedOn(node) {\r\n        return true;\r\n    }\r\n    indexedValueChanged(oldNode, newNode) {\r\n        return !oldNode.equals(newNode);\r\n    }\r\n    minPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MIN;\r\n    }\r\n    maxPost() {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return NamedNode.MAX;\r\n    }\r\n    makePost(indexValue, name) {\r\n        const valueNode = nodeFromJSON(indexValue);\r\n        return new NamedNode(name, valueNode);\r\n    }\r\n    /**\r\n     * @returns String representation for inclusion in a query spec\r\n     */\r\n    toString() {\r\n        return '.value';\r\n    }\r\n}\r\nconst VALUE_INDEX = new ValueIndex();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Modeled after base64 web-safe chars, but ordered by ASCII.\r\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\r\nconst MIN_PUSH_CHAR = '-';\r\nconst MAX_PUSH_CHAR = 'z';\r\nconst MAX_KEY_LEN = 786;\r\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\r\nconst nextPushId = (function () {\r\n    // Timestamp of last push, used to prevent local collisions if you push twice\r\n    // in one ms.\r\n    let lastPushTime = 0;\r\n    // We generate 72-bits of randomness which get turned into 12 characters and\r\n    // appended to the timestamp to prevent collisions with other clients. We\r\n    // store the last characters we generated because in the event of a collision,\r\n    // we'll use those same characters except \"incremented\" by one.\r\n    const lastRandChars = [];\r\n    return function (now) {\r\n        const duplicateTime = now === lastPushTime;\r\n        lastPushTime = now;\r\n        let i;\r\n        const timeStampChars = new Array(8);\r\n        for (i = 7; i >= 0; i--) {\r\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\r\n            // NOTE: Can't use << here because javascript will convert to int and lose\r\n            // the upper bits.\r\n            now = Math.floor(now / 64);\r\n        }\r\n        assert(now === 0, 'Cannot push at time == 0');\r\n        let id = timeStampChars.join('');\r\n        if (!duplicateTime) {\r\n            for (i = 0; i < 12; i++) {\r\n                lastRandChars[i] = Math.floor(Math.random() * 64);\r\n            }\r\n        }\r\n        else {\r\n            // If the timestamp hasn't changed since last push, use the same random\r\n            // number, except incremented by 1.\r\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\r\n                lastRandChars[i] = 0;\r\n            }\r\n            lastRandChars[i]++;\r\n        }\r\n        for (i = 0; i < 12; i++) {\r\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\r\n        }\r\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\r\n        return id;\r\n    };\r\n})();\r\nconst successor = function (key) {\r\n    if (key === '' + INTEGER_32_MAX) {\r\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\r\n        return MIN_PUSH_CHAR;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt + 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    if (next.length < MAX_KEY_LEN) {\r\n        next.push(MIN_PUSH_CHAR);\r\n        return next.join('');\r\n    }\r\n    let i = next.length - 1;\r\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\r\n        i--;\r\n    }\r\n    // `successor` was called on the largest possible key, so return the\r\n    // MAX_NAME, which sorts larger than all keys.\r\n    if (i === -1) {\r\n        return MAX_NAME;\r\n    }\r\n    const source = next[i];\r\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\r\n    next[i] = sourcePlusOne;\r\n    return next.slice(0, i + 1).join('');\r\n};\r\n// `key` is assumed to be non-empty.\r\nconst predecessor = function (key) {\r\n    if (key === '' + INTEGER_32_MIN) {\r\n        return MIN_NAME;\r\n    }\r\n    const keyAsInt = tryParseInt(key);\r\n    if (keyAsInt != null) {\r\n        return '' + (keyAsInt - 1);\r\n    }\r\n    const next = new Array(key.length);\r\n    for (let i = 0; i < next.length; i++) {\r\n        next[i] = key.charAt(i);\r\n    }\r\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\r\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\r\n    // than that, `predecessor(predecessor(key))`, is\r\n    //\r\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\r\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\r\n    //\r\n    // analogous to increment/decrement for base-10 integers.\r\n    //\r\n    // This works because lexigographic comparison works character-by-character,\r\n    // using length as a tie-breaker if one key is a prefix of the other.\r\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\r\n        if (next.length === 1) {\r\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\r\n            return '' + INTEGER_32_MAX;\r\n        }\r\n        delete next[next.length - 1];\r\n        return next.join('');\r\n    }\r\n    // Replace the last character with it's immediate predecessor, and\r\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\r\n    // lexicographically largest possible key smaller than `key`.\r\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\r\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction changeValue(snapshotNode) {\r\n    return { type: \"value\" /* VALUE */, snapshotNode };\r\n}\r\nfunction changeChildAdded(childName, snapshotNode) {\r\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\r\n}\r\nfunction changeChildRemoved(childName, snapshotNode) {\r\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\r\n}\r\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\r\n    return {\r\n        type: \"child_changed\" /* CHILD_CHANGED */,\r\n        snapshotNode,\r\n        childName,\r\n        oldSnap\r\n    };\r\n}\r\nfunction changeChildMoved(childName, snapshotNode) {\r\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n */\r\nclass IndexedFilter {\r\n    constructor(index_) {\r\n        this.index_ = index_;\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\r\n        const oldChild = snap.getImmediateChild(key);\r\n        // Check if anything actually changed.\r\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\r\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\r\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\r\n            // to avoid treating these cases as \"nothing changed.\"\r\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\r\n                // Nothing changed.\r\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\r\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\r\n                return snap;\r\n            }\r\n        }\r\n        if (optChangeAccumulator != null) {\r\n            if (newChild.isEmpty()) {\r\n                if (snap.hasChild(key)) {\r\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\r\n                }\r\n                else {\r\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\r\n                }\r\n            }\r\n            else if (oldChild.isEmpty()) {\r\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\r\n            }\r\n            else {\r\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\r\n            }\r\n        }\r\n        if (snap.isLeafNode() && newChild.isEmpty()) {\r\n            return snap;\r\n        }\r\n        else {\r\n            // Make sure the node is indexed\r\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (optChangeAccumulator != null) {\r\n            if (!oldSnap.isLeafNode()) {\r\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (!newSnap.hasChild(key)) {\r\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n            if (!newSnap.isLeafNode()) {\r\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n                    if (oldSnap.hasChild(key)) {\r\n                        const oldChild = oldSnap.getImmediateChild(key);\r\n                        if (!oldChild.equals(childNode)) {\r\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\r\n                        }\r\n                    }\r\n                    else {\r\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return newSnap.withIndex(this.index_);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        if (oldSnap.isEmpty()) {\r\n            return ChildrenNode.EMPTY_NODE;\r\n        }\r\n        else {\r\n            return oldSnap.updatePriority(newPriority);\r\n        }\r\n    }\r\n    filtersNodes() {\r\n        return false;\r\n    }\r\n    getIndexedFilter() {\r\n        return this;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n */\r\nclass RangedFilter {\r\n    constructor(params) {\r\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\r\n        this.index_ = params.getIndex();\r\n        this.startPost_ = RangedFilter.getStartPost_(params);\r\n        this.endPost_ = RangedFilter.getEndPost_(params);\r\n    }\r\n    getStartPost() {\r\n        return this.startPost_;\r\n    }\r\n    getEndPost() {\r\n        return this.endPost_;\r\n    }\r\n    matches(node) {\r\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\r\n            this.index_.compare(node, this.getEndPost()) <= 0);\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        if (newSnap.isLeafNode()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            newSnap = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        let filtered = newSnap.withIndex(this.index_);\r\n        // Don't support priorities on queries\r\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n        const self = this;\r\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            if (!self.matches(new NamedNode(key, childNode))) {\r\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\r\n            }\r\n        });\r\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.indexedFilter_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    static getStartPost_(params) {\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\r\n        }\r\n        else {\r\n            return params.getIndex().minPost();\r\n        }\r\n    }\r\n    static getEndPost_(params) {\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\r\n        }\r\n        else {\r\n            return params.getIndex().maxPost();\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n */\r\nclass LimitedFilter {\r\n    constructor(params) {\r\n        this.rangedFilter_ = new RangedFilter(params);\r\n        this.index_ = params.getIndex();\r\n        this.limit_ = params.getLimit();\r\n        this.reverse_ = !params.isViewFromLeft();\r\n    }\r\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\r\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\r\n            newChild = ChildrenNode.EMPTY_NODE;\r\n        }\r\n        if (snap.getImmediateChild(key).equals(newChild)) {\r\n            // No change\r\n            return snap;\r\n        }\r\n        else if (snap.numChildren() < this.limit_) {\r\n            return this.rangedFilter_\r\n                .getIndexedFilter()\r\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\r\n        }\r\n        else {\r\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\r\n        }\r\n    }\r\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\r\n        let filtered;\r\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\r\n            // Make sure we have a children node with the correct index, not a leaf node;\r\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n        }\r\n        else {\r\n            if (this.limit_ * 2 < newSnap.numChildren() &&\r\n                newSnap.isIndexed(this.index_)) {\r\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\r\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\r\n                // anchor to the startPost, endPost, or last element as appropriate\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\r\n                }\r\n                else {\r\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\r\n                }\r\n                let count = 0;\r\n                while (iterator.hasNext() && count < this.limit_) {\r\n                    const next = iterator.getNext();\r\n                    let inRange;\r\n                    if (this.reverse_) {\r\n                        inRange =\r\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\r\n                    }\r\n                    else {\r\n                        inRange =\r\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\r\n                    }\r\n                    if (inRange) {\r\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        // if we have reached the end post, we cannot keep adding elemments\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\r\n                filtered = newSnap.withIndex(this.index_);\r\n                // Don't support priorities on queries\r\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\r\n                let startPost;\r\n                let endPost;\r\n                let cmp;\r\n                let iterator;\r\n                if (this.reverse_) {\r\n                    iterator = filtered.getReverseIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getEndPost();\r\n                    endPost = this.rangedFilter_.getStartPost();\r\n                    const indexCompare = this.index_.getCompare();\r\n                    cmp = (a, b) => indexCompare(b, a);\r\n                }\r\n                else {\r\n                    iterator = filtered.getIterator(this.index_);\r\n                    startPost = this.rangedFilter_.getStartPost();\r\n                    endPost = this.rangedFilter_.getEndPost();\r\n                    cmp = this.index_.getCompare();\r\n                }\r\n                let count = 0;\r\n                let foundStartPost = false;\r\n                while (iterator.hasNext()) {\r\n                    const next = iterator.getNext();\r\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\r\n                        // start adding\r\n                        foundStartPost = true;\r\n                    }\r\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\r\n                    if (inRange) {\r\n                        count++;\r\n                    }\r\n                    else {\r\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return this.rangedFilter_\r\n            .getIndexedFilter()\r\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\r\n    }\r\n    updatePriority(oldSnap, newPriority) {\r\n        // Don't support priorities on queries\r\n        return oldSnap;\r\n    }\r\n    filtersNodes() {\r\n        return true;\r\n    }\r\n    getIndexedFilter() {\r\n        return this.rangedFilter_.getIndexedFilter();\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\r\n        // TODO: rename all cache stuff etc to general snap terminology\r\n        let cmp;\r\n        if (this.reverse_) {\r\n            const indexCmp = this.index_.getCompare();\r\n            cmp = (a, b) => indexCmp(b, a);\r\n        }\r\n        else {\r\n            cmp = this.index_.getCompare();\r\n        }\r\n        const oldEventCache = snap;\r\n        assert(oldEventCache.numChildren() === this.limit_, '');\r\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\r\n        const windowBoundary = this.reverse_\r\n            ? oldEventCache.getFirstChild(this.index_)\r\n            : oldEventCache.getLastChild(this.index_);\r\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\r\n        if (oldEventCache.hasChild(childKey)) {\r\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\r\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\r\n            while (nextChild != null &&\r\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\r\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\r\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\r\n                // the limited filter...\r\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\r\n            }\r\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\r\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\r\n            if (remainsInWindow) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\r\n                }\r\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\r\n            }\r\n            else {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\r\n                }\r\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\r\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\r\n                if (nextChildInRange) {\r\n                    if (changeAccumulator != null) {\r\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\r\n                    }\r\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\r\n                }\r\n                else {\r\n                    return newEventCache;\r\n                }\r\n            }\r\n        }\r\n        else if (childSnap.isEmpty()) {\r\n            // we're deleting a node, but it was not in the window, so ignore it\r\n            return snap;\r\n        }\r\n        else if (inRange) {\r\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\r\n                if (changeAccumulator != null) {\r\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\r\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\r\n                }\r\n                return oldEventCache\r\n                    .updateImmediateChild(childKey, childSnap)\r\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\r\n            }\r\n            else {\r\n                return snap;\r\n            }\r\n        }\r\n        else {\r\n            return snap;\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n *\r\n * @internal\r\n */\r\nclass QueryParams {\r\n    constructor() {\r\n        this.limitSet_ = false;\r\n        this.startSet_ = false;\r\n        this.startNameSet_ = false;\r\n        this.startAfterSet_ = false;\r\n        this.endSet_ = false;\r\n        this.endNameSet_ = false;\r\n        this.endBeforeSet_ = false;\r\n        this.limit_ = 0;\r\n        this.viewFrom_ = '';\r\n        this.indexStartValue_ = null;\r\n        this.indexStartName_ = '';\r\n        this.indexEndValue_ = null;\r\n        this.indexEndName_ = '';\r\n        this.index_ = PRIORITY_INDEX;\r\n    }\r\n    hasStart() {\r\n        return this.startSet_;\r\n    }\r\n    hasStartAfter() {\r\n        return this.startAfterSet_;\r\n    }\r\n    hasEndBefore() {\r\n        return this.endBeforeSet_;\r\n    }\r\n    /**\r\n     * @returns True if it would return from left.\r\n     */\r\n    isViewFromLeft() {\r\n        if (this.viewFrom_ === '') {\r\n            // limit(), rather than limitToFirst or limitToLast was called.\r\n            // This means that only one of startSet_ and endSet_ is true. Use them\r\n            // to calculate which side of the view to anchor to. If neither is set,\r\n            // anchor to the end.\r\n            return this.startSet_;\r\n        }\r\n        else {\r\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\r\n        }\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true\r\n     */\r\n    getIndexStartValue() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        return this.indexStartValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasStart() returns true.\r\n     * Returns the starting key name for the range defined by these query parameters\r\n     */\r\n    getIndexStartName() {\r\n        assert(this.startSet_, 'Only valid if start has been set');\r\n        if (this.startNameSet_) {\r\n            return this.indexStartName_;\r\n        }\r\n        else {\r\n            return MIN_NAME;\r\n        }\r\n    }\r\n    hasEnd() {\r\n        return this.endSet_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     */\r\n    getIndexEndValue() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        return this.indexEndValue_;\r\n    }\r\n    /**\r\n     * Only valid to call if hasEnd() returns true.\r\n     * Returns the end key name for the range defined by these query parameters\r\n     */\r\n    getIndexEndName() {\r\n        assert(this.endSet_, 'Only valid if end has been set');\r\n        if (this.endNameSet_) {\r\n            return this.indexEndName_;\r\n        }\r\n        else {\r\n            return MAX_NAME;\r\n        }\r\n    }\r\n    hasLimit() {\r\n        return this.limitSet_;\r\n    }\r\n    /**\r\n     * @returns True if a limit has been set and it has been explicitly anchored\r\n     */\r\n    hasAnchoredLimit() {\r\n        return this.limitSet_ && this.viewFrom_ !== '';\r\n    }\r\n    /**\r\n     * Only valid to call if hasLimit() returns true\r\n     */\r\n    getLimit() {\r\n        assert(this.limitSet_, 'Only valid if limit has been set');\r\n        return this.limit_;\r\n    }\r\n    getIndex() {\r\n        return this.index_;\r\n    }\r\n    loadsAllData() {\r\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\r\n    }\r\n    isDefault() {\r\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\r\n    }\r\n    copy() {\r\n        const copy = new QueryParams();\r\n        copy.limitSet_ = this.limitSet_;\r\n        copy.limit_ = this.limit_;\r\n        copy.startSet_ = this.startSet_;\r\n        copy.indexStartValue_ = this.indexStartValue_;\r\n        copy.startNameSet_ = this.startNameSet_;\r\n        copy.indexStartName_ = this.indexStartName_;\r\n        copy.endSet_ = this.endSet_;\r\n        copy.indexEndValue_ = this.indexEndValue_;\r\n        copy.endNameSet_ = this.endNameSet_;\r\n        copy.indexEndName_ = this.indexEndName_;\r\n        copy.index_ = this.index_;\r\n        copy.viewFrom_ = this.viewFrom_;\r\n        return copy;\r\n    }\r\n}\r\nfunction queryParamsGetNodeFilter(queryParams) {\r\n    if (queryParams.loadsAllData()) {\r\n        return new IndexedFilter(queryParams.getIndex());\r\n    }\r\n    else if (queryParams.hasLimit()) {\r\n        return new LimitedFilter(queryParams);\r\n    }\r\n    else {\r\n        return new RangedFilter(queryParams);\r\n    }\r\n}\r\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsLimitToLast(queryParams, newLimit) {\r\n    const newParams = queryParams.copy();\r\n    newParams.limitSet_ = true;\r\n    newParams.limit_ = newLimit;\r\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.startSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexStartValue_ = indexValue;\r\n    if (key != null) {\r\n        newParams.startNameSet_ = true;\r\n        newParams.indexStartName_ = key;\r\n    }\r\n    else {\r\n        newParams.startNameSet_ = false;\r\n        newParams.indexStartName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = successor(indexValue);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        let childKey;\r\n        if (key == null) {\r\n            childKey = MAX_NAME;\r\n        }\r\n        else {\r\n            childKey = successor(key);\r\n        }\r\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.startAfterSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsEndAt(queryParams, indexValue, key) {\r\n    const newParams = queryParams.copy();\r\n    newParams.endSet_ = true;\r\n    if (indexValue === undefined) {\r\n        indexValue = null;\r\n    }\r\n    newParams.indexEndValue_ = indexValue;\r\n    if (key !== undefined) {\r\n        newParams.endNameSet_ = true;\r\n        newParams.indexEndName_ = key;\r\n    }\r\n    else {\r\n        newParams.endNameSet_ = false;\r\n        newParams.indexEndName_ = '';\r\n    }\r\n    return newParams;\r\n}\r\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\r\n    let childKey;\r\n    let params;\r\n    if (queryParams.index_ === KEY_INDEX) {\r\n        if (typeof indexValue === 'string') {\r\n            indexValue = predecessor(indexValue);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, key);\r\n    }\r\n    else {\r\n        if (key == null) {\r\n            childKey = MIN_NAME;\r\n        }\r\n        else {\r\n            childKey = predecessor(key);\r\n        }\r\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\r\n    }\r\n    params.endBeforeSet_ = true;\r\n    return params;\r\n}\r\nfunction queryParamsOrderBy(queryParams, index) {\r\n    const newParams = queryParams.copy();\r\n    newParams.index_ = index;\r\n    return newParams;\r\n}\r\n/**\r\n * Returns a set of REST query string parameters representing this query.\r\n *\r\n * @returns query string parameters\r\n */\r\nfunction queryParamsToRestQueryStringParameters(queryParams) {\r\n    const qs = {};\r\n    if (queryParams.isDefault()) {\r\n        return qs;\r\n    }\r\n    let orderBy;\r\n    if (queryParams.index_ === PRIORITY_INDEX) {\r\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === VALUE_INDEX) {\r\n        orderBy = \"$value\" /* VALUE_INDEX */;\r\n    }\r\n    else if (queryParams.index_ === KEY_INDEX) {\r\n        orderBy = \"$key\" /* KEY_INDEX */;\r\n    }\r\n    else {\r\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\r\n        orderBy = queryParams.index_.toString();\r\n    }\r\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\r\n    if (queryParams.startSet_) {\r\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\r\n        if (queryParams.startNameSet_) {\r\n            qs[\"startAt\" /* START_AT */] +=\r\n                ',' + stringify(queryParams.indexStartName_);\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\r\n        if (queryParams.endNameSet_) {\r\n            qs[\"endAt\" /* END_AT */] +=\r\n                ',' + stringify(queryParams.indexEndName_);\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        if (queryParams.isViewFromLeft()) {\r\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\r\n        }\r\n        else {\r\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\r\n        }\r\n    }\r\n    return qs;\r\n}\r\nfunction queryParamsGetQueryObject(queryParams) {\r\n    const obj = {};\r\n    if (queryParams.startSet_) {\r\n        obj[\"sp\" /* INDEX_START_VALUE */] =\r\n            queryParams.indexStartValue_;\r\n        if (queryParams.startNameSet_) {\r\n            obj[\"sn\" /* INDEX_START_NAME */] =\r\n                queryParams.indexStartName_;\r\n        }\r\n    }\r\n    if (queryParams.endSet_) {\r\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\r\n        if (queryParams.endNameSet_) {\r\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\r\n        }\r\n    }\r\n    if (queryParams.limitSet_) {\r\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\r\n        let viewFrom = queryParams.viewFrom_;\r\n        if (viewFrom === '') {\r\n            if (queryParams.isViewFromLeft()) {\r\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\r\n            }\r\n            else {\r\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\r\n            }\r\n        }\r\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\r\n    }\r\n    // For now, priority index is the default, so we only specify if it's some other index\r\n    if (queryParams.index_ !== PRIORITY_INDEX) {\r\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\r\n    }\r\n    return obj;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\r\nclass ReadonlyRestClient extends ServerActions {\r\n    /**\r\n     * @param repoInfo_ - Data about the namespace we are connecting to\r\n     * @param onDataUpdate_ - A callback for new data from the server\r\n     */\r\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\r\n        super();\r\n        this.repoInfo_ = repoInfo_;\r\n        this.onDataUpdate_ = onDataUpdate_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\r\n        /** @private {function(...[*])} */\r\n        this.log_ = logWrapper('p:rest:');\r\n        /**\r\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n         * that's been removed. :-/\r\n         */\r\n        this.listens_ = {};\r\n    }\r\n    reportStats(stats) {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    static getListenId_(query, tag) {\r\n        if (tag !== undefined) {\r\n            return 'tag$' + tag;\r\n        }\r\n        else {\r\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\r\n            return query._path.toString();\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    listen(query, currentHashFn, tag, onComplete) {\r\n        const pathString = query._path.toString();\r\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\r\n        // Mark this listener so we can tell if it's removed.\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        const thisListen = {};\r\n        this.listens_[listenId] = thisListen;\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\r\n            }\r\n            if (safeGet(this.listens_, listenId) === thisListen) {\r\n                let status;\r\n                if (!error) {\r\n                    status = 'ok';\r\n                }\r\n                else if (error === 401) {\r\n                    status = 'permission_denied';\r\n                }\r\n                else {\r\n                    status = 'rest_error:' + error;\r\n                }\r\n                onComplete(status, null);\r\n            }\r\n        });\r\n    }\r\n    /** @inheritDoc */\r\n    unlisten(query, tag) {\r\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\r\n        delete this.listens_[listenId];\r\n    }\r\n    get(query) {\r\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\r\n        const pathString = query._path.toString();\r\n        const deferred = new Deferred();\r\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\r\n            let data = result;\r\n            if (error === 404) {\r\n                data = null;\r\n                error = null;\r\n            }\r\n            if (error === null) {\r\n                this.onDataUpdate_(pathString, data, \r\n                /*isMerge=*/ false, \r\n                /*tag=*/ null);\r\n                deferred.resolve(data);\r\n            }\r\n            else {\r\n                deferred.reject(new Error(data));\r\n            }\r\n        });\r\n        return deferred.promise;\r\n    }\r\n    /** @inheritDoc */\r\n    refreshAuthToken(token) {\r\n        // no-op since we just always call getToken.\r\n    }\r\n    /**\r\n     * Performs a REST request to the given path, with the provided query string parameters,\r\n     * and any auth credentials we have.\r\n     */\r\n    restRequest_(pathString, queryStringParameters = {}, callback) {\r\n        queryStringParameters['format'] = 'export';\r\n        return Promise.all([\r\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\r\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\r\n        ]).then(([authToken, appCheckToken]) => {\r\n            if (authToken && authToken.accessToken) {\r\n                queryStringParameters['auth'] = authToken.accessToken;\r\n            }\r\n            if (appCheckToken && appCheckToken.token) {\r\n                queryStringParameters['ac'] = appCheckToken.token;\r\n            }\r\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\r\n                this.repoInfo_.host +\r\n                pathString +\r\n                '?' +\r\n                'ns=' +\r\n                this.repoInfo_.namespace +\r\n                querystring(queryStringParameters);\r\n            this.log_('Sending REST request for ' + url);\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.onreadystatechange = () => {\r\n                if (callback && xhr.readyState === 4) {\r\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\r\n                    let res = null;\r\n                    if (xhr.status >= 200 && xhr.status < 300) {\r\n                        try {\r\n                            res = jsonEval(xhr.responseText);\r\n                        }\r\n                        catch (e) {\r\n                            warn('Failed to parse JSON response for ' +\r\n                                url +\r\n                                ': ' +\r\n                                xhr.responseText);\r\n                        }\r\n                        callback(null, res);\r\n                    }\r\n                    else {\r\n                        // 401 and 404 are expected.\r\n                        if (xhr.status !== 401 && xhr.status !== 404) {\r\n                            warn('Got unsuccessful REST response for ' +\r\n                                url +\r\n                                ' Status: ' +\r\n                                xhr.status);\r\n                        }\r\n                        callback(xhr.status);\r\n                    }\r\n                    callback = null;\r\n                }\r\n            };\r\n            xhr.open('GET', url, /*asynchronous=*/ true);\r\n            xhr.send();\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n */\r\nclass SnapshotHolder {\r\n    constructor() {\r\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\r\n    }\r\n    getNode(path) {\r\n        return this.rootNode_.getChild(path);\r\n    }\r\n    updateSnapshot(path, newSnapshotNode) {\r\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newSparseSnapshotTree() {\r\n    return {\r\n        value: null,\r\n        children: new Map()\r\n    };\r\n}\r\n/**\r\n * Stores the given node at the specified path. If there is already a node\r\n * at a shallower path, it merges the new data into that snapshot node.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @param data - The new data, or null.\r\n */\r\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = data;\r\n        sparseSnapshotTree.children.clear();\r\n    }\r\n    else if (sparseSnapshotTree.value !== null) {\r\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(path);\r\n        if (!sparseSnapshotTree.children.has(childKey)) {\r\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\r\n        }\r\n        const child = sparseSnapshotTree.children.get(childKey);\r\n        path = pathPopFront(path);\r\n        sparseSnapshotTreeRemember(child, path, data);\r\n    }\r\n}\r\n/**\r\n * Purge the data at path from the cache.\r\n *\r\n * @param path - Path to look up snapshot for.\r\n * @returns True if this node should now be removed.\r\n */\r\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\r\n    if (pathIsEmpty(path)) {\r\n        sparseSnapshotTree.value = null;\r\n        sparseSnapshotTree.children.clear();\r\n        return true;\r\n    }\r\n    else {\r\n        if (sparseSnapshotTree.value !== null) {\r\n            if (sparseSnapshotTree.value.isLeafNode()) {\r\n                // We're trying to forget a node that doesn't exist\r\n                return false;\r\n            }\r\n            else {\r\n                const value = sparseSnapshotTree.value;\r\n                sparseSnapshotTree.value = null;\r\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\r\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\r\n                });\r\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\r\n            }\r\n        }\r\n        else if (sparseSnapshotTree.children.size > 0) {\r\n            const childKey = pathGetFront(path);\r\n            path = pathPopFront(path);\r\n            if (sparseSnapshotTree.children.has(childKey)) {\r\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\r\n                if (safeToRemove) {\r\n                    sparseSnapshotTree.children.delete(childKey);\r\n                }\r\n            }\r\n            return sparseSnapshotTree.children.size === 0;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Recursively iterates through all of the stored tree and calls the\r\n * callback on each one.\r\n *\r\n * @param prefixPath - Path to look up node for.\r\n * @param func - The function to invoke for each tree.\r\n */\r\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\r\n    if (sparseSnapshotTree.value !== null) {\r\n        func(prefixPath, sparseSnapshotTree.value);\r\n    }\r\n    else {\r\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\r\n            const path = new Path(prefixPath.toString() + '/' + key);\r\n            sparseSnapshotTreeForEachTree(tree, path, func);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Iterates through each immediate child and triggers the callback.\r\n * Only seems to be used in tests.\r\n *\r\n * @param func - The function to invoke for each child.\r\n */\r\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\r\n    sparseSnapshotTree.children.forEach((tree, key) => {\r\n        func(key, tree);\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ - The collection to \"listen\" to.\r\n */\r\nclass StatsListener {\r\n    constructor(collection_) {\r\n        this.collection_ = collection_;\r\n        this.last_ = null;\r\n    }\r\n    get() {\r\n        const newStats = this.collection_.get();\r\n        const delta = Object.assign({}, newStats);\r\n        if (this.last_) {\r\n            each(this.last_, (stat, value) => {\r\n                delta[stat] = delta[stat] - value;\r\n            });\r\n        }\r\n        this.last_ = newStats;\r\n        return delta;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\r\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\r\n// seconds to try to ensure the Firebase connection is established / settled.\r\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\r\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\r\n// We'll continue to report stats on average every 5 minutes.\r\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\r\nclass StatsReporter {\r\n    constructor(collection, server_) {\r\n        this.server_ = server_;\r\n        this.statsToReport_ = {};\r\n        this.statsListener_ = new StatsListener(collection);\r\n        const timeout = FIRST_STATS_MIN_TIME +\r\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\r\n    }\r\n    reportStats_() {\r\n        const stats = this.statsListener_.get();\r\n        const reportedStats = {};\r\n        let haveStatsToReport = false;\r\n        each(stats, (stat, value) => {\r\n            if (value > 0 && contains(this.statsToReport_, stat)) {\r\n                reportedStats[stat] = value;\r\n                haveStatsToReport = true;\r\n            }\r\n        });\r\n        if (haveStatsToReport) {\r\n            this.server_.reportStats(reportedStats);\r\n        }\r\n        // queue our next run.\r\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @enum\r\n */\r\nvar OperationType;\r\n(function (OperationType) {\r\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\r\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\r\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\r\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\r\n})(OperationType || (OperationType = {}));\r\nfunction newOperationSourceUser() {\r\n    return {\r\n        fromUser: true,\r\n        fromServer: false,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServer() {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId: null,\r\n        tagged: false\r\n    };\r\n}\r\nfunction newOperationSourceServerTaggedQuery(queryId) {\r\n    return {\r\n        fromUser: false,\r\n        fromServer: true,\r\n        queryId,\r\n        tagged: true\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass AckUserWrite {\r\n    /**\r\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\r\n     */\r\n    constructor(\r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ affectedTree, \r\n    /** @inheritDoc */ revert) {\r\n        this.path = path;\r\n        this.affectedTree = affectedTree;\r\n        this.revert = revert;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.ACK_USER_WRITE;\r\n        /** @inheritDoc */\r\n        this.source = newOperationSourceUser();\r\n    }\r\n    operationForChild(childName) {\r\n        if (!pathIsEmpty(this.path)) {\r\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\r\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\r\n        }\r\n        else if (this.affectedTree.value != null) {\r\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\r\n            // All child locations are affected as well; just return same operation.\r\n            return this;\r\n        }\r\n        else {\r\n            const childTree = this.affectedTree.subtree(new Path(childName));\r\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ListenComplete {\r\n    constructor(source, path) {\r\n        this.source = source;\r\n        this.path = path;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.LISTEN_COMPLETE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new ListenComplete(this.source, newEmptyPath());\r\n        }\r\n        else {\r\n            return new ListenComplete(this.source, pathPopFront(this.path));\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Overwrite {\r\n    constructor(source, path, snap) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.snap = snap;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.OVERWRITE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\r\n        }\r\n        else {\r\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Merge {\r\n    constructor(\r\n    /** @inheritDoc */ source, \r\n    /** @inheritDoc */ path, \r\n    /** @inheritDoc */ children) {\r\n        this.source = source;\r\n        this.path = path;\r\n        this.children = children;\r\n        /** @inheritDoc */\r\n        this.type = OperationType.MERGE;\r\n    }\r\n    operationForChild(childName) {\r\n        if (pathIsEmpty(this.path)) {\r\n            const childTree = this.children.subtree(new Path(childName));\r\n            if (childTree.isEmpty()) {\r\n                // This child is unaffected\r\n                return null;\r\n            }\r\n            else if (childTree.value) {\r\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\r\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\r\n            }\r\n            else {\r\n                // This is a merge at a deeper level\r\n                return new Merge(this.source, newEmptyPath(), childTree);\r\n            }\r\n        }\r\n        else {\r\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\r\n            return new Merge(this.source, pathPopFront(this.path), this.children);\r\n        }\r\n    }\r\n    toString() {\r\n        return ('Operation(' +\r\n            this.path +\r\n            ': ' +\r\n            this.source.toString() +\r\n            ' merge: ' +\r\n            this.children.toString() +\r\n            ')');\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\r\nclass CacheNode {\r\n    constructor(node_, fullyInitialized_, filtered_) {\r\n        this.node_ = node_;\r\n        this.fullyInitialized_ = fullyInitialized_;\r\n        this.filtered_ = filtered_;\r\n    }\r\n    /**\r\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n     */\r\n    isFullyInitialized() {\r\n        return this.fullyInitialized_;\r\n    }\r\n    /**\r\n     * Returns whether this node is potentially missing children due to a filter applied to the node\r\n     */\r\n    isFiltered() {\r\n        return this.filtered_;\r\n    }\r\n    isCompleteForPath(path) {\r\n        if (pathIsEmpty(path)) {\r\n            return this.isFullyInitialized() && !this.filtered_;\r\n        }\r\n        const childKey = pathGetFront(path);\r\n        return this.isCompleteForChild(childKey);\r\n    }\r\n    isCompleteForChild(key) {\r\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\r\n    }\r\n    getNode() {\r\n        return this.node_;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n */\r\nclass EventGenerator {\r\n    constructor(query_) {\r\n        this.query_ = query_;\r\n        this.index_ = this.query_._queryParams.getIndex();\r\n    }\r\n}\r\n/**\r\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n *\r\n * Notes:\r\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n *    our index.\r\n *  - prevName will be calculated based on the index ordering.\r\n */\r\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\r\n    const events = [];\r\n    const moves = [];\r\n    changes.forEach(change => {\r\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\r\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\r\n        }\r\n    });\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\r\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\r\n    return events;\r\n}\r\n/**\r\n * Given changes of a single change type, generate the corresponding events.\r\n */\r\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\r\n    const filteredChanges = changes.filter(change => change.type === eventType);\r\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\r\n    filteredChanges.forEach(change => {\r\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\r\n        registrations.forEach(registration => {\r\n            if (registration.respondsTo(change.type)) {\r\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\r\n    if (change.type === 'value' || change.type === 'child_removed') {\r\n        return change;\r\n    }\r\n    else {\r\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\r\n        return change;\r\n    }\r\n}\r\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\r\n    if (a.childName == null || b.childName == null) {\r\n        throw assertionError('Should only compare child_ events.');\r\n    }\r\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\r\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\r\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewCache(eventCache, serverCache) {\r\n    return { eventCache, serverCache };\r\n}\r\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\r\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\r\n}\r\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\r\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\r\n}\r\nfunction viewCacheGetCompleteEventSnap(viewCache) {\r\n    return viewCache.eventCache.isFullyInitialized()\r\n        ? viewCache.eventCache.getNode()\r\n        : null;\r\n}\r\nfunction viewCacheGetCompleteServerSnap(viewCache) {\r\n    return viewCache.serverCache.isFullyInitialized()\r\n        ? viewCache.serverCache.getNode()\r\n        : null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet emptyChildrenSingleton;\r\n/**\r\n * Singleton empty children collection.\r\n *\r\n */\r\nconst EmptyChildren = () => {\r\n    if (!emptyChildrenSingleton) {\r\n        emptyChildrenSingleton = new SortedMap(stringCompare);\r\n    }\r\n    return emptyChildrenSingleton;\r\n};\r\n/**\r\n * A tree with immutable elements.\r\n */\r\nclass ImmutableTree {\r\n    constructor(value, children = EmptyChildren()) {\r\n        this.value = value;\r\n        this.children = children;\r\n    }\r\n    static fromObject(obj) {\r\n        let tree = new ImmutableTree(null);\r\n        each(obj, (childPath, childSnap) => {\r\n            tree = tree.set(new Path(childPath), childSnap);\r\n        });\r\n        return tree;\r\n    }\r\n    /**\r\n     * True if the value is empty and there are no children\r\n     */\r\n    isEmpty() {\r\n        return this.value === null && this.children.isEmpty();\r\n    }\r\n    /**\r\n     * Given a path and predicate, return the first node and the path to that node\r\n     * where the predicate returns true.\r\n     *\r\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\r\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\r\n     *\r\n     * @param relativePath - The remainder of the path\r\n     * @param predicate - The predicate to satisfy to return a node\r\n     */\r\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\r\n        if (this.value != null && predicate(this.value)) {\r\n            return { path: newEmptyPath(), value: this.value };\r\n        }\r\n        else {\r\n            if (pathIsEmpty(relativePath)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(relativePath);\r\n                const child = this.children.get(front);\r\n                if (child !== null) {\r\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\r\n                    if (childExistingPathAndValue != null) {\r\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\r\n                        return { path: fullPath, value: childExistingPathAndValue.value };\r\n                    }\r\n                    else {\r\n                        return null;\r\n                    }\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Find, if it exists, the shortest subpath of the given path that points a defined\r\n     * value in the tree\r\n     */\r\n    findRootMostValueAndPath(relativePath) {\r\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\r\n    }\r\n    /**\r\n     * @returns The subtree at the given path\r\n     */\r\n    subtree(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const childTree = this.children.get(front);\r\n            if (childTree !== null) {\r\n                return childTree.subtree(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets a value at the specified path.\r\n     *\r\n     * @param relativePath - Path to set value at.\r\n     * @param toSet - Value to set.\r\n     * @returns Resulting tree.\r\n     */\r\n    set(relativePath, toSet) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return new ImmutableTree(toSet, this.children);\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.set(pathPopFront(relativePath), toSet);\r\n            const newChildren = this.children.insert(front, newChild);\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Removes the value at the specified path.\r\n     *\r\n     * @param relativePath - Path to value to remove.\r\n     * @returns Resulting tree.\r\n     */\r\n    remove(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            if (this.children.isEmpty()) {\r\n                return new ImmutableTree(null);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null, this.children);\r\n            }\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                const newChild = child.remove(pathPopFront(relativePath));\r\n                let newChildren;\r\n                if (newChild.isEmpty()) {\r\n                    newChildren = this.children.remove(front);\r\n                }\r\n                else {\r\n                    newChildren = this.children.insert(front, newChild);\r\n                }\r\n                if (this.value === null && newChildren.isEmpty()) {\r\n                    return new ImmutableTree(null);\r\n                }\r\n                else {\r\n                    return new ImmutableTree(this.value, newChildren);\r\n                }\r\n            }\r\n            else {\r\n                return this;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Gets a value from the tree.\r\n     *\r\n     * @param relativePath - Path to get value for.\r\n     * @returns Value at path, or null.\r\n     */\r\n    get(relativePath) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return this.value;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front);\r\n            if (child) {\r\n                return child.get(pathPopFront(relativePath));\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the subtree at the specified path with the given new tree.\r\n     *\r\n     * @param relativePath - Path to replace subtree for.\r\n     * @param newTree - New tree.\r\n     * @returns Resulting tree.\r\n     */\r\n    setTree(relativePath, newTree) {\r\n        if (pathIsEmpty(relativePath)) {\r\n            return newTree;\r\n        }\r\n        else {\r\n            const front = pathGetFront(relativePath);\r\n            const child = this.children.get(front) || new ImmutableTree(null);\r\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\r\n            let newChildren;\r\n            if (newChild.isEmpty()) {\r\n                newChildren = this.children.remove(front);\r\n            }\r\n            else {\r\n                newChildren = this.children.insert(front, newChild);\r\n            }\r\n            return new ImmutableTree(this.value, newChildren);\r\n        }\r\n    }\r\n    /**\r\n     * Performs a depth first fold on this tree. Transforms a tree into a single\r\n     * value, given a function that operates on the path to a node, an optional\r\n     * current value, and a map of child names to folded subtrees\r\n     */\r\n    fold(fn) {\r\n        return this.fold_(newEmptyPath(), fn);\r\n    }\r\n    /**\r\n     * Recursive helper for public-facing fold() method\r\n     */\r\n    fold_(pathSoFar, fn) {\r\n        const accum = {};\r\n        this.children.inorderTraversal((childKey, childTree) => {\r\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\r\n        });\r\n        return fn(pathSoFar, this.value, accum);\r\n    }\r\n    /**\r\n     * Find the first matching value on the given path. Return the result of applying f to it.\r\n     */\r\n    findOnPath(path, f) {\r\n        return this.findOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    findOnPath_(pathToFollow, pathSoFar, f) {\r\n        const result = this.value ? f(pathSoFar, this.value) : false;\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            if (pathIsEmpty(pathToFollow)) {\r\n                return null;\r\n            }\r\n            else {\r\n                const front = pathGetFront(pathToFollow);\r\n                const nextChild = this.children.get(front);\r\n                if (nextChild) {\r\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    foreachOnPath(path, f) {\r\n        return this.foreachOnPath_(path, newEmptyPath(), f);\r\n    }\r\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\r\n        if (pathIsEmpty(pathToFollow)) {\r\n            return this;\r\n        }\r\n        else {\r\n            if (this.value) {\r\n                f(currentRelativePath, this.value);\r\n            }\r\n            const front = pathGetFront(pathToFollow);\r\n            const nextChild = this.children.get(front);\r\n            if (nextChild) {\r\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\r\n            }\r\n            else {\r\n                return new ImmutableTree(null);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calls the given function for each node in the tree that has a value.\r\n     *\r\n     * @param f - A function to be called with the path from the root of the tree to\r\n     * a node, and the value at that node. Called in depth-first order.\r\n     */\r\n    foreach(f) {\r\n        this.foreach_(newEmptyPath(), f);\r\n    }\r\n    foreach_(currentRelativePath, f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\r\n        });\r\n        if (this.value) {\r\n            f(currentRelativePath, this.value);\r\n        }\r\n    }\r\n    foreachChild(f) {\r\n        this.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value) {\r\n                f(childName, childTree.value);\r\n            }\r\n        });\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\r\nclass CompoundWrite {\r\n    constructor(writeTree_) {\r\n        this.writeTree_ = writeTree_;\r\n    }\r\n    static empty() {\r\n        return new CompoundWrite(new ImmutableTree(null));\r\n    }\r\n}\r\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\r\n    if (pathIsEmpty(path)) {\r\n        return new CompoundWrite(new ImmutableTree(node));\r\n    }\r\n    else {\r\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n        if (rootmost != null) {\r\n            const rootMostPath = rootmost.path;\r\n            let value = rootmost.value;\r\n            const relativePath = newRelativePath(rootMostPath, path);\r\n            value = value.updateChild(relativePath, node);\r\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\r\n        }\r\n        else {\r\n            const subtree = new ImmutableTree(node);\r\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\r\n            return new CompoundWrite(newWriteTree);\r\n        }\r\n    }\r\n}\r\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\r\n    let newWrite = compoundWrite;\r\n    each(updates, (childKey, node) => {\r\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\r\n    });\r\n    return newWrite;\r\n}\r\n/**\r\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n * location, which must be removed by calling this method with that path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to remove.\r\n * @param path - The path at which a write and all deeper writes should be removed\r\n * @returns The new CompoundWrite with the removed path\r\n */\r\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return CompoundWrite.empty();\r\n    }\r\n    else {\r\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\r\n        return new CompoundWrite(newWriteTree);\r\n    }\r\n}\r\n/**\r\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n * considered \"complete\".\r\n *\r\n * @param compoundWrite - The CompoundWrite to check.\r\n * @param path - The path to check for\r\n * @returns Whether there is a complete write at that path\r\n */\r\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\r\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\r\n}\r\n/**\r\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n * writes from deeper paths, but will return child nodes from a more shallow path.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get the node from.\r\n * @param path - The path to get a complete write\r\n * @returns The node if complete at that path, or null otherwise.\r\n */\r\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\r\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\r\n    if (rootmost != null) {\r\n        return compoundWrite.writeTree_\r\n            .get(rootmost.path)\r\n            .getChild(newRelativePath(rootmost.path, path));\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns all children that are guaranteed to be a complete overwrite.\r\n *\r\n * @param compoundWrite - The CompoundWrite to get children from.\r\n * @returns A list of all complete children.\r\n */\r\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\r\n    const children = [];\r\n    const node = compoundWrite.writeTree_.value;\r\n    if (node != null) {\r\n        // If it's a leaf node, it has no children; so nothing to do.\r\n        if (!node.isLeafNode()) {\r\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n                children.push(new NamedNode(childName, childNode));\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\r\n            if (childTree.value != null) {\r\n                children.push(new NamedNode(childName, childTree.value));\r\n            }\r\n        });\r\n    }\r\n    return children;\r\n}\r\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\r\n    if (pathIsEmpty(path)) {\r\n        return compoundWrite;\r\n    }\r\n    else {\r\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\r\n        if (shadowingNode != null) {\r\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\r\n        }\r\n        else {\r\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n * @returns Whether this CompoundWrite is empty\r\n */\r\nfunction compoundWriteIsEmpty(compoundWrite) {\r\n    return compoundWrite.writeTree_.isEmpty();\r\n}\r\n/**\r\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n * node\r\n * @param node - The node to apply this CompoundWrite to\r\n * @returns The node with all writes applied\r\n */\r\nfunction compoundWriteApply(compoundWrite, node) {\r\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\r\n}\r\nfunction applySubtreeWrite(relativePath, writeTree, node) {\r\n    if (writeTree.value != null) {\r\n        // Since there a write is always a leaf, we're done here\r\n        return node.updateChild(relativePath, writeTree.value);\r\n    }\r\n    else {\r\n        let priorityWrite = null;\r\n        writeTree.children.inorderTraversal((childKey, childTree) => {\r\n            if (childKey === '.priority') {\r\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\r\n                // to apply priorities to empty nodes that are later filled\r\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\r\n                priorityWrite = childTree.value;\r\n            }\r\n            else {\r\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\r\n            }\r\n        });\r\n        // If there was a priority write, we only apply it if the node is not empty\r\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\r\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\r\n        }\r\n        return node;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n *\r\n */\r\nfunction writeTreeChildWrites(writeTree, path) {\r\n    return newWriteTreeRef(path, writeTree);\r\n}\r\n/**\r\n * Record a new overwrite from user code.\r\n *\r\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\r\n */\r\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\r\n    if (visible === undefined) {\r\n        visible = true;\r\n    }\r\n    writeTree.allWrites.push({\r\n        path,\r\n        snap,\r\n        writeId,\r\n        visible\r\n    });\r\n    if (visible) {\r\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\r\n    }\r\n    writeTree.lastWriteId = writeId;\r\n}\r\n/**\r\n * Record a new merge from user code.\r\n */\r\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\r\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\r\n    writeTree.allWrites.push({\r\n        path,\r\n        children: changedChildren,\r\n        writeId,\r\n        visible: true\r\n    });\r\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\r\n    writeTree.lastWriteId = writeId;\r\n}\r\nfunction writeTreeGetWrite(writeTree, writeId) {\r\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\r\n        const record = writeTree.allWrites[i];\r\n        if (record.writeId === writeId) {\r\n            return record;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n *\r\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n * events as a result).\r\n */\r\nfunction writeTreeRemoveWrite(writeTree, writeId) {\r\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\r\n    // out of order.\r\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\r\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\r\n    const idx = writeTree.allWrites.findIndex(s => {\r\n        return s.writeId === writeId;\r\n    });\r\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\r\n    const writeToRemove = writeTree.allWrites[idx];\r\n    writeTree.allWrites.splice(idx, 1);\r\n    let removedWriteWasVisible = writeToRemove.visible;\r\n    let removedWriteOverlapsWithOtherWrites = false;\r\n    let i = writeTree.allWrites.length - 1;\r\n    while (removedWriteWasVisible && i >= 0) {\r\n        const currentWrite = writeTree.allWrites[i];\r\n        if (currentWrite.visible) {\r\n            if (i >= idx &&\r\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\r\n                // The removed write was completely shadowed by a subsequent write.\r\n                removedWriteWasVisible = false;\r\n            }\r\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\r\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\r\n                removedWriteOverlapsWithOtherWrites = true;\r\n            }\r\n        }\r\n        i--;\r\n    }\r\n    if (!removedWriteWasVisible) {\r\n        return false;\r\n    }\r\n    else if (removedWriteOverlapsWithOtherWrites) {\r\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\r\n        writeTreeResetTree_(writeTree);\r\n        return true;\r\n    }\r\n    else {\r\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\r\n        if (writeToRemove.snap) {\r\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\r\n        }\r\n        else {\r\n            const children = writeToRemove.children;\r\n            each(children, (childName) => {\r\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n}\r\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\r\n    if (writeRecord.snap) {\r\n        return pathContains(writeRecord.path, path);\r\n    }\r\n    else {\r\n        for (const childName in writeRecord.children) {\r\n            if (writeRecord.children.hasOwnProperty(childName) &&\r\n                pathContains(pathChild(writeRecord.path, childName), path)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n */\r\nfunction writeTreeResetTree_(writeTree) {\r\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\r\n    if (writeTree.allWrites.length > 0) {\r\n        writeTree.lastWriteId =\r\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\r\n    }\r\n    else {\r\n        writeTree.lastWriteId = -1;\r\n    }\r\n}\r\n/**\r\n * The default filter used when constructing the tree. Keep everything that's visible.\r\n */\r\nfunction writeTreeDefaultFilter_(write) {\r\n    return write.visible;\r\n}\r\n/**\r\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n * event data at that path.\r\n */\r\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\r\n    let compoundWrite = CompoundWrite.empty();\r\n    for (let i = 0; i < writes.length; ++i) {\r\n        const write = writes[i];\r\n        // Theory, a later set will either:\r\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\r\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\r\n        if (filter(write)) {\r\n            const writePath = write.path;\r\n            let relativePath;\r\n            if (write.snap) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\r\n                }\r\n                else ;\r\n            }\r\n            else if (write.children) {\r\n                if (pathContains(treeRoot, writePath)) {\r\n                    relativePath = newRelativePath(treeRoot, writePath);\r\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\r\n                }\r\n                else if (pathContains(writePath, treeRoot)) {\r\n                    relativePath = newRelativePath(writePath, treeRoot);\r\n                    if (pathIsEmpty(relativePath)) {\r\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\r\n                    }\r\n                    else {\r\n                        const child = safeGet(write.children, pathGetFront(relativePath));\r\n                        if (child) {\r\n                            // There exists a child in this node that matches the root path\r\n                            const deepNode = child.getChild(pathPopFront(relativePath));\r\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\r\n                        }\r\n                    }\r\n                }\r\n                else ;\r\n            }\r\n            else {\r\n                throw assertionError('WriteRecord should have .snap or .children');\r\n            }\r\n        }\r\n    }\r\n    return compoundWrite;\r\n}\r\n/**\r\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n * writes), attempt to calculate a complete snapshot for the given path\r\n *\r\n * @param writeIdsToExclude - An optional set to be excluded\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    if (!writeIdsToExclude && !includeHiddenWrites) {\r\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n        if (shadowingNode != null) {\r\n            return shadowingNode;\r\n        }\r\n        else {\r\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n            if (compoundWriteIsEmpty(subMerge)) {\r\n                return completeServerCache;\r\n            }\r\n            else if (completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\r\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\r\n                return null;\r\n            }\r\n            else {\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(subMerge, layeredCache);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\r\n            return completeServerCache;\r\n        }\r\n        else {\r\n            // If the server cache is null, and we don't have a complete cache, we need to return null\r\n            if (!includeHiddenWrites &&\r\n                completeServerCache == null &&\r\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\r\n                return null;\r\n            }\r\n            else {\r\n                const filter = function (write) {\r\n                    return ((write.visible || includeHiddenWrites) &&\r\n                        (!writeIdsToExclude ||\r\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\r\n                        (pathContains(write.path, treePath) ||\r\n                            pathContains(treePath, write.path)));\r\n                };\r\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\r\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\r\n                return compoundWriteApply(mergeAtPath, layeredCache);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n * Used when creating new views, to pre-fill their complete event children snapshot.\r\n */\r\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\r\n    let completeChildren = ChildrenNode.EMPTY_NODE;\r\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\r\n    if (topLevelSet) {\r\n        if (!topLevelSet.isLeafNode()) {\r\n            // we're shadowing everything. Return the children.\r\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\r\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\r\n            });\r\n        }\r\n        return completeChildren;\r\n    }\r\n    else if (completeServerChildren) {\r\n        // Layer any children we have on top of this\r\n        // We know we don't have a top-level set, so just enumerate existing children\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\r\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\r\n        });\r\n        // Add any complete children we have from the set\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n    else {\r\n        // We don't have anything to layer on top of. Layer on any children we have\r\n        // Note that we can return an empty snap if we have a defined delete\r\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\r\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\r\n        });\r\n        return completeChildren;\r\n    }\r\n}\r\n/**\r\n * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n * applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist\r\n */\r\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\r\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\r\n    const path = pathChild(treePath, childPath);\r\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\r\n        // At this point we can probably guarantee that we're in case 2, meaning no events\r\n        // May need to check visibility while doing the findRootMostValueAndPath call\r\n        return null;\r\n    }\r\n    else {\r\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\r\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n        if (compoundWriteIsEmpty(childMerge)) {\r\n            // We're not shadowing at all. Case 1\r\n            return existingServerSnap.getChild(childPath);\r\n        }\r\n        else {\r\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\r\n            // However this is tricky to find out, since user updates don't necessary change the server\r\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\r\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\r\n            // only check if the updates change the serverNode.\r\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\r\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\r\n    const path = pathChild(treePath, childKey);\r\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n    if (shadowingNode != null) {\r\n        return shadowingNode;\r\n    }\r\n    else {\r\n        if (existingServerSnap.isCompleteForChild(childKey)) {\r\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\r\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n */\r\nfunction writeTreeShadowingWrite(writeTree, path) {\r\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window.\r\n */\r\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\r\n    let toIterate;\r\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\r\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\r\n    if (shadowingNode != null) {\r\n        toIterate = shadowingNode;\r\n    }\r\n    else if (completeServerData != null) {\r\n        toIterate = compoundWriteApply(merge, completeServerData);\r\n    }\r\n    else {\r\n        // no children to iterate on\r\n        return [];\r\n    }\r\n    toIterate = toIterate.withIndex(index);\r\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\r\n        const nodes = [];\r\n        const cmp = index.getCompare();\r\n        const iter = reverse\r\n            ? toIterate.getReverseIteratorFrom(startPost, index)\r\n            : toIterate.getIteratorFrom(startPost, index);\r\n        let next = iter.getNext();\r\n        while (next && nodes.length < count) {\r\n            if (cmp(next, startPost) !== 0) {\r\n                nodes.push(next);\r\n            }\r\n            next = iter.getNext();\r\n        }\r\n        return nodes;\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction newWriteTree() {\r\n    return {\r\n        visibleWrites: CompoundWrite.empty(),\r\n        allWrites: [],\r\n        lastWriteId: -1\r\n    };\r\n}\r\n/**\r\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n * can lead to a more expensive calculation.\r\n *\r\n * @param writeIdsToExclude - Optional writes to exclude.\r\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\r\n */\r\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\r\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\r\n}\r\n/**\r\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n * mix of the given server data and write data.\r\n *\r\n */\r\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\r\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\r\n}\r\n/**\r\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n * if anything, needs to be applied to the event cache.\r\n *\r\n * Possibilities:\r\n *\r\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n *\r\n * 2. Some write is completely shadowing. No events to be raised\r\n *\r\n * 3. Is partially shadowed. Events should be raised\r\n *\r\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n *\r\n *\r\n */\r\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\r\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\r\n}\r\n/**\r\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n * a higher path, this will return the child of that write relative to the write and this path.\r\n * Returns null if there is no write at this path.\r\n *\r\n */\r\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\r\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\r\n}\r\n/**\r\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n * the window, but may now be in the window\r\n */\r\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\r\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\r\n}\r\n/**\r\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n * complete child for this ChildKey.\r\n */\r\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\r\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\r\n}\r\n/**\r\n * Return a WriteTreeRef for a child.\r\n */\r\nfunction writeTreeRefChild(writeTreeRef, childName) {\r\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\r\n}\r\nfunction newWriteTreeRef(path, writeTree) {\r\n    return {\r\n        treePath: path,\r\n        writeTree\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ChildChangeAccumulator {\r\n    constructor() {\r\n        this.changeMap = new Map();\r\n    }\r\n    trackChildChange(change) {\r\n        const type = change.type;\r\n        const childKey = change.childName;\r\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\r\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\r\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\r\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        const oldChange = this.changeMap.get(childKey);\r\n        if (oldChange) {\r\n            const oldType = oldChange.type;\r\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\r\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.delete(childKey);\r\n            }\r\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_added\" /* CHILD_ADDED */) {\r\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\r\n            }\r\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\r\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\r\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\r\n            }\r\n            else {\r\n                throw assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap.set(childKey, change);\r\n        }\r\n    }\r\n    getChanges() {\r\n        return Array.from(this.changeMap.values());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nclass NoCompleteChildSource_ {\r\n    getCompleteChild(childKey) {\r\n        return null;\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Singleton instance.\r\n */\r\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\r\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n */\r\nclass WriteTreeCompleteChildSource {\r\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\r\n        this.writes_ = writes_;\r\n        this.viewCache_ = viewCache_;\r\n        this.optCompleteServerCache_ = optCompleteServerCache_;\r\n    }\r\n    getCompleteChild(childKey) {\r\n        const node = this.viewCache_.eventCache;\r\n        if (node.isCompleteForChild(childKey)) {\r\n            return node.getNode().getImmediateChild(childKey);\r\n        }\r\n        else {\r\n            const serverNode = this.optCompleteServerCache_ != null\r\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\r\n                : this.viewCache_.serverCache;\r\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\r\n        }\r\n    }\r\n    getChildAfterChild(index, child, reverse) {\r\n        const completeServerData = this.optCompleteServerCache_ != null\r\n            ? this.optCompleteServerCache_\r\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\r\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\r\n        if (nodes.length === 0) {\r\n            return null;\r\n        }\r\n        else {\r\n            return nodes[0];\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction newViewProcessor(filter) {\r\n    return { filter };\r\n}\r\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\r\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\r\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\r\n}\r\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\r\n    const accumulator = new ChildChangeAccumulator();\r\n    let newViewCache, filterServerNode;\r\n    if (operation.type === OperationType.OVERWRITE) {\r\n        const overwrite = operation;\r\n        if (overwrite.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(overwrite.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\r\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\r\n            // again\r\n            filterServerNode =\r\n                overwrite.source.tagged ||\r\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\r\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.MERGE) {\r\n        const merge = operation;\r\n        if (merge.source.fromUser) {\r\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            assert(merge.source.fromServer, 'Unknown source.');\r\n            // We filter the node if it's a tagged update or the node has been previously filtered\r\n            filterServerNode =\r\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\r\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\r\n        const ackUserWrite = operation;\r\n        if (!ackUserWrite.revert) {\r\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\r\n        }\r\n        else {\r\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\r\n        }\r\n    }\r\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\r\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\r\n    }\r\n    else {\r\n        throw assertionError('Unknown operation type: ' + operation.type);\r\n    }\r\n    const changes = accumulator.getChanges();\r\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\r\n    return { viewCache: newViewCache, changes };\r\n}\r\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\r\n    const eventSnap = newViewCache.eventCache;\r\n    if (eventSnap.isFullyInitialized()) {\r\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\r\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\r\n        if (accumulator.length > 0 ||\r\n            !oldViewCache.eventCache.isFullyInitialized() ||\r\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\r\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\r\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\r\n        }\r\n    }\r\n}\r\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\r\n    const oldEventSnap = viewCache.eventCache;\r\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\r\n        // we have a shadowing write, ignore changes\r\n        return viewCache;\r\n    }\r\n    else {\r\n        let newEventCache, serverNode;\r\n        if (pathIsEmpty(changePath)) {\r\n            // TODO: figure out how this plays with \"sliding ack windows\"\r\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\r\n            if (viewCache.serverCache.isFiltered()) {\r\n                // We need to special case this, because we need to only apply writes to complete children, or\r\n                // we might end up raising events for incomplete children. If the server data is filtered deep\r\n                // writes cannot be guaranteed to be complete\r\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\r\n                const completeChildren = serverCache instanceof ChildrenNode\r\n                    ? serverCache\r\n                    : ChildrenNode.EMPTY_NODE;\r\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\r\n            }\r\n            else {\r\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\r\n            }\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(changePath);\r\n            if (childKey === '.priority') {\r\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\r\n                const oldEventNode = oldEventSnap.getNode();\r\n                serverNode = viewCache.serverCache.getNode();\r\n                // we might have overwrites for this priority\r\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\r\n                if (updatedPriority != null) {\r\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\r\n                }\r\n                else {\r\n                    // priority didn't change, keep old node\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n            else {\r\n                const childChangePath = pathPopFront(changePath);\r\n                // update child\r\n                let newEventChild;\r\n                if (oldEventSnap.isCompleteForChild(childKey)) {\r\n                    serverNode = viewCache.serverCache.getNode();\r\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\r\n                    if (eventChildUpdate != null) {\r\n                        newEventChild = oldEventSnap\r\n                            .getNode()\r\n                            .getImmediateChild(childKey)\r\n                            .updateChild(childChangePath, eventChildUpdate);\r\n                    }\r\n                    else {\r\n                        // Nothing changed, just keep the old child\r\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n                    }\r\n                }\r\n                else {\r\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n                }\r\n                if (newEventChild != null) {\r\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\r\n                }\r\n                else {\r\n                    // no complete child available or no change\r\n                    newEventCache = oldEventSnap.getNode();\r\n                }\r\n            }\r\n        }\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\r\n    }\r\n}\r\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\r\n    const oldServerSnap = oldViewCache.serverCache;\r\n    let newServerCache;\r\n    const serverFilter = filterServerNode\r\n        ? viewProcessor.filter\r\n        : viewProcessor.filter.getIndexedFilter();\r\n    if (pathIsEmpty(changePath)) {\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\r\n    }\r\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\r\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\r\n        const newServerNode = oldServerSnap\r\n            .getNode()\r\n            .updateChild(changePath, changedSnap);\r\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\r\n            pathGetLength(changePath) > 1) {\r\n            // We don't update incomplete nodes with updates intended for other listeners\r\n            return oldViewCache;\r\n        }\r\n        const childChangePath = pathPopFront(changePath);\r\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\r\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\r\n        if (childKey === '.priority') {\r\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\r\n        }\r\n        else {\r\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\r\n        }\r\n    }\r\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\r\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\r\n}\r\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\r\n    const oldEventSnap = oldViewCache.eventCache;\r\n    let newViewCache, newEventCache;\r\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\r\n    if (pathIsEmpty(changePath)) {\r\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\r\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\r\n    }\r\n    else {\r\n        const childKey = pathGetFront(changePath);\r\n        if (childKey === '.priority') {\r\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\r\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\r\n        }\r\n        else {\r\n            const childChangePath = pathPopFront(changePath);\r\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\r\n            let newChild;\r\n            if (pathIsEmpty(childChangePath)) {\r\n                // Child overwrite, we can replace the child\r\n                newChild = changedSnap;\r\n            }\r\n            else {\r\n                const childNode = source.getCompleteChild(childKey);\r\n                if (childNode != null) {\r\n                    if (pathGetBack(childChangePath) === '.priority' &&\r\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\r\n                        // This is a priority update on an empty node. If this node exists on the server, the\r\n                        // server will send down the priority in the update, so ignore for now\r\n                        newChild = childNode;\r\n                    }\r\n                    else {\r\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\r\n                    }\r\n                }\r\n                else {\r\n                    // There is no complete child node available\r\n                    newChild = ChildrenNode.EMPTY_NODE;\r\n                }\r\n            }\r\n            if (!oldChild.equals(newChild)) {\r\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\r\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\r\n            }\r\n            else {\r\n                newViewCache = oldViewCache;\r\n            }\r\n        }\r\n    }\r\n    return newViewCache;\r\n}\r\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\r\n    return viewCache.eventCache.isCompleteForChild(childKey);\r\n}\r\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    changedChildren.foreach((relativePath, childNode) => {\r\n        const writePath = pathChild(path, relativePath);\r\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\r\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\r\n    merge.foreach((relativePath, childNode) => {\r\n        node = node.updateChild(relativePath, childNode);\r\n    });\r\n    return node;\r\n}\r\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\r\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\r\n    // wait for the complete data update coming soon.\r\n    if (viewCache.serverCache.getNode().isEmpty() &&\r\n        !viewCache.serverCache.isFullyInitialized()) {\r\n        return viewCache;\r\n    }\r\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\r\n    // window leaving room for new items.  It's important we process these changes first, so we\r\n    // iterate the changes twice, first processing any that affect items currently in view.\r\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\r\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\r\n    // not the other.\r\n    let curViewCache = viewCache;\r\n    let viewMergeTree;\r\n    if (pathIsEmpty(path)) {\r\n        viewMergeTree = changedChildren;\r\n    }\r\n    else {\r\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\r\n    }\r\n    const serverNode = viewCache.serverCache.getNode();\r\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\r\n        if (serverNode.hasChild(childKey)) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\r\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\r\n            childMergeTree.value === undefined;\r\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\r\n            const serverChild = viewCache.serverCache\r\n                .getNode()\r\n                .getImmediateChild(childKey);\r\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\r\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\r\n        }\r\n    });\r\n    return curViewCache;\r\n}\r\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\r\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\r\n        return viewCache;\r\n    }\r\n    // Only filter server node if it is currently filtered\r\n    const filterServerNode = viewCache.serverCache.isFiltered();\r\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\r\n    // now that it won't be shadowed.\r\n    const serverCache = viewCache.serverCache;\r\n    if (affectedTree.value != null) {\r\n        // This is an overwrite.\r\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\r\n            serverCache.isCompleteForPath(ackPath)) {\r\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else if (pathIsEmpty(ackPath)) {\r\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\r\n            // should just re-apply whatever we have in our cache as a merge.\r\n            let changedChildren = new ImmutableTree(null);\r\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\r\n                changedChildren = changedChildren.set(new Path(name), node);\r\n            });\r\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n        }\r\n        else {\r\n            return viewCache;\r\n        }\r\n    }\r\n    else {\r\n        // This is a merge.\r\n        let changedChildren = new ImmutableTree(null);\r\n        affectedTree.foreach((mergePath, value) => {\r\n            const serverCachePath = pathChild(ackPath, mergePath);\r\n            if (serverCache.isCompleteForPath(serverCachePath)) {\r\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\r\n            }\r\n        });\r\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\r\n    }\r\n}\r\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\r\n    const oldServerNode = viewCache.serverCache;\r\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\r\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\r\n}\r\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\r\n    let complete;\r\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\r\n        return viewCache;\r\n    }\r\n    else {\r\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\r\n        const oldEventCache = viewCache.eventCache.getNode();\r\n        let newEventCache;\r\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\r\n            let newNode;\r\n            if (viewCache.serverCache.isFullyInitialized()) {\r\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n            }\r\n            else {\r\n                const serverChildren = viewCache.serverCache.getNode();\r\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\r\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\r\n            }\r\n            newNode = newNode;\r\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\r\n        }\r\n        else {\r\n            const childKey = pathGetFront(path);\r\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\r\n            if (newChild == null &&\r\n                viewCache.serverCache.isCompleteForChild(childKey)) {\r\n                newChild = oldEventCache.getImmediateChild(childKey);\r\n            }\r\n            if (newChild != null) {\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\r\n            }\r\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\r\n                // No complete child available, delete the existing one, if any\r\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\r\n            }\r\n            else {\r\n                newEventCache = oldEventCache;\r\n            }\r\n            if (newEventCache.isEmpty() &&\r\n                viewCache.serverCache.isFullyInitialized()) {\r\n                // We might have reverted all child writes. Maybe the old event was a leaf node\r\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\r\n                if (complete.isLeafNode()) {\r\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\r\n                }\r\n            }\r\n        }\r\n        complete =\r\n            viewCache.serverCache.isFullyInitialized() ||\r\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\r\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n */\r\nclass View {\r\n    constructor(query_, initialViewCache) {\r\n        this.query_ = query_;\r\n        this.eventRegistrations_ = [];\r\n        const params = this.query_._queryParams;\r\n        const indexFilter = new IndexedFilter(params.getIndex());\r\n        const filter = queryParamsGetNodeFilter(params);\r\n        this.processor_ = newViewProcessor(filter);\r\n        const initialServerCache = initialViewCache.serverCache;\r\n        const initialEventCache = initialViewCache.eventCache;\r\n        // Don't filter server node with other filter than index, wait for tagged listen\r\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\r\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\r\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\r\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\r\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\r\n        this.eventGenerator_ = new EventGenerator(this.query_);\r\n    }\r\n    get query() {\r\n        return this.query_;\r\n    }\r\n}\r\nfunction viewGetServerCache(view) {\r\n    return view.viewCache_.serverCache.getNode();\r\n}\r\nfunction viewGetCompleteNode(view) {\r\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\r\n}\r\nfunction viewGetCompleteServerCache(view, path) {\r\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\r\n    if (cache) {\r\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\r\n        // we need to see if it contains the child we're interested in.\r\n        if (view.query._queryParams.loadsAllData() ||\r\n            (!pathIsEmpty(path) &&\r\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\r\n            return cache.getChild(path);\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction viewIsEmpty(view) {\r\n    return view.eventRegistrations_.length === 0;\r\n}\r\nfunction viewAddEventRegistration(view, eventRegistration) {\r\n    view.eventRegistrations_.push(eventRegistration);\r\n}\r\n/**\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\r\n    const cancelEvents = [];\r\n    if (cancelError) {\r\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\r\n        const path = view.query._path;\r\n        view.eventRegistrations_.forEach(registration => {\r\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\r\n            if (maybeEvent) {\r\n                cancelEvents.push(maybeEvent);\r\n            }\r\n        });\r\n    }\r\n    if (eventRegistration) {\r\n        let remaining = [];\r\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\r\n            const existing = view.eventRegistrations_[i];\r\n            if (!existing.matches(eventRegistration)) {\r\n                remaining.push(existing);\r\n            }\r\n            else if (eventRegistration.hasAnyCallback()) {\r\n                // We're removing just this one\r\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\r\n                break;\r\n            }\r\n        }\r\n        view.eventRegistrations_ = remaining;\r\n    }\r\n    else {\r\n        view.eventRegistrations_ = [];\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n */\r\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\r\n    if (operation.type === OperationType.MERGE &&\r\n        operation.source.queryId !== null) {\r\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\r\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\r\n    }\r\n    const oldViewCache = view.viewCache_;\r\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\r\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\r\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\r\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\r\n    view.viewCache_ = result.viewCache;\r\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\r\n}\r\nfunction viewGetInitialEvents(view, registration) {\r\n    const eventSnap = view.viewCache_.eventCache;\r\n    const initialChanges = [];\r\n    if (!eventSnap.getNode().isLeafNode()) {\r\n        const eventNode = eventSnap.getNode();\r\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\r\n            initialChanges.push(changeChildAdded(key, childNode));\r\n        });\r\n    }\r\n    if (eventSnap.isFullyInitialized()) {\r\n        initialChanges.push(changeValue(eventSnap.getNode()));\r\n    }\r\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\r\n}\r\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\r\n    const registrations = eventRegistration\r\n        ? [eventRegistration]\r\n        : view.eventRegistrations_;\r\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor$1;\r\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\r\nclass SyncPoint {\r\n    constructor() {\r\n        /**\r\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n         * queryId and the value is the View for that query.\r\n         *\r\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n         */\r\n        this.views = new Map();\r\n    }\r\n}\r\nfunction syncPointSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\r\n    referenceConstructor$1 = val;\r\n}\r\nfunction syncPointGetReferenceConstructor() {\r\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\r\n    return referenceConstructor$1;\r\n}\r\nfunction syncPointIsEmpty(syncPoint) {\r\n    return syncPoint.views.size === 0;\r\n}\r\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\r\n    const queryId = operation.source.queryId;\r\n    if (queryId !== null) {\r\n        const view = syncPoint.views.get(queryId);\r\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\r\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\r\n    }\r\n    else {\r\n        let events = [];\r\n        for (const view of syncPoint.views.values()) {\r\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Get a view for the specified query.\r\n *\r\n * @param query - The query to return a view for\r\n * @param writesCache\r\n * @param serverCache\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\r\n    const queryId = query._queryIdentifier;\r\n    const view = syncPoint.views.get(queryId);\r\n    if (!view) {\r\n        // TODO: make writesCache take flag for complete server node\r\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\r\n        let eventCacheComplete = false;\r\n        if (eventCache) {\r\n            eventCacheComplete = true;\r\n        }\r\n        else if (serverCache instanceof ChildrenNode) {\r\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\r\n            eventCacheComplete = false;\r\n        }\r\n        else {\r\n            eventCache = ChildrenNode.EMPTY_NODE;\r\n            eventCacheComplete = false;\r\n        }\r\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\r\n        return new View(query, viewCache);\r\n    }\r\n    return view;\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @param query\r\n * @param eventRegistration\r\n * @param writesCache\r\n * @param serverCache - Complete server cache, if we have it.\r\n * @param serverCacheComplete\r\n * @returns Events to raise.\r\n */\r\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\r\n    if (!syncPoint.views.has(query._queryIdentifier)) {\r\n        syncPoint.views.set(query._queryIdentifier, view);\r\n    }\r\n    // This is guaranteed to exist now, we just created anything that was missing\r\n    viewAddEventRegistration(view, eventRegistration);\r\n    return viewGetInitialEvents(view, eventRegistration);\r\n}\r\n/**\r\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n *\r\n * If query is the default query, we'll check all views for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n *\r\n * @param eventRegistration - If null, remove all callbacks.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns removed queries and any cancel events\r\n */\r\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\r\n    const queryId = query._queryIdentifier;\r\n    const removed = [];\r\n    let cancelEvents = [];\r\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\r\n    if (queryId === 'default') {\r\n        // When you do ref.off(...), we search all views for the registration to remove.\r\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(viewQueryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // remove the callback from the specific view.\r\n        const view = syncPoint.views.get(queryId);\r\n        if (view) {\r\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\r\n            if (viewIsEmpty(view)) {\r\n                syncPoint.views.delete(queryId);\r\n                // We'll deal with complete views later.\r\n                if (!view.query._queryParams.loadsAllData()) {\r\n                    removed.push(view.query);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\r\n        // We removed our last complete view.\r\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\r\n    }\r\n    return { removed, events: cancelEvents };\r\n}\r\nfunction syncPointGetQueryViews(syncPoint) {\r\n    const result = [];\r\n    for (const view of syncPoint.views.values()) {\r\n        if (!view.query._queryParams.loadsAllData()) {\r\n            result.push(view);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * @param path - The path to the desired complete snapshot\r\n * @returns A complete cache, if it exists\r\n */\r\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\r\n    let serverCache = null;\r\n    for (const view of syncPoint.views.values()) {\r\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\r\n    }\r\n    return serverCache;\r\n}\r\nfunction syncPointViewForQuery(syncPoint, query) {\r\n    const params = query._queryParams;\r\n    if (params.loadsAllData()) {\r\n        return syncPointGetCompleteView(syncPoint);\r\n    }\r\n    else {\r\n        const queryId = query._queryIdentifier;\r\n        return syncPoint.views.get(queryId);\r\n    }\r\n}\r\nfunction syncPointViewExistsForQuery(syncPoint, query) {\r\n    return syncPointViewForQuery(syncPoint, query) != null;\r\n}\r\nfunction syncPointHasCompleteView(syncPoint) {\r\n    return syncPointGetCompleteView(syncPoint) != null;\r\n}\r\nfunction syncPointGetCompleteView(syncPoint) {\r\n    for (const view of syncPoint.views.values()) {\r\n        if (view.query._queryParams.loadsAllData()) {\r\n            return view;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet referenceConstructor;\r\nfunction syncTreeSetReferenceConstructor(val) {\r\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\r\n    referenceConstructor = val;\r\n}\r\nfunction syncTreeGetReferenceConstructor() {\r\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\r\n    return referenceConstructor;\r\n}\r\n/**\r\n * Static tracker for next query tag.\r\n */\r\nlet syncTreeNextQueryTag_ = 1;\r\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n */\r\nclass SyncTree {\r\n    /**\r\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\r\n     *   to server data.\r\n     */\r\n    constructor(listenProvider_) {\r\n        this.listenProvider_ = listenProvider_;\r\n        /**\r\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n         */\r\n        this.syncPointTree_ = new ImmutableTree(null);\r\n        /**\r\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n         */\r\n        this.pendingWriteTree_ = newWriteTree();\r\n        this.tagToQueryMap = new Map();\r\n        this.queryToTagMap = new Map();\r\n    }\r\n}\r\n/**\r\n * Apply the data changes for a user-generated set() or transaction() call.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\r\n    // Record pending write.\r\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\r\n    if (!visible) {\r\n        return [];\r\n    }\r\n    else {\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\r\n    }\r\n}\r\n/**\r\n * Apply the data from a user-generated update() call\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\r\n    // Record pending merge.\r\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\r\n}\r\n/**\r\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n *\r\n * @param revert - True if the given write failed and needs to be reverted\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\r\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\r\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\r\n    if (!needToReevaluate) {\r\n        return [];\r\n    }\r\n    else {\r\n        let affectedTree = new ImmutableTree(null);\r\n        if (write.snap != null) {\r\n            // overwrite\r\n            affectedTree = affectedTree.set(newEmptyPath(), true);\r\n        }\r\n        else {\r\n            each(write.children, (pathString) => {\r\n                affectedTree = affectedTree.set(new Path(pathString), true);\r\n            });\r\n        }\r\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\r\n    }\r\n}\r\n/**\r\n * Apply new server data for the specified path..\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\r\n}\r\n/**\r\n * Apply new server data to be merged in at the specified path.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\r\n    const changeTree = ImmutableTree.fromObject(changedChildren);\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\r\n}\r\n/**\r\n * Apply a listen complete for a query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyListenComplete(syncTree, path) {\r\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\r\n}\r\n/**\r\n * Apply a listen complete for a tagged query\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Remove event callback(s).\r\n *\r\n * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n *\r\n * @param eventRegistration - If null, all callbacks are removed.\r\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\r\n * @returns Cancel events, if cancelError was provided.\r\n */\r\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError) {\r\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\r\n    const path = query._path;\r\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\r\n    let cancelEvents = [];\r\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\r\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\r\n    // not loadsAllData().\r\n    if (maybeSyncPoint &&\r\n        (query._queryIdentifier === 'default' ||\r\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\r\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\r\n        if (syncPointIsEmpty(maybeSyncPoint)) {\r\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\r\n        }\r\n        const removed = removedAndEvents.removed;\r\n        cancelEvents = removedAndEvents.events;\r\n        // We may have just removed one of many listeners and can short-circuit this whole process\r\n        // We may also not have removed a default listener, in which case all of the descendant listeners should already be\r\n        // properly set up.\r\n        //\r\n        // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\r\n        // queryId === 'default'\r\n        const removingDefault = -1 !==\r\n            removed.findIndex(query => {\r\n                return query._queryParams.loadsAllData();\r\n            });\r\n        const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\r\n        if (removingDefault && !covered) {\r\n            const subtree = syncTree.syncPointTree_.subtree(path);\r\n            // There are potentially child listeners. Determine what if any listens we need to send before executing the\r\n            // removal\r\n            if (!subtree.isEmpty()) {\r\n                // We need to fold over our subtree and collect the listeners to send\r\n                const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\r\n                // Ok, we've collected all the listens we need. Set them up.\r\n                for (let i = 0; i < newViews.length; ++i) {\r\n                    const view = newViews[i], newQuery = view.query;\r\n                    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n                    syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);\r\n                }\r\n            }\r\n        }\r\n        // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\r\n        // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\r\n        // Also, note that if we have a cancelError, it's already been removed at the provider level.\r\n        if (!covered && removed.length > 0 && !cancelError) {\r\n            // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\r\n            // default. Otherwise, we need to iterate through and cancel each individual query\r\n            if (removingDefault) {\r\n                // We don't tag default listeners\r\n                const defaultTag = null;\r\n                syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\r\n            }\r\n            else {\r\n                removed.forEach((queryToRemove) => {\r\n                    const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\r\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\r\n                });\r\n            }\r\n        }\r\n        // Now, clear all of the tags we're tracking for the removed listens\r\n        syncTreeRemoveTags_(syncTree, removed);\r\n    }\r\n    return cancelEvents;\r\n}\r\n/**\r\n * Apply new server data for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey != null) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // Query must have been removed already\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Apply server data to be merged in for the specified tagged query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\r\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\r\n    if (queryKey) {\r\n        const r = syncTreeParseQueryKey_(queryKey);\r\n        const queryPath = r.path, queryId = r.queryId;\r\n        const relativePath = newRelativePath(queryPath, path);\r\n        const changeTree = ImmutableTree.fromObject(changedChildren);\r\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\r\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\r\n    }\r\n    else {\r\n        // We've already removed the query. No big deal, ignore the update\r\n        return [];\r\n    }\r\n}\r\n/**\r\n * Add an event callback for the specified query.\r\n *\r\n * @returns Events to raise.\r\n */\r\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    let foundAncestorDefaultView = false;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        foundAncestorDefaultView =\r\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let serverCacheComplete;\r\n    if (serverCache != null) {\r\n        serverCacheComplete = true;\r\n    }\r\n    else {\r\n        serverCacheComplete = false;\r\n        serverCache = ChildrenNode.EMPTY_NODE;\r\n        const subtree = syncTree.syncPointTree_.subtree(path);\r\n        subtree.foreachChild((childName, childSyncPoint) => {\r\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\r\n            if (completeCache) {\r\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\r\n            }\r\n        });\r\n    }\r\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\r\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\r\n        // We need to track a tag for this query\r\n        const queryKey = syncTreeMakeQueryKey_(query);\r\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\r\n        const tag = syncTreeGetNextQueryTag_();\r\n        syncTree.queryToTagMap.set(queryKey, tag);\r\n        syncTree.tagToQueryMap.set(tag, queryKey);\r\n    }\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\r\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\r\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\r\n        const view = syncPointViewForQuery(syncPoint, query);\r\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\r\n    }\r\n    return events;\r\n}\r\n/**\r\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n *\r\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n *\r\n * @param path - The path to the data we want\r\n * @param writeIdsToExclude - A specific set to be excluded\r\n */\r\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\r\n    const includeHiddenSets = true;\r\n    const writeTree = syncTree.pendingWriteTree_;\r\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\r\n        const relativePath = newRelativePath(pathSoFar, path);\r\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\r\n        if (serverCache) {\r\n            return serverCache;\r\n        }\r\n    });\r\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\r\n}\r\nfunction syncTreeGetServerValue(syncTree, query) {\r\n    const path = query._path;\r\n    let serverCache = null;\r\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\r\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\r\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\r\n        const relativePath = newRelativePath(pathToSyncPoint, path);\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\r\n    });\r\n    let syncPoint = syncTree.syncPointTree_.get(path);\r\n    if (!syncPoint) {\r\n        syncPoint = new SyncPoint();\r\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\r\n    }\r\n    else {\r\n        serverCache =\r\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    const serverCacheComplete = serverCache != null;\r\n    const serverCacheNode = serverCacheComplete\r\n        ? new CacheNode(serverCache, true, false)\r\n        : null;\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\r\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\r\n    return viewGetCompleteNode(view);\r\n}\r\n/**\r\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n *\r\n * NOTES:\r\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n *\r\n * - We call applyOperation() on each SyncPoint passing three things:\r\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n *   3. A snapshot Node with cached server data, if we have it.\r\n *\r\n * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n */\r\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\r\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \r\n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    if (pathIsEmpty(operation.path)) {\r\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\r\n    }\r\n    else {\r\n        const syncPoint = syncPointTree.get(newEmptyPath());\r\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n        if (serverCache == null && syncPoint != null) {\r\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n        }\r\n        let events = [];\r\n        const childName = pathGetFront(operation.path);\r\n        const childOperation = operation.operationForChild(childName);\r\n        const childTree = syncPointTree.children.get(childName);\r\n        if (childTree && childOperation) {\r\n            const childServerCache = serverCache\r\n                ? serverCache.getImmediateChild(childName)\r\n                : null;\r\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n        if (syncPoint) {\r\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n        }\r\n        return events;\r\n    }\r\n}\r\n/**\r\n * Recursive helper for applyOperationToSyncPoints_\r\n */\r\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\r\n    const syncPoint = syncPointTree.get(newEmptyPath());\r\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\r\n    if (serverCache == null && syncPoint != null) {\r\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\r\n    }\r\n    let events = [];\r\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\r\n        const childServerCache = serverCache\r\n            ? serverCache.getImmediateChild(childName)\r\n            : null;\r\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\r\n        const childOperation = operation.operationForChild(childName);\r\n        if (childOperation) {\r\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\r\n        }\r\n    });\r\n    if (syncPoint) {\r\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\r\n    }\r\n    return events;\r\n}\r\nfunction syncTreeCreateListenerForView_(syncTree, view) {\r\n    const query = view.query;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    return {\r\n        hashFn: () => {\r\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\r\n            return cache.hash();\r\n        },\r\n        onComplete: (status) => {\r\n            if (status === 'ok') {\r\n                if (tag) {\r\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\r\n                }\r\n                else {\r\n                    return syncTreeApplyListenComplete(syncTree, query._path);\r\n                }\r\n            }\r\n            else {\r\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\r\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\r\n                const error = errorForServerCode(status, query);\r\n                return syncTreeRemoveEventRegistration(syncTree, query, \r\n                /*eventRegistration*/ null, error);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * Return the tag associated with the given query.\r\n */\r\nfunction syncTreeTagForQuery_(syncTree, query) {\r\n    const queryKey = syncTreeMakeQueryKey_(query);\r\n    return syncTree.queryToTagMap.get(queryKey);\r\n}\r\n/**\r\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n */\r\nfunction syncTreeMakeQueryKey_(query) {\r\n    return query._path.toString() + '$' + query._queryIdentifier;\r\n}\r\n/**\r\n * Return the query associated with the given tag, if we have one\r\n */\r\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\r\n    return syncTree.tagToQueryMap.get(tag);\r\n}\r\n/**\r\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n */\r\nfunction syncTreeParseQueryKey_(queryKey) {\r\n    const splitIndex = queryKey.indexOf('$');\r\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\r\n    return {\r\n        queryId: queryKey.substr(splitIndex + 1),\r\n        path: new Path(queryKey.substr(0, splitIndex))\r\n    };\r\n}\r\n/**\r\n * A helper method to apply tagged operations\r\n */\r\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\r\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\r\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\r\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\r\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\r\n}\r\n/**\r\n * This collapses multiple unfiltered views into a single view, since we only need a single\r\n * listener for them.\r\n */\r\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\r\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\r\n            return [completeView];\r\n        }\r\n        else {\r\n            // No complete view here, flatten any deeper listens into an array\r\n            let views = [];\r\n            if (maybeChildSyncPoint) {\r\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\r\n            }\r\n            each(childMap, (_key, childViews) => {\r\n                views = views.concat(childViews);\r\n            });\r\n            return views;\r\n        }\r\n    });\r\n}\r\n/**\r\n * Normalizes a query to a query we send the server for listening\r\n *\r\n * @returns The normalized query\r\n */\r\nfunction syncTreeQueryForListening_(query) {\r\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\r\n        // We treat queries that load all data as default queries\r\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\r\n        // from Query\r\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\r\n    }\r\n    else {\r\n        return query;\r\n    }\r\n}\r\nfunction syncTreeRemoveTags_(syncTree, queries) {\r\n    for (let j = 0; j < queries.length; ++j) {\r\n        const removedQuery = queries[j];\r\n        if (!removedQuery._queryParams.loadsAllData()) {\r\n            // We should have a tag for this\r\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\r\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\r\n            syncTree.queryToTagMap.delete(removedQueryKey);\r\n            syncTree.tagToQueryMap.delete(removedQueryTag);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Static accessor for query tags.\r\n */\r\nfunction syncTreeGetNextQueryTag_() {\r\n    return syncTreeNextQueryTag_++;\r\n}\r\n/**\r\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n *\r\n * @returns This method can return events to support synchronous data sources\r\n */\r\nfunction syncTreeSetupListener_(syncTree, query, view) {\r\n    const path = query._path;\r\n    const tag = syncTreeTagForQuery_(syncTree, query);\r\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\r\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\r\n    const subtree = syncTree.syncPointTree_.subtree(path);\r\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\r\n    // may need to shadow other listens as well.\r\n    if (tag) {\r\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\r\n    }\r\n    else {\r\n        // Shadow everything at or below this location, this is a default listener.\r\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\r\n            if (!pathIsEmpty(relativePath) &&\r\n                maybeChildSyncPoint &&\r\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\r\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\r\n            }\r\n            else {\r\n                // No default listener here, flatten any deeper queries into an array\r\n                let queries = [];\r\n                if (maybeChildSyncPoint) {\r\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\r\n                }\r\n                each(childMap, (_key, childQueries) => {\r\n                    queries = queries.concat(childQueries);\r\n                });\r\n                return queries;\r\n            }\r\n        });\r\n        for (let i = 0; i < queriesToStop.length; ++i) {\r\n            const queryToStop = queriesToStop[i];\r\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));\r\n        }\r\n    }\r\n    return events;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass ExistingValueProvider {\r\n    constructor(node_) {\r\n        this.node_ = node_;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const child = this.node_.getImmediateChild(childName);\r\n        return new ExistingValueProvider(child);\r\n    }\r\n    node() {\r\n        return this.node_;\r\n    }\r\n}\r\nclass DeferredValueProvider {\r\n    constructor(syncTree, path) {\r\n        this.syncTree_ = syncTree;\r\n        this.path_ = path;\r\n    }\r\n    getImmediateChild(childName) {\r\n        const childPath = pathChild(this.path_, childName);\r\n        return new DeferredValueProvider(this.syncTree_, childPath);\r\n    }\r\n    node() {\r\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\r\n    }\r\n}\r\n/**\r\n * Generate placeholders for deferred values.\r\n */\r\nconst generateWithValues = function (values) {\r\n    values = values || {};\r\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\r\n    return values;\r\n};\r\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n */\r\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\r\n    if (!value || typeof value !== 'object') {\r\n        return value;\r\n    }\r\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\r\n    if (typeof value['.sv'] === 'string') {\r\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\r\n    }\r\n    else if (typeof value['.sv'] === 'object') {\r\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\r\n    }\r\n    else {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\r\n    }\r\n};\r\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\r\n    switch (op) {\r\n        case 'timestamp':\r\n            return serverValues['timestamp'];\r\n        default:\r\n            assert(false, 'Unexpected server value: ' + op);\r\n    }\r\n};\r\nconst resolveComplexDeferredValue = function (op, existing, unused) {\r\n    if (!op.hasOwnProperty('increment')) {\r\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\r\n    }\r\n    const delta = op['increment'];\r\n    if (typeof delta !== 'number') {\r\n        assert(false, 'Unexpected increment value: ' + delta);\r\n    }\r\n    const existingNode = existing.node();\r\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\r\n    // Incrementing a non-number sets the value to the incremented amount\r\n    if (!existingNode.isLeafNode()) {\r\n        return delta;\r\n    }\r\n    const leaf = existingNode;\r\n    const existingVal = leaf.getValue();\r\n    if (typeof existingVal !== 'number') {\r\n        return delta;\r\n    }\r\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\r\n    return existingVal + delta;\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param path - path to which write is relative\r\n * @param node - new data written at path\r\n * @param syncTree - current data\r\n */\r\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\r\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\r\n};\r\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n */\r\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\r\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\r\n};\r\nfunction resolveDeferredValue(node, existingVal, serverValues) {\r\n    const rawPri = node.getPriority().val();\r\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\r\n    let newNode;\r\n    if (node.isLeafNode()) {\r\n        const leafNode = node;\r\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\r\n        if (value !== leafNode.getValue() ||\r\n            priority !== leafNode.getPriority().val()) {\r\n            return new LeafNode(value, nodeFromJSON(priority));\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n    }\r\n    else {\r\n        const childrenNode = node;\r\n        newNode = childrenNode;\r\n        if (priority !== childrenNode.getPriority().val()) {\r\n            newNode = newNode.updatePriority(new LeafNode(priority));\r\n        }\r\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\r\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\r\n            if (newChildNode !== childNode) {\r\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\r\n            }\r\n        });\r\n        return newNode;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\r\nclass Tree {\r\n    /**\r\n     * @param name - Optional name of the node.\r\n     * @param parent - Optional parent node.\r\n     * @param node - Optional node to wrap.\r\n     */\r\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\r\n        this.name = name;\r\n        this.parent = parent;\r\n        this.node = node;\r\n    }\r\n}\r\n/**\r\n * Returns a sub-Tree for the given path.\r\n *\r\n * @param pathObj - Path to look up.\r\n * @returns Tree for path.\r\n */\r\nfunction treeSubTree(tree, pathObj) {\r\n    // TODO: Require pathObj to be Path?\r\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\r\n    let child = tree, next = pathGetFront(path);\r\n    while (next !== null) {\r\n        const childNode = safeGet(child.node.children, next) || {\r\n            children: {},\r\n            childCount: 0\r\n        };\r\n        child = new Tree(next, child, childNode);\r\n        path = pathPopFront(path);\r\n        next = pathGetFront(path);\r\n    }\r\n    return child;\r\n}\r\n/**\r\n * Returns the data associated with this tree node.\r\n *\r\n * @returns The data or null if no data exists.\r\n */\r\nfunction treeGetValue(tree) {\r\n    return tree.node.value;\r\n}\r\n/**\r\n * Sets data to this tree node.\r\n *\r\n * @param value - Value to set.\r\n */\r\nfunction treeSetValue(tree, value) {\r\n    tree.node.value = value;\r\n    treeUpdateParents(tree);\r\n}\r\n/**\r\n * @returns Whether the tree has any children.\r\n */\r\nfunction treeHasChildren(tree) {\r\n    return tree.node.childCount > 0;\r\n}\r\n/**\r\n * @returns Whethe rthe tree is empty (no value or children).\r\n */\r\nfunction treeIsEmpty(tree) {\r\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\r\n}\r\n/**\r\n * Calls action for each child of this tree node.\r\n *\r\n * @param action - Action to be called for each child.\r\n */\r\nfunction treeForEachChild(tree, action) {\r\n    each(tree.node.children, (child, childTree) => {\r\n        action(new Tree(child, tree, childTree));\r\n    });\r\n}\r\n/**\r\n * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n *\r\n * @param action - Action to be called for each child.\r\n * @param includeSelf - Whether to call action on this node as well. Defaults to\r\n *   false.\r\n * @param childrenFirst - Whether to call action on children before calling it on\r\n *   parent.\r\n */\r\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\r\n    if (includeSelf && !childrenFirst) {\r\n        action(tree);\r\n    }\r\n    treeForEachChild(tree, child => {\r\n        treeForEachDescendant(child, action, true, childrenFirst);\r\n    });\r\n    if (includeSelf && childrenFirst) {\r\n        action(tree);\r\n    }\r\n}\r\n/**\r\n * Calls action on each ancestor node.\r\n *\r\n * @param action - Action to be called on each parent; return\r\n *   true to abort.\r\n * @param includeSelf - Whether to call action on this node as well.\r\n * @returns true if the action callback returned true.\r\n */\r\nfunction treeForEachAncestor(tree, action, includeSelf) {\r\n    let node = includeSelf ? tree : tree.parent;\r\n    while (node !== null) {\r\n        if (action(node)) {\r\n            return true;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * @returns The path of this tree node, as a Path.\r\n */\r\nfunction treeGetPath(tree) {\r\n    return new Path(tree.parent === null\r\n        ? tree.name\r\n        : treeGetPath(tree.parent) + '/' + tree.name);\r\n}\r\n/**\r\n * Adds or removes this child from its parent based on whether it's empty or not.\r\n */\r\nfunction treeUpdateParents(tree) {\r\n    if (tree.parent !== null) {\r\n        treeUpdateChild(tree.parent, tree.name, tree);\r\n    }\r\n}\r\n/**\r\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n *\r\n * @param childName - The name of the child to update.\r\n * @param child - The child to update.\r\n */\r\nfunction treeUpdateChild(tree, childName, child) {\r\n    const childEmpty = treeIsEmpty(child);\r\n    const childExists = contains(tree.node.children, childName);\r\n    if (childEmpty && childExists) {\r\n        delete tree.node.children[childName];\r\n        tree.node.childCount--;\r\n        treeUpdateParents(tree);\r\n    }\r\n    else if (!childEmpty && !childExists) {\r\n        tree.node.children[childName] = child.node;\r\n        tree.node.childCount++;\r\n        treeUpdateParents(tree);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * True for invalid Firebase keys\r\n */\r\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n */\r\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\r\n/**\r\n * Maximum number of characters to allow in leaf value\r\n */\r\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\r\nconst isValidKey = function (key) {\r\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\r\n};\r\nconst isValidPathString = function (pathString) {\r\n    return (typeof pathString === 'string' &&\r\n        pathString.length !== 0 &&\r\n        !INVALID_PATH_REGEX_.test(pathString));\r\n};\r\nconst isValidRootPathString = function (pathString) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    return isValidPathString(pathString);\r\n};\r\nconst isValidPriority = function (priority) {\r\n    return (priority === null ||\r\n        typeof priority === 'string' ||\r\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\r\n        (priority &&\r\n            typeof priority === 'object' &&\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            contains(priority, '.sv')));\r\n};\r\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n */\r\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\r\n    if (optional && value === undefined) {\r\n        return;\r\n    }\r\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\r\n};\r\n/**\r\n * Validate a data object client-side before sending to server.\r\n */\r\nconst validateFirebaseData = function (errorPrefix, data, path_) {\r\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\r\n    if (data === undefined) {\r\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\r\n    }\r\n    if (typeof data === 'function') {\r\n        throw new Error(errorPrefix +\r\n            'contains a function ' +\r\n            validationPathToErrorString(path) +\r\n            ' with contents = ' +\r\n            data.toString());\r\n    }\r\n    if (isInvalidJSONNumber(data)) {\r\n        throw new Error(errorPrefix +\r\n            'contains ' +\r\n            data.toString() +\r\n            ' ' +\r\n            validationPathToErrorString(path));\r\n    }\r\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\r\n    if (typeof data === 'string' &&\r\n        data.length > MAX_LEAF_SIZE_ / 3 &&\r\n        stringLength(data) > MAX_LEAF_SIZE_) {\r\n        throw new Error(errorPrefix +\r\n            'contains a string greater than ' +\r\n            MAX_LEAF_SIZE_ +\r\n            ' utf8 bytes ' +\r\n            validationPathToErrorString(path) +\r\n            \" ('\" +\r\n            data.substring(0, 50) +\r\n            \"...')\");\r\n    }\r\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\r\n    // to save extra walking of large objects.\r\n    if (data && typeof data === 'object') {\r\n        let hasDotValue = false;\r\n        let hasActualChild = false;\r\n        each(data, (key, value) => {\r\n            if (key === '.value') {\r\n                hasDotValue = true;\r\n            }\r\n            else if (key !== '.priority' && key !== '.sv') {\r\n                hasActualChild = true;\r\n                if (!isValidKey(key)) {\r\n                    throw new Error(errorPrefix +\r\n                        ' contains an invalid key (' +\r\n                        key +\r\n                        ') ' +\r\n                        validationPathToErrorString(path) +\r\n                        '.  Keys must be non-empty strings ' +\r\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n                }\r\n            }\r\n            validationPathPush(path, key);\r\n            validateFirebaseData(errorPrefix, value, path);\r\n            validationPathPop(path);\r\n        });\r\n        if (hasDotValue && hasActualChild) {\r\n            throw new Error(errorPrefix +\r\n                ' contains \".value\" child ' +\r\n                validationPathToErrorString(path) +\r\n                ' in addition to actual children.');\r\n        }\r\n    }\r\n};\r\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n */\r\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\r\n    let i, curPath;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        const keys = pathSlice(curPath);\r\n        for (let j = 0; j < keys.length; j++) {\r\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\r\n            else if (!isValidKey(keys[j])) {\r\n                throw new Error(errorPrefix +\r\n                    'contains an invalid key (' +\r\n                    keys[j] +\r\n                    ') in path ' +\r\n                    curPath.toString() +\r\n                    '. Keys must be non-empty strings ' +\r\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\r\n            }\r\n        }\r\n    }\r\n    // Check that update keys are not descendants of each other.\r\n    // We rely on the property that sorting guarantees that ancestors come\r\n    // right before descendants.\r\n    mergePaths.sort(pathCompare);\r\n    let prevPath = null;\r\n    for (i = 0; i < mergePaths.length; i++) {\r\n        curPath = mergePaths[i];\r\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\r\n            throw new Error(errorPrefix +\r\n                'contains a path ' +\r\n                prevPath.toString() +\r\n                ' that is ancestor of another path ' +\r\n                curPath.toString());\r\n        }\r\n        prevPath = curPath;\r\n    }\r\n};\r\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n */\r\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\r\n    if (optional && data === undefined) {\r\n        return;\r\n    }\r\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\r\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\r\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\r\n    }\r\n    const mergePaths = [];\r\n    each(data, (key, value) => {\r\n        const curPath = new Path(key);\r\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\r\n        if (pathGetBack(curPath) === '.priority') {\r\n            if (!isValidPriority(value)) {\r\n                throw new Error(errorPrefix$1 +\r\n                    \"contains an invalid value for '\" +\r\n                    curPath.toString() +\r\n                    \"', which must be a valid \" +\r\n                    'Firebase priority (a string, finite number, server value, or null).');\r\n            }\r\n        }\r\n        mergePaths.push(curPath);\r\n    });\r\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\r\n};\r\nconst validatePriority = function (fnName, priority, optional) {\r\n    if (optional && priority === undefined) {\r\n        return;\r\n    }\r\n    if (isInvalidJSONNumber(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'is ' +\r\n            priority.toString() +\r\n            ', but must be a valid Firebase priority (a string, finite number, ' +\r\n            'server value, or null).');\r\n    }\r\n    // Special case to allow importing data with a .sv.\r\n    if (!isValidPriority(priority)) {\r\n        throw new Error(errorPrefix(fnName, 'priority') +\r\n            'must be a valid Firebase priority ' +\r\n            '(a string, finite number, server value, or null).');\r\n    }\r\n};\r\nconst validateKey = function (fnName, argumentName, key, optional) {\r\n    if (optional && key === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidKey(key)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid key = \"' +\r\n            key +\r\n            '\".  Firebase keys must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\r\n    if (optional && pathString === undefined) {\r\n        return;\r\n    }\r\n    if (!isValidPathString(pathString)) {\r\n        throw new Error(errorPrefix(fnName, argumentName) +\r\n            'was an invalid path = \"' +\r\n            pathString +\r\n            '\". Paths must be non-empty strings and ' +\r\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\r\n    }\r\n};\r\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\r\n    if (pathString) {\r\n        // Allow '/.info/' at the beginning.\r\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\r\n    }\r\n    validatePathString(fnName, argumentName, pathString, optional);\r\n};\r\n/**\r\n * @internal\r\n */\r\nconst validateWritablePath = function (fnName, path) {\r\n    if (pathGetFront(path) === '.info') {\r\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\r\n    }\r\n};\r\nconst validateUrl = function (fnName, parsedUrl) {\r\n    // TODO = Validate server better.\r\n    const pathString = parsedUrl.path.toString();\r\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\r\n        parsedUrl.repoInfo.host.length === 0 ||\r\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\r\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\r\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\r\n        throw new Error(errorPrefix(fnName, 'url') +\r\n            'must be a valid firebase URL and ' +\r\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\r\n    }\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n */\r\nclass EventQueue {\r\n    constructor() {\r\n        this.eventLists_ = [];\r\n        /**\r\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n         */\r\n        this.recursionDepth_ = 0;\r\n    }\r\n}\r\n/**\r\n * @param eventDataList - The new events to queue.\r\n */\r\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\r\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\r\n    let currList = null;\r\n    for (let i = 0; i < eventDataList.length; i++) {\r\n        const data = eventDataList[i];\r\n        const path = data.getPath();\r\n        if (currList !== null && !pathEquals(path, currList.path)) {\r\n            eventQueue.eventLists_.push(currList);\r\n            currList = null;\r\n        }\r\n        if (currList === null) {\r\n            currList = { events: [], path };\r\n        }\r\n        currList.events.push(data);\r\n    }\r\n    if (currList) {\r\n        eventQueue.eventLists_.push(currList);\r\n    }\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n * for the specified path.\r\n *\r\n * It is assumed that the new events are all for the specified path.\r\n *\r\n * @param path - The path to raise events for.\r\n * @param eventDataList - The new events to raise.\r\n */\r\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\r\n}\r\n/**\r\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n * locations related to the specified change path (i.e. all ancestors and descendants).\r\n *\r\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n *\r\n * @param changedPath - The path to raise events for.\r\n * @param eventDataList - The events to raise\r\n */\r\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\r\n    eventQueueQueueEvents(eventQueue, eventDataList);\r\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\r\n        pathContains(changedPath, eventPath));\r\n}\r\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\r\n    eventQueue.recursionDepth_++;\r\n    let sentAll = true;\r\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\r\n        const eventList = eventQueue.eventLists_[i];\r\n        if (eventList) {\r\n            const eventPath = eventList.path;\r\n            if (predicate(eventPath)) {\r\n                eventListRaise(eventQueue.eventLists_[i]);\r\n                eventQueue.eventLists_[i] = null;\r\n            }\r\n            else {\r\n                sentAll = false;\r\n            }\r\n        }\r\n    }\r\n    if (sentAll) {\r\n        eventQueue.eventLists_ = [];\r\n    }\r\n    eventQueue.recursionDepth_--;\r\n}\r\n/**\r\n * Iterates through the list and raises each event\r\n */\r\nfunction eventListRaise(eventList) {\r\n    for (let i = 0; i < eventList.events.length; i++) {\r\n        const eventData = eventList.events[i];\r\n        if (eventData !== null) {\r\n            eventList.events[i] = null;\r\n            const eventFn = eventData.getEventRunner();\r\n            if (logger) {\r\n                log('event: ' + eventData.toString());\r\n            }\r\n            exceptionGuard(eventFn);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst INTERRUPT_REASON = 'repo_interrupt';\r\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it. Among other\r\n * things this ensure that if there's ever a bug causing a mismatch between\r\n * client / server hashes for some data, we won't retry indefinitely.\r\n */\r\nconst MAX_TRANSACTION_RETRIES = 25;\r\n/**\r\n * A connection to a single data repository.\r\n */\r\nclass Repo {\r\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\r\n        this.repoInfo_ = repoInfo_;\r\n        this.forceRestClient_ = forceRestClient_;\r\n        this.authTokenProvider_ = authTokenProvider_;\r\n        this.appCheckProvider_ = appCheckProvider_;\r\n        this.dataUpdateCount = 0;\r\n        this.statsListener_ = null;\r\n        this.eventQueue_ = new EventQueue();\r\n        this.nextWriteId_ = 1;\r\n        this.interceptServerDataCallback_ = null;\r\n        /** A list of data pieces and paths to be set when this client disconnects. */\r\n        this.onDisconnect_ = newSparseSnapshotTree();\r\n        /** Stores queues of outstanding transactions for Firebase locations. */\r\n        this.transactionQueueTree_ = new Tree();\r\n        // TODO: This should be @private but it's used by test_access.js and internal.js\r\n        this.persistentConnection_ = null;\r\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\r\n        this.key = this.repoInfo_.toURLString();\r\n    }\r\n    /**\r\n     * @returns The URL corresponding to the root of this Firebase.\r\n     */\r\n    toString() {\r\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\r\n    }\r\n}\r\nfunction repoStart(repo, appId, authOverride) {\r\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\r\n    if (repo.forceRestClient_ || beingCrawled()) {\r\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\r\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\r\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\r\n    }\r\n    else {\r\n        // Validate authOverride\r\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\r\n            if (typeof authOverride !== 'object') {\r\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\r\n            }\r\n            try {\r\n                stringify(authOverride);\r\n            }\r\n            catch (e) {\r\n                throw new Error('Invalid authOverride provided: ' + e);\r\n            }\r\n        }\r\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\r\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\r\n        }, (connectStatus) => {\r\n            repoOnConnectStatus(repo, connectStatus);\r\n        }, (updates) => {\r\n            repoOnServerInfoUpdate(repo, updates);\r\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\r\n        repo.server_ = repo.persistentConnection_;\r\n    }\r\n    repo.authTokenProvider_.addTokenChangeListener(token => {\r\n        repo.server_.refreshAuthToken(token);\r\n    });\r\n    repo.appCheckProvider_.addTokenChangeListener(result => {\r\n        repo.server_.refreshAppCheckToken(result.token);\r\n    });\r\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\r\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\r\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\r\n    // Used for .info.\r\n    repo.infoData_ = new SnapshotHolder();\r\n    repo.infoSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            let infoEvents = [];\r\n            const node = repo.infoData_.getNode(query._path);\r\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\r\n            // on initial data...\r\n            if (!node.isEmpty()) {\r\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\r\n                setTimeout(() => {\r\n                    onComplete('ok');\r\n                }, 0);\r\n            }\r\n            return infoEvents;\r\n        },\r\n        stopListening: () => { }\r\n    });\r\n    repoUpdateInfo(repo, 'connected', false);\r\n    repo.serverSyncTree_ = new SyncTree({\r\n        startListening: (query, tag, currentHashFn, onComplete) => {\r\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\r\n                const events = onComplete(status, data);\r\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\r\n            });\r\n            // No synchronous events for network-backed sync trees\r\n            return [];\r\n        },\r\n        stopListening: (query, tag) => {\r\n            repo.server_.unlisten(query, tag);\r\n        }\r\n    });\r\n}\r\n/**\r\n * @returns The time in milliseconds, taking the server offset into account if we have one.\r\n */\r\nfunction repoServerTime(repo) {\r\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\r\n    const offset = offsetNode.val() || 0;\r\n    return new Date().getTime() + offset;\r\n}\r\n/**\r\n * Generate ServerValues using some variables from the repo object.\r\n */\r\nfunction repoGenerateServerValues(repo) {\r\n    return generateWithValues({\r\n        timestamp: repoServerTime(repo)\r\n    });\r\n}\r\n/**\r\n * Called by realtime when we get new messages from the server.\r\n */\r\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\r\n    // For testing.\r\n    repo.dataUpdateCount++;\r\n    const path = new Path(pathString);\r\n    data = repo.interceptServerDataCallback_\r\n        ? repo.interceptServerDataCallback_(pathString, data)\r\n        : data;\r\n    let events = [];\r\n    if (tag) {\r\n        if (isMerge) {\r\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\r\n        }\r\n        else {\r\n            const taggedSnap = nodeFromJSON(data);\r\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\r\n        }\r\n    }\r\n    else if (isMerge) {\r\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\r\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\r\n    }\r\n    else {\r\n        const snap = nodeFromJSON(data);\r\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\r\n    }\r\n    let affectedPath = path;\r\n    if (events.length > 0) {\r\n        // Since we have a listener outstanding for each transaction, receiving any events\r\n        // is a proxy for some change having occurred.\r\n        affectedPath = repoRerunTransactions(repo, path);\r\n    }\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\r\n}\r\nfunction repoOnConnectStatus(repo, connectStatus) {\r\n    repoUpdateInfo(repo, 'connected', connectStatus);\r\n    if (connectStatus === false) {\r\n        repoRunOnDisconnectEvents(repo);\r\n    }\r\n}\r\nfunction repoOnServerInfoUpdate(repo, updates) {\r\n    each(updates, (key, value) => {\r\n        repoUpdateInfo(repo, key, value);\r\n    });\r\n}\r\nfunction repoUpdateInfo(repo, pathString, value) {\r\n    const path = new Path('/.info/' + pathString);\r\n    const newNode = nodeFromJSON(value);\r\n    repo.infoData_.updateSnapshot(path, newNode);\r\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n}\r\nfunction repoGetNextWriteId(repo) {\r\n    return repo.nextWriteId_++;\r\n}\r\n/**\r\n * The purpose of `getValue` is to return the latest known value\r\n * satisfying `query`.\r\n *\r\n * This method will first check for in-memory cached values\r\n * belonging to active listeners. If they are found, such values\r\n * are considered to be the most up-to-date.\r\n *\r\n * If the client is not connected, this method will try to\r\n * establish a connection and request the value for `query`. If\r\n * the client is not able to retrieve the query result, it reports\r\n * an error.\r\n *\r\n * @param query - The query to surface a value for.\r\n */\r\nfunction repoGetValue(repo, query) {\r\n    // Only active queries are cached. There is no persisted cache.\r\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\r\n    if (cached != null) {\r\n        return Promise.resolve(cached);\r\n    }\r\n    return repo.server_.get(query).then(payload => {\r\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\r\n        const events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\r\n        eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n        return Promise.resolve(node);\r\n    }, err => {\r\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\r\n        return Promise.reject(new Error(err));\r\n    });\r\n}\r\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\r\n    repoLog(repo, 'set', {\r\n        path: path.toString(),\r\n        value: newVal,\r\n        priority: newPriority\r\n    });\r\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\r\n    // (b) store unresolved paths on JSON parse\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\r\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\r\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\r\n    const writeId = repoGetNextWriteId(repo);\r\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\r\n    eventQueueQueueEvents(repo.eventQueue_, events);\r\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\r\n        const success = status === 'ok';\r\n        if (!success) {\r\n            warn('set at ' + path + ' failed: ' + status);\r\n        }\r\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n    const affectedPath = repoAbortTransactions(repo, path);\r\n    repoRerunTransactions(repo, affectedPath);\r\n    // We queued the events above, so just flush the queue here\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\r\n}\r\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\r\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\r\n    // Start with our existing data and merge each child into it.\r\n    let empty = true;\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const changedChildren = {};\r\n    each(childrenToMerge, (changedKey, changedValue) => {\r\n        empty = false;\r\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\r\n    });\r\n    if (!empty) {\r\n        const writeId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\r\n        eventQueueQueueEvents(repo.eventQueue_, events);\r\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n            const success = status === 'ok';\r\n            if (!success) {\r\n                warn('update at ' + path + ' failed: ' + status);\r\n            }\r\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\r\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\r\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n        });\r\n        each(childrenToMerge, (changedPath) => {\r\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\r\n            repoRerunTransactions(repo, affectedPath);\r\n        });\r\n        // We queued the events above, so just flush the queue here\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\r\n    }\r\n    else {\r\n        log(\"update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n    }\r\n}\r\n/**\r\n * Applies all of the changes stored up in the onDisconnect_ tree.\r\n */\r\nfunction repoRunOnDisconnectEvents(repo) {\r\n    repoLog(repo, 'onDisconnectEvents');\r\n    const serverValues = repoGenerateServerValues(repo);\r\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\r\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\r\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\r\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\r\n    });\r\n    let events = [];\r\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\r\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\r\n        const affectedPath = repoAbortTransactions(repo, path);\r\n        repoRerunTransactions(repo, affectedPath);\r\n    });\r\n    repo.onDisconnect_ = newSparseSnapshotTree();\r\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\r\n}\r\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\r\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\r\n    const newNode = nodeFromJSON(value);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\r\n    const newNode = nodeFromJSON(value, priority);\r\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\r\n    if (isEmpty(childrenToMerge)) {\r\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\r\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\r\n        return;\r\n    }\r\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\r\n        if (status === 'ok') {\r\n            each(childrenToMerge, (childName, childNode) => {\r\n                const newChildNode = nodeFromJSON(childNode);\r\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\r\n            });\r\n        }\r\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\r\n    });\r\n}\r\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\r\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\r\n    // a little bit by handling the return values anyways.\r\n    let events;\r\n    if (pathGetFront(query._path) === '.info') {\r\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\r\n    }\r\n    else {\r\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\r\n    }\r\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\r\n}\r\nfunction repoInterrupt(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoResume(repo) {\r\n    if (repo.persistentConnection_) {\r\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\r\n    }\r\n}\r\nfunction repoLog(repo, ...varArgs) {\r\n    let prefix = '';\r\n    if (repo.persistentConnection_) {\r\n        prefix = repo.persistentConnection_.id + ':';\r\n    }\r\n    log(prefix, ...varArgs);\r\n}\r\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\r\n    if (callback) {\r\n        exceptionGuard(() => {\r\n            if (status === 'ok') {\r\n                callback(null);\r\n            }\r\n            else {\r\n                const code = (status || 'error').toUpperCase();\r\n                let message = code;\r\n                if (errorReason) {\r\n                    message += ': ' + errorReason;\r\n                }\r\n                const error = new Error(message);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                error.code = code;\r\n                callback(error);\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and\r\n * sends it to the server if possible.\r\n *\r\n * @param path - Path at which to do transaction.\r\n * @param transactionUpdate - Update callback.\r\n * @param onComplete - Completion callback.\r\n * @param unwatcher - Function that will be called when the transaction no longer\r\n * need data updates for `path`.\r\n * @param applyLocally - Whether or not to make intermediate results visible\r\n */\r\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\r\n    repoLog(repo, 'transaction on ' + path);\r\n    // Initialize transaction.\r\n    const transaction = {\r\n        path,\r\n        update: transactionUpdate,\r\n        onComplete,\r\n        // One of TransactionStatus enums.\r\n        status: null,\r\n        // Used when combining transactions at different locations to figure out\r\n        // which one goes first.\r\n        order: LUIDGenerator(),\r\n        // Whether to raise local events for this transaction.\r\n        applyLocally,\r\n        // Count of how many times we've retried the transaction.\r\n        retryCount: 0,\r\n        // Function to call to clean up our .on() listener.\r\n        unwatcher,\r\n        // Stores why a transaction was aborted.\r\n        abortReason: null,\r\n        currentWriteId: null,\r\n        currentInputSnapshot: null,\r\n        currentOutputSnapshotRaw: null,\r\n        currentOutputSnapshotResolved: null\r\n    };\r\n    // Run transaction initially.\r\n    const currentState = repoGetLatestState(repo, path, undefined);\r\n    transaction.currentInputSnapshot = currentState;\r\n    const newVal = transaction.update(currentState.val());\r\n    if (newVal === undefined) {\r\n        // Abort transaction.\r\n        transaction.unwatcher();\r\n        transaction.currentOutputSnapshotRaw = null;\r\n        transaction.currentOutputSnapshotResolved = null;\r\n        if (transaction.onComplete) {\r\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\r\n        }\r\n    }\r\n    else {\r\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\r\n        // Mark as run and add to our queue.\r\n        transaction.status = 0 /* RUN */;\r\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\r\n        const nodeQueue = treeGetValue(queueNode) || [];\r\n        nodeQueue.push(transaction);\r\n        treeSetValue(queueNode, nodeQueue);\r\n        // Update visibleData and raise events\r\n        // Note: We intentionally raise events after updating all of our\r\n        // transaction state, since the user could start new transactions from the\r\n        // event callbacks.\r\n        let priorityForNode;\r\n        if (typeof newVal === 'object' &&\r\n            newVal !== null &&\r\n            contains(newVal, '.priority')) {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            priorityForNode = safeGet(newVal, '.priority');\r\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\r\n                'Priority must be a valid string, finite number, server value, or null.');\r\n        }\r\n        else {\r\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\r\n                ChildrenNode.EMPTY_NODE;\r\n            priorityForNode = currentNode.getPriority().val();\r\n        }\r\n        const serverValues = repoGenerateServerValues(repo);\r\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\r\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\r\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\r\n        transaction.currentOutputSnapshotResolved = newNode;\r\n        transaction.currentWriteId = repoGetNextWriteId(repo);\r\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n    }\r\n}\r\n/**\r\n * @param excludeSets - A specific set to exclude\r\n */\r\nfunction repoGetLatestState(repo, path, excludeSets) {\r\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\r\n        ChildrenNode.EMPTY_NODE);\r\n}\r\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding\r\n * transactions to complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively\r\n * with a particular transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param node - transactionQueueTree node to start at.\r\n */\r\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\r\n    // Before recursing, make sure any completed transactions are removed.\r\n    if (!node) {\r\n        repoPruneCompletedTransactionsBelowNode(repo, node);\r\n    }\r\n    if (treeGetValue(node)) {\r\n        const queue = repoBuildTransactionQueue(repo, node);\r\n        assert(queue.length > 0, 'Sending zero length transaction queue');\r\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\r\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\r\n        if (allRun) {\r\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\r\n        }\r\n    }\r\n    else if (treeHasChildren(node)) {\r\n        treeForEachChild(node, childNode => {\r\n            repoSendReadyTransactions(repo, childNode);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Given a list of run transactions, send them to the server and then handle\r\n * the result (success or failure).\r\n *\r\n * @param path - The location of the queue.\r\n * @param queue - Queue of transactions under the specified location.\r\n */\r\nfunction repoSendTransactionQueue(repo, path, queue) {\r\n    // Mark transactions as sent and increment retry count!\r\n    const setsToIgnore = queue.map(txn => {\r\n        return txn.currentWriteId;\r\n    });\r\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\r\n    let snapToSend = latestState;\r\n    const latestHash = latestState.hash();\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const txn = queue[i];\r\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\r\n        txn.status = 1 /* SENT */;\r\n        txn.retryCount++;\r\n        const relativePath = newRelativePath(path, txn.path);\r\n        // If we've gotten to this point, the output snapshot must be defined.\r\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\r\n    }\r\n    const dataToSend = snapToSend.val(true);\r\n    const pathToSend = path;\r\n    // Send the put.\r\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\r\n        repoLog(repo, 'transaction put response', {\r\n            path: pathToSend.toString(),\r\n            status\r\n        });\r\n        let events = [];\r\n        if (status === 'ok') {\r\n            // Queue up the callbacks and fire them after cleaning up all of our\r\n            // transaction state, since the callback could trigger more\r\n            // transactions or sets.\r\n            const callbacks = [];\r\n            for (let i = 0; i < queue.length; i++) {\r\n                queue[i].status = 2 /* COMPLETED */;\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\r\n                if (queue[i].onComplete) {\r\n                    // We never unset the output snapshot, and given that this\r\n                    // transaction is complete, it should be set\r\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\r\n                }\r\n                queue[i].unwatcher();\r\n            }\r\n            // Now remove the completed transactions.\r\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\r\n            // There may be pending transactions that we can now send.\r\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n            // Finally, trigger onComplete callbacks.\r\n            for (let i = 0; i < callbacks.length; i++) {\r\n                exceptionGuard(callbacks[i]);\r\n            }\r\n        }\r\n        else {\r\n            // transactions are no longer sent.  Update their status appropriately.\r\n            if (status === 'datastale') {\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\r\n                        queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    }\r\n                    else {\r\n                        queue[i].status = 0 /* RUN */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\r\n                for (let i = 0; i < queue.length; i++) {\r\n                    queue[i].status = 4 /* NEEDS_ABORT */;\r\n                    queue[i].abortReason = status;\r\n                }\r\n            }\r\n            repoRerunTransactions(repo, path);\r\n        }\r\n    }, latestHash);\r\n}\r\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions. This\r\n * is the path at which events need to be raised for.\r\n *\r\n * @param changedPath - The path in mergedData that changed.\r\n * @returns The rootmost path that was affected by rerunning transactions.\r\n */\r\nfunction repoRerunTransactions(repo, changedPath) {\r\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\r\n    const path = treeGetPath(rootMostTransactionNode);\r\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\r\n    repoRerunTransactionQueue(repo, queue, path);\r\n    return path;\r\n}\r\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted\r\n * transactions and whatnot).\r\n *\r\n * @param queue - The queue of transactions to run.\r\n * @param path - The path the queue is for.\r\n */\r\nfunction repoRerunTransactionQueue(repo, queue, path) {\r\n    if (queue.length === 0) {\r\n        return; // Nothing to do!\r\n    }\r\n    // Queue up the callbacks and fire them after cleaning up all of our\r\n    // transaction state, since the callback could trigger more transactions or\r\n    // sets.\r\n    const callbacks = [];\r\n    let events = [];\r\n    // Ignore all of the sets we're going to re-run.\r\n    const txnsToRerun = queue.filter(q => {\r\n        return q.status === 0 /* RUN */;\r\n    });\r\n    const setsToIgnore = txnsToRerun.map(q => {\r\n        return q.currentWriteId;\r\n    });\r\n    for (let i = 0; i < queue.length; i++) {\r\n        const transaction = queue[i];\r\n        const relativePath = newRelativePath(path, transaction.path);\r\n        let abortTransaction = false, abortReason;\r\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\r\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\r\n            abortTransaction = true;\r\n            abortReason = transaction.abortReason;\r\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n        }\r\n        else if (transaction.status === 0 /* RUN */) {\r\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\r\n                abortTransaction = true;\r\n                abortReason = 'maxretry';\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n            }\r\n            else {\r\n                // This code reruns a transaction\r\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\r\n                transaction.currentInputSnapshot = currentNode;\r\n                const newData = queue[i].update(currentNode.val());\r\n                if (newData !== undefined) {\r\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\r\n                    let newDataNode = nodeFromJSON(newData);\r\n                    const hasExplicitPriority = typeof newData === 'object' &&\r\n                        newData != null &&\r\n                        contains(newData, '.priority');\r\n                    if (!hasExplicitPriority) {\r\n                        // Keep the old priority if there wasn't a priority explicitly specified.\r\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\r\n                    }\r\n                    const oldWriteId = transaction.currentWriteId;\r\n                    const serverValues = repoGenerateServerValues(repo);\r\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\r\n                    transaction.currentOutputSnapshotRaw = newDataNode;\r\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\r\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\r\n                    // Mutates setsToIgnore in place\r\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\r\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\r\n                }\r\n                else {\r\n                    abortTransaction = true;\r\n                    abortReason = 'nodata';\r\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\r\n                }\r\n            }\r\n        }\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\r\n        events = [];\r\n        if (abortTransaction) {\r\n            // Abort.\r\n            queue[i].status = 2 /* COMPLETED */;\r\n            // Removing a listener can trigger pruning which can muck with\r\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\r\n            // until we're done.\r\n            (function (unwatcher) {\r\n                setTimeout(unwatcher, Math.floor(0));\r\n            })(queue[i].unwatcher);\r\n            if (queue[i].onComplete) {\r\n                if (abortReason === 'nodata') {\r\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\r\n                }\r\n                else {\r\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Clean up completed transactions.\r\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\r\n    // Now fire callbacks, now that we're in a good, known state.\r\n    for (let i = 0; i < callbacks.length; i++) {\r\n        exceptionGuard(callbacks[i]);\r\n    }\r\n    // Try to send the transaction result to the server.\r\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\r\n}\r\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending\r\n * transaction on it, or just returns the node for the given path if there are\r\n * no pending transactions on any ancestor.\r\n *\r\n * @param path - The location to start at.\r\n * @returns The rootmost node with a transaction.\r\n */\r\nfunction repoGetAncestorTransactionNode(repo, path) {\r\n    let front;\r\n    // Start at the root and walk deeper into the tree towards path until we\r\n    // find a node with pending transactions.\r\n    let transactionNode = repo.transactionQueueTree_;\r\n    front = pathGetFront(path);\r\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\r\n        transactionNode = treeSubTree(transactionNode, front);\r\n        path = pathPopFront(path);\r\n        front = pathGetFront(path);\r\n    }\r\n    return transactionNode;\r\n}\r\n/**\r\n * Builds the queue of all transactions at or below the specified\r\n * transactionNode.\r\n *\r\n * @param transactionNode\r\n * @returns The generated queue.\r\n */\r\nfunction repoBuildTransactionQueue(repo, transactionNode) {\r\n    // Walk any child transaction queues and aggregate them into a single queue.\r\n    const transactionQueue = [];\r\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\r\n    // Sort them by the order the transactions were created.\r\n    transactionQueue.sort((a, b) => a.order - b.order);\r\n    return transactionQueue;\r\n}\r\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\r\n    const nodeQueue = treeGetValue(node);\r\n    if (nodeQueue) {\r\n        for (let i = 0; i < nodeQueue.length; i++) {\r\n            queue.push(nodeQueue[i]);\r\n        }\r\n    }\r\n    treeForEachChild(node, child => {\r\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\r\n    });\r\n}\r\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n */\r\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        let to = 0;\r\n        for (let from = 0; from < queue.length; from++) {\r\n            if (queue[from].status !== 2 /* COMPLETED */) {\r\n                queue[to] = queue[from];\r\n                to++;\r\n            }\r\n        }\r\n        queue.length = to;\r\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\r\n    }\r\n    treeForEachChild(node, childNode => {\r\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\r\n    });\r\n}\r\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.\r\n * Called when doing a set() or update() since we consider them incompatible\r\n * with transactions.\r\n *\r\n * @param path - Path for which we want to abort related transactions.\r\n */\r\nfunction repoAbortTransactions(repo, path) {\r\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\r\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\r\n    treeForEachAncestor(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    repoAbortTransactionsOnNode(repo, transactionNode);\r\n    treeForEachDescendant(transactionNode, (node) => {\r\n        repoAbortTransactionsOnNode(repo, node);\r\n    });\r\n    return affectedPath;\r\n}\r\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param node - Node to abort transactions for.\r\n */\r\nfunction repoAbortTransactionsOnNode(repo, node) {\r\n    const queue = treeGetValue(node);\r\n    if (queue) {\r\n        // Queue up the callbacks and fire them after cleaning up all of our\r\n        // transaction state, since the callback could trigger more transactions\r\n        // or sets.\r\n        const callbacks = [];\r\n        // Go through queue.  Any already-sent transactions must be marked for\r\n        // abort, while the unsent ones can be immediately aborted and removed.\r\n        let events = [];\r\n        let lastSent = -1;\r\n        for (let i = 0; i < queue.length; i++) {\r\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\r\n            else if (queue[i].status === 1 /* SENT */) {\r\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\r\n                lastSent = i;\r\n                // Mark transaction for abort when it comes back.\r\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\r\n                queue[i].abortReason = 'set';\r\n            }\r\n            else {\r\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\r\n                // We can abort it immediately.\r\n                queue[i].unwatcher();\r\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\r\n                if (queue[i].onComplete) {\r\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\r\n                }\r\n            }\r\n        }\r\n        if (lastSent === -1) {\r\n            // We're not waiting for any sent transactions.  We can clear the queue.\r\n            treeSetValue(node, undefined);\r\n        }\r\n        else {\r\n            // Remove the transactions we aborted.\r\n            queue.length = lastSent + 1;\r\n        }\r\n        // Now fire the callbacks.\r\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\r\n        for (let i = 0; i < callbacks.length; i++) {\r\n            exceptionGuard(callbacks[i]);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction decodePath(pathString) {\r\n    let pathStringDecoded = '';\r\n    const pieces = pathString.split('/');\r\n    for (let i = 0; i < pieces.length; i++) {\r\n        if (pieces[i].length > 0) {\r\n            let piece = pieces[i];\r\n            try {\r\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\r\n            }\r\n            catch (e) { }\r\n            pathStringDecoded += '/' + piece;\r\n        }\r\n    }\r\n    return pathStringDecoded;\r\n}\r\n/**\r\n * @returns key value hash\r\n */\r\nfunction decodeQuery(queryString) {\r\n    const results = {};\r\n    if (queryString.charAt(0) === '?') {\r\n        queryString = queryString.substring(1);\r\n    }\r\n    for (const segment of queryString.split('&')) {\r\n        if (segment.length === 0) {\r\n            continue;\r\n        }\r\n        const kv = segment.split('=');\r\n        if (kv.length === 2) {\r\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\r\n        }\r\n        else {\r\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\r\n        }\r\n    }\r\n    return results;\r\n}\r\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\r\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\r\n    if (parsedUrl.domain === 'firebase.com') {\r\n        fatal(parsedUrl.host +\r\n            ' is no longer supported. ' +\r\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\r\n    }\r\n    // Catch common error of uninitialized namespace value.\r\n    if ((!namespace || namespace === 'undefined') &&\r\n        parsedUrl.domain !== 'localhost') {\r\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\r\n    }\r\n    if (!parsedUrl.secure) {\r\n        warnIfPageIsSecure();\r\n    }\r\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\r\n    return {\r\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \r\n        /*persistenceKey=*/ '', \r\n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\r\n        path: new Path(parsedUrl.pathString)\r\n    };\r\n};\r\nconst parseDatabaseURL = function (dataURL) {\r\n    // Default to empty strings in the event of a malformed string.\r\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\r\n    // Always default to SSL, unless otherwise specified.\r\n    let secure = true, scheme = 'https', port = 443;\r\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\r\n    if (typeof dataURL === 'string') {\r\n        // Parse scheme.\r\n        let colonInd = dataURL.indexOf('//');\r\n        if (colonInd >= 0) {\r\n            scheme = dataURL.substring(0, colonInd - 1);\r\n            dataURL = dataURL.substring(colonInd + 2);\r\n        }\r\n        // Parse host, path, and query string.\r\n        let slashInd = dataURL.indexOf('/');\r\n        if (slashInd === -1) {\r\n            slashInd = dataURL.length;\r\n        }\r\n        let questionMarkInd = dataURL.indexOf('?');\r\n        if (questionMarkInd === -1) {\r\n            questionMarkInd = dataURL.length;\r\n        }\r\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\r\n        if (slashInd < questionMarkInd) {\r\n            // For pathString, questionMarkInd will always come after slashInd\r\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\r\n        }\r\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\r\n        // If we have a port, use scheme for determining if it's secure.\r\n        colonInd = host.indexOf(':');\r\n        if (colonInd >= 0) {\r\n            secure = scheme === 'https' || scheme === 'wss';\r\n            port = parseInt(host.substring(colonInd + 1), 10);\r\n        }\r\n        else {\r\n            colonInd = host.length;\r\n        }\r\n        const hostWithoutPort = host.slice(0, colonInd);\r\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\r\n            domain = 'localhost';\r\n        }\r\n        else if (hostWithoutPort.split('.').length <= 2) {\r\n            domain = hostWithoutPort;\r\n        }\r\n        else {\r\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\r\n            const dotInd = host.indexOf('.');\r\n            subdomain = host.substring(0, dotInd).toLowerCase();\r\n            domain = host.substring(dotInd + 1);\r\n            // Normalize namespaces to lowercase to share storage / connection.\r\n            namespace = subdomain;\r\n        }\r\n        // Always treat the value of the `ns` as the namespace name if it is present.\r\n        if ('ns' in queryParams) {\r\n            namespace = queryParams['ns'];\r\n        }\r\n    }\r\n    return {\r\n        host,\r\n        port,\r\n        domain,\r\n        subdomain,\r\n        secure,\r\n        scheme,\r\n        pathString,\r\n        namespace\r\n    };\r\n};\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Encapsulates the data needed to raise an event\r\n */\r\nclass DataEvent {\r\n    /**\r\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\r\n     * @param eventRegistration - The function to call to with the event data. User provided\r\n     * @param snapshot - The data backing the event\r\n     * @param prevName - Optional, the name of the previous child for child_* events.\r\n     */\r\n    constructor(eventType, eventRegistration, snapshot, prevName) {\r\n        this.eventType = eventType;\r\n        this.eventRegistration = eventRegistration;\r\n        this.snapshot = snapshot;\r\n        this.prevName = prevName;\r\n    }\r\n    getPath() {\r\n        const ref = this.snapshot.ref;\r\n        if (this.eventType === 'value') {\r\n            return ref._path;\r\n        }\r\n        else {\r\n            return ref.parent._path;\r\n        }\r\n    }\r\n    getEventType() {\r\n        return this.eventType;\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return (this.getPath().toString() +\r\n            ':' +\r\n            this.eventType +\r\n            ':' +\r\n            stringify(this.snapshot.exportVal()));\r\n    }\r\n}\r\nclass CancelEvent {\r\n    constructor(eventRegistration, error, path) {\r\n        this.eventRegistration = eventRegistration;\r\n        this.error = error;\r\n        this.path = path;\r\n    }\r\n    getPath() {\r\n        return this.path;\r\n    }\r\n    getEventType() {\r\n        return 'cancel';\r\n    }\r\n    getEventRunner() {\r\n        return this.eventRegistration.getEventRunner(this);\r\n    }\r\n    toString() {\r\n        return this.path.toString() + ':cancel';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A wrapper class that converts events from the database@exp SDK to the legacy\r\n * Database SDK. Events are not converted directly as event registration relies\r\n * on reference comparison of the original user callback (see `matches()`) and\r\n * relies on equality of the legacy SDK's `context` object.\r\n */\r\nclass CallbackContext {\r\n    constructor(snapshotCallback, cancelCallback) {\r\n        this.snapshotCallback = snapshotCallback;\r\n        this.cancelCallback = cancelCallback;\r\n    }\r\n    onValue(expDataSnapshot, previousChildName) {\r\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\r\n    }\r\n    onCancel(error) {\r\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\r\n        return this.cancelCallback.call(null, error);\r\n    }\r\n    get hasCancelCallback() {\r\n        return !!this.cancelCallback;\r\n    }\r\n    matches(other) {\r\n        return (this.snapshotCallback === other.snapshotCallback ||\r\n            (this.snapshotCallback.userCallback !== undefined &&\r\n                this.snapshotCallback.userCallback ===\r\n                    other.snapshotCallback.userCallback &&\r\n                this.snapshotCallback.context === other.snapshotCallback.context));\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * The `onDisconnect` class allows you to write or clear data when your client\r\n * disconnects from the Database server. These updates occur whether your\r\n * client disconnects cleanly or not, so you can rely on them to clean up data\r\n * even if a connection is dropped or a client crashes.\r\n *\r\n * The `onDisconnect` class is most commonly used to manage presence in\r\n * applications where it is useful to detect how many clients are connected and\r\n * when other clients disconnect. See\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information.\r\n *\r\n * To avoid problems when a connection is dropped before the requests can be\r\n * transferred to the Database server, these functions should be called before\r\n * writing any data.\r\n *\r\n * Note that `onDisconnect` operations are only triggered once. If you want an\r\n * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n * the `onDisconnect` operations each time you reconnect.\r\n */\r\nclass OnDisconnect {\r\n    /** @hideconstructor */\r\n    constructor(_repo, _path) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n    }\r\n    /**\r\n     * Cancels all previously queued `onDisconnect()` set or update events for this\r\n     * location and all children.\r\n     *\r\n     * If a write has been queued for this location via a `set()` or `update()` at a\r\n     * parent location, the write at this location will be canceled, though writes\r\n     * to sibling locations will still occur.\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    cancel() {\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is deleted when the client is disconnected\r\n     * (due to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * @returns Resolves when synchronization to the server is complete.\r\n     */\r\n    remove() {\r\n        validateWritablePath('OnDisconnect.remove', this._path);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value when the\r\n     * client is disconnected (due to closing the browser, navigating to a new page,\r\n     * or network issues).\r\n     *\r\n     * `set()` is especially useful for implementing \"presence\" systems, where a\r\n     * value should be changed or cleared when a user disconnects so that they\r\n     * appear \"offline\" to other users. See\r\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n     * for more information.\r\n     *\r\n     * Note that `onDisconnect` operations are only triggered once. If you want an\r\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\r\n     * the `onDisconnect` operations each time.\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    set(value) {\r\n        validateWritablePath('OnDisconnect.set', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Ensures the data at this location is set to the specified value and priority\r\n     * when the client is disconnected (due to closing the browser, navigating to a\r\n     * new page, or network issues).\r\n     *\r\n     * @param value - The value to be written to this location on disconnect (can\r\n     * be an object, array, string, number, boolean, or null).\r\n     * @param priority - The priority to be written (string, number, or null).\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    setWithPriority(value, priority) {\r\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\r\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\r\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n    /**\r\n     * Writes multiple values at this location when the client is disconnected (due\r\n     * to closing the browser, navigating to a new page, or network issues).\r\n     *\r\n     * The `values` argument contains multiple property-value pairs that will be\r\n     * written to the Database together. Each child property can either be a simple\r\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\r\n     * from the current location to the data to update.\r\n     *\r\n     * As opposed to the `set()` method, `update()` can be use to selectively update\r\n     * only the referenced properties at the current location (instead of replacing\r\n     * all the child properties at the current location).\r\n     *\r\n     * @param values - Object containing multiple values.\r\n     * @returns Resolves when synchronization to the Database is complete.\r\n     */\r\n    update(values) {\r\n        validateWritablePath('OnDisconnect.update', this._path);\r\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\r\n        const deferred = new Deferred();\r\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\r\n        return deferred.promise;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * @internal\r\n */\r\nclass QueryImpl {\r\n    /**\r\n     * @hideconstructor\r\n     */\r\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\r\n        this._repo = _repo;\r\n        this._path = _path;\r\n        this._queryParams = _queryParams;\r\n        this._orderByCalled = _orderByCalled;\r\n    }\r\n    get key() {\r\n        if (pathIsEmpty(this._path)) {\r\n            return null;\r\n        }\r\n        else {\r\n            return pathGetBack(this._path);\r\n        }\r\n    }\r\n    get ref() {\r\n        return new ReferenceImpl(this._repo, this._path);\r\n    }\r\n    get _queryIdentifier() {\r\n        const obj = queryParamsGetQueryObject(this._queryParams);\r\n        const id = ObjectToUniqueKey(obj);\r\n        return id === '{}' ? 'default' : id;\r\n    }\r\n    /**\r\n     * An object representation of the query parameters used by this Query.\r\n     */\r\n    get _queryObject() {\r\n        return queryParamsGetQueryObject(this._queryParams);\r\n    }\r\n    isEqual(other) {\r\n        other = getModularInstance(other);\r\n        if (!(other instanceof QueryImpl)) {\r\n            return false;\r\n        }\r\n        const sameRepo = this._repo === other._repo;\r\n        const samePath = pathEquals(this._path, other._path);\r\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\r\n        return sameRepo && samePath && sameQueryIdentifier;\r\n    }\r\n    toJSON() {\r\n        return this.toString();\r\n    }\r\n    toString() {\r\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\r\n    }\r\n}\r\n/**\r\n * Validates that no other order by call has been made\r\n */\r\nfunction validateNoPreviousOrderByCall(query, fnName) {\r\n    if (query._orderByCalled === true) {\r\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\r\n    }\r\n}\r\n/**\r\n * Validates start/end values for queries.\r\n */\r\nfunction validateQueryEndpoints(params) {\r\n    let startNode = null;\r\n    let endNode = null;\r\n    if (params.hasStart()) {\r\n        startNode = params.getIndexStartValue();\r\n    }\r\n    if (params.hasEnd()) {\r\n        endNode = params.getIndexEndValue();\r\n    }\r\n    if (params.getIndex() === KEY_INDEX) {\r\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\r\n            'startAt(), endAt(), or equalTo().';\r\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\r\n            'endAt(), endBefore(), or equalTo() must be a string.';\r\n        if (params.hasStart()) {\r\n            const startName = params.getIndexStartName();\r\n            if (startName !== MIN_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof startNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n        if (params.hasEnd()) {\r\n            const endName = params.getIndexEndName();\r\n            if (endName !== MAX_NAME) {\r\n                throw new Error(tooManyArgsError);\r\n            }\r\n            else if (typeof endNode !== 'string') {\r\n                throw new Error(wrongArgTypeError);\r\n            }\r\n        }\r\n    }\r\n    else if (params.getIndex() === PRIORITY_INDEX) {\r\n        if ((startNode != null && !isValidPriority(startNode)) ||\r\n            (endNode != null && !isValidPriority(endNode))) {\r\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\r\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\r\n                '(null, a number, or a string).');\r\n        }\r\n    }\r\n    else {\r\n        assert(params.getIndex() instanceof PathIndex ||\r\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\r\n        if ((startNode != null && typeof startNode === 'object') ||\r\n            (endNode != null && typeof endNode === 'object')) {\r\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\r\n                'equalTo() cannot be an object.');\r\n        }\r\n    }\r\n}\r\n/**\r\n * Validates that limit* has been called with the correct combination of parameters\r\n */\r\nfunction validateLimit(params) {\r\n    if (params.hasStart() &&\r\n        params.hasEnd() &&\r\n        params.hasLimit() &&\r\n        !params.hasAnchoredLimit()) {\r\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\r\n            'limitToFirst() or limitToLast() instead.');\r\n    }\r\n}\r\n/**\r\n * @internal\r\n */\r\nclass ReferenceImpl extends QueryImpl {\r\n    /** @hideconstructor */\r\n    constructor(repo, path) {\r\n        super(repo, path, new QueryParams(), false);\r\n    }\r\n    get parent() {\r\n        const parentPath = pathParent(this._path);\r\n        return parentPath === null\r\n            ? null\r\n            : new ReferenceImpl(this._repo, parentPath);\r\n    }\r\n    get root() {\r\n        let ref = this;\r\n        while (ref.parent !== null) {\r\n            ref = ref.parent;\r\n        }\r\n        return ref;\r\n    }\r\n}\r\n/**\r\n * A `DataSnapshot` contains data from a Database location.\r\n *\r\n * Any time you read data from the Database, you receive the data as a\r\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\r\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\r\n * JavaScript object by calling the `val()` method. Alternatively, you can\r\n * traverse into the snapshot by calling `child()` to return child snapshots\r\n * (which you could then call `val()` on).\r\n *\r\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\r\n * a Database location. It cannot be modified and will never change (to modify\r\n * data, you always call the `set()` method on a `Reference` directly).\r\n */\r\nclass DataSnapshot {\r\n    /**\r\n     * @param _node - A SnapshotNode to wrap.\r\n     * @param ref - The location this snapshot came from.\r\n     * @param _index - The iteration order for this snapshot\r\n     * @hideconstructor\r\n     */\r\n    constructor(_node, \r\n    /**\r\n     * The location of this DataSnapshot.\r\n     */\r\n    ref, _index) {\r\n        this._node = _node;\r\n        this.ref = ref;\r\n        this._index = _index;\r\n    }\r\n    /**\r\n     * Gets the priority value of the data in this `DataSnapshot`.\r\n     *\r\n     * Applications need not use priority but can order collections by\r\n     * ordinary properties (see\r\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\r\n     * ).\r\n     */\r\n    get priority() {\r\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\r\n        return this._node.getPriority().val();\r\n    }\r\n    /**\r\n     * The key (last part of the path) of the location of this `DataSnapshot`.\r\n     *\r\n     * The last token in a Database location is considered its key. For example,\r\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\r\n     * `DataSnapshot` will return the key for the location that generated it.\r\n     * However, accessing the key on the root URL of a Database will return\r\n     * `null`.\r\n     */\r\n    get key() {\r\n        return this.ref.key;\r\n    }\r\n    /** Returns the number of child properties of this `DataSnapshot`. */\r\n    get size() {\r\n        return this._node.numChildren();\r\n    }\r\n    /**\r\n     * Gets another `DataSnapshot` for the location at the specified relative path.\r\n     *\r\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\r\n     * another `DataSnapshot` for the location at the specified relative path. The\r\n     * relative path can either be a simple child name (for example, \"ada\") or a\r\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\r\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\r\n     * whose value is `null`) is returned.\r\n     *\r\n     * @param path - A relative path to the location of child data.\r\n     */\r\n    child(path) {\r\n        const childPath = new Path(path);\r\n        const childRef = child(this.ref, path);\r\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\r\n    }\r\n    /**\r\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\r\n     * efficient than using `snapshot.val() !== null`.\r\n     */\r\n    exists() {\r\n        return !this._node.isEmpty();\r\n    }\r\n    /**\r\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\r\n     *\r\n     * The `exportVal()` method is similar to `val()`, except priority information\r\n     * is included (if available), making it suitable for backing up your data.\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    exportVal() {\r\n        return this._node.val(true);\r\n    }\r\n    /**\r\n     * Enumerates the top-level children in the `DataSnapshot`.\r\n     *\r\n     * Because of the way JavaScript objects work, the ordering of data in the\r\n     * JavaScript object returned by `val()` is not guaranteed to match the\r\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\r\n     * where `forEach()` comes in handy. It guarantees the children of a\r\n     * `DataSnapshot` will be iterated in their query order.\r\n     *\r\n     * If no explicit `orderBy*()` method is used, results are returned\r\n     * ordered by key (unless priorities are used, in which case, results are\r\n     * returned by priority).\r\n     *\r\n     * @param action - A function that will be called for each child DataSnapshot.\r\n     * The callback can return true to cancel further enumeration.\r\n     * @returns true if enumeration was canceled due to your callback returning\r\n     * true.\r\n     */\r\n    forEach(action) {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        const childrenNode = this._node;\r\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\r\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\r\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\r\n        });\r\n    }\r\n    /**\r\n     * Returns true if the specified child path has (non-null) data.\r\n     *\r\n     * @param path - A relative path to the location of a potential child.\r\n     * @returns `true` if data exists at the specified child path; else\r\n     *  `false`.\r\n     */\r\n    hasChild(path) {\r\n        const childPath = new Path(path);\r\n        return !this._node.getChild(childPath).isEmpty();\r\n    }\r\n    /**\r\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\r\n     * properties.\r\n     *\r\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\r\n     * children. If it does, you can enumerate them using `forEach()`. If it\r\n     * doesn't, then either this snapshot contains a primitive value (which can be\r\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\r\n     * `null`).\r\n     *\r\n     * @returns true if this snapshot has any children; else false.\r\n     */\r\n    hasChildren() {\r\n        if (this._node.isLeafNode()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return !this._node.isEmpty();\r\n        }\r\n    }\r\n    /**\r\n     * Returns a JSON-serializable representation of this object.\r\n     */\r\n    toJSON() {\r\n        return this.exportVal();\r\n    }\r\n    /**\r\n     * Extracts a JavaScript value from a `DataSnapshot`.\r\n     *\r\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\r\n     * scalar type (string, number, or boolean), an array, or an object. It may\r\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\r\n     * data).\r\n     *\r\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\r\n     *   Array, string, number, boolean, or `null`).\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    val() {\r\n        return this._node.val();\r\n    }\r\n}\r\n/**\r\n *\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided path. If no path is provided, the `Reference`\r\n * will point to the root of the Database.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param path - Optional path representing the location the returned\r\n *   `Reference` will point. If not provided, the returned `Reference` will\r\n *   point to the root of the Database.\r\n * @returns If a path is provided, a `Reference`\r\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\r\n *   root of the Database.\r\n */\r\nfunction ref(db, path) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('ref');\r\n    return path !== undefined ? child(db._root, path) : db._root;\r\n}\r\n/**\r\n * Returns a `Reference` representing the location in the Database\r\n * corresponding to the provided Firebase URL.\r\n *\r\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\r\n * has a different domain than the current `Database` instance.\r\n *\r\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\r\n * and are not applied to the returned `Reference`.\r\n *\r\n * @param db - The database instance to obtain a reference for.\r\n * @param url - The Firebase URL at which the returned `Reference` will\r\n *   point.\r\n * @returns A `Reference` pointing to the provided\r\n *   Firebase URL.\r\n */\r\nfunction refFromURL(db, url) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('refFromURL');\r\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\r\n    validateUrl('refFromURL', parsedURL);\r\n    const repoInfo = parsedURL.repoInfo;\r\n    if (!db._repo.repoInfo_.isCustomHost() &&\r\n        repoInfo.host !== db._repo.repoInfo_.host) {\r\n        fatal('refFromURL' +\r\n            ': Host name does not match the current database: ' +\r\n            '(found ' +\r\n            repoInfo.host +\r\n            ' but expected ' +\r\n            db._repo.repoInfo_.host +\r\n            ')');\r\n    }\r\n    return ref(db, parsedURL.path.toString());\r\n}\r\n/**\r\n * Gets a `Reference` for the location at the specified relative path.\r\n *\r\n * The relative path can either be a simple child name (for example, \"ada\") or\r\n * a deeper slash-separated path (for example, \"ada/name/first\").\r\n *\r\n * @param parent - The parent location.\r\n * @param path - A relative path from this location to the desired child\r\n *   location.\r\n * @returns The specified child location.\r\n */\r\nfunction child(parent, path) {\r\n    parent = getModularInstance(parent);\r\n    if (pathGetFront(parent._path) === null) {\r\n        validateRootPathString('child', 'path', path, false);\r\n    }\r\n    else {\r\n        validatePathString('child', 'path', path, false);\r\n    }\r\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\r\n}\r\n/**\r\n * Returns an `OnDisconnect` object - see\r\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\r\n * for more information on how to use it.\r\n *\r\n * @param ref - The reference to add OnDisconnect triggers for.\r\n */\r\nfunction onDisconnect(ref) {\r\n    ref = getModularInstance(ref);\r\n    return new OnDisconnect(ref._repo, ref._path);\r\n}\r\n/**\r\n * Generates a new child location using a unique key and returns its\r\n * `Reference`.\r\n *\r\n * This is the most common pattern for adding data to a collection of items.\r\n *\r\n * If you provide a value to `push()`, the value is written to the\r\n * generated location. If you don't pass a value, nothing is written to the\r\n * database and the child remains empty (but you can use the `Reference`\r\n * elsewhere).\r\n *\r\n * The unique keys generated by `push()` are ordered by the current time, so the\r\n * resulting list of items is chronologically sorted. The keys are also\r\n * designed to be unguessable (they contain 72 random bits of entropy).\r\n *\r\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\r\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\r\n *\r\n * @param parent - The parent location.\r\n * @param value - Optional value to be written at the generated location.\r\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\r\n * but can be used immediately as the `Reference` to the child location.\r\n */\r\nfunction push(parent, value) {\r\n    parent = getModularInstance(parent);\r\n    validateWritablePath('push', parent._path);\r\n    validateFirebaseDataArg('push', value, parent._path, true);\r\n    const now = repoServerTime(parent._repo);\r\n    const name = nextPushId(now);\r\n    // push() returns a ThennableReference whose promise is fulfilled with a\r\n    // regular Reference. We use child() to create handles to two different\r\n    // references. The first is turned into a ThennableReference below by adding\r\n    // then() and catch() methods and is used as the return value of push(). The\r\n    // second remains a regular Reference and is used as the fulfilled value of\r\n    // the first ThennableReference.\r\n    const thennablePushRef = child(parent, name);\r\n    const pushRef = child(parent, name);\r\n    let promise;\r\n    if (value != null) {\r\n        promise = set(pushRef, value).then(() => pushRef);\r\n    }\r\n    else {\r\n        promise = Promise.resolve(pushRef);\r\n    }\r\n    thennablePushRef.then = promise.then.bind(promise);\r\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\r\n    return thennablePushRef;\r\n}\r\n/**\r\n * Removes the data at this Database location.\r\n *\r\n * Any data at child locations will also be deleted.\r\n *\r\n * The effect of the remove will be visible immediately and the corresponding\r\n * event 'value' will be triggered. Synchronization of the remove to the\r\n * Firebase servers will also be started, and the returned Promise will resolve\r\n * when complete. If provided, the onComplete callback will be called\r\n * asynchronously after synchronization has finished.\r\n *\r\n * @param ref - The location to remove.\r\n * @returns Resolves when remove on server is complete.\r\n */\r\nfunction remove(ref) {\r\n    validateWritablePath('remove', ref._path);\r\n    return set(ref, null);\r\n}\r\n/**\r\n * Writes data to this Database location.\r\n *\r\n * This will overwrite any data at this location and all child locations.\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\r\n * all data at this location and all child locations will be deleted.\r\n *\r\n * `set()` will remove any priority stored at this location, so if priority is\r\n * meant to be preserved, you need to use `setWithPriority()` instead.\r\n *\r\n * Note that modifying data with `set()` will cancel any pending transactions\r\n * at that location, so extreme care should be taken if mixing `set()` and\r\n * `transaction()` to modify the same data.\r\n *\r\n * A single `set()` will generate a single \"value\" event at the location where\r\n * the `set()` was performed.\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction set(ref, value) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('set', ref._path);\r\n    validateFirebaseDataArg('set', value, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, \r\n    /*priority=*/ null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Sets a priority for the data at this Database location.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setPriority(ref, priority) {\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('setPriority', ref._path);\r\n    validatePriority('setPriority', priority, false);\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes data the Database location. Like `set()` but also specifies the\r\n * priority for that data.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\r\n * ).\r\n *\r\n * @param ref - The location to write to.\r\n * @param value - The value to be written (string, number, boolean, object,\r\n *   array, or null).\r\n * @param priority - The priority to be written (string, number, or null).\r\n * @returns Resolves when write to server is complete.\r\n */\r\nfunction setWithPriority(ref, value, priority) {\r\n    validateWritablePath('setWithPriority', ref._path);\r\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\r\n    validatePriority('setWithPriority', priority, false);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\r\n    }\r\n    const deferred = new Deferred();\r\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Writes multiple values to the Database at once.\r\n *\r\n * The `values` argument contains multiple property-value pairs that will be\r\n * written to the Database together. Each child property can either be a simple\r\n * property (for example, \"name\") or a relative path (for example,\r\n * \"name/first\") from the current location to the data to update.\r\n *\r\n * As opposed to the `set()` method, `update()` can be use to selectively update\r\n * only the referenced properties at the current location (instead of replacing\r\n * all the child properties at the current location).\r\n *\r\n * The effect of the write will be visible immediately, and the corresponding\r\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\r\n * the data to the Firebase servers will also be started, and the returned\r\n * Promise will resolve when complete. If provided, the `onComplete` callback\r\n * will be called asynchronously after synchronization has finished.\r\n *\r\n * A single `update()` will generate a single \"value\" event at the location\r\n * where the `update()` was performed, regardless of how many children were\r\n * modified.\r\n *\r\n * Note that modifying data with `update()` will cancel any pending\r\n * transactions at that location, so extreme care should be taken if mixing\r\n * `update()` and `transaction()` to modify the same data.\r\n *\r\n * Passing `null` to `update()` will remove the data at this location.\r\n *\r\n * See\r\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\r\n *\r\n * @param ref - The location to write to.\r\n * @param values - Object containing multiple values.\r\n * @returns Resolves when update on server is complete.\r\n */\r\nfunction update(ref, values) {\r\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\r\n    const deferred = new Deferred();\r\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\r\n    return deferred.promise;\r\n}\r\n/**\r\n * Gets the most up-to-date result for this query.\r\n *\r\n * @param query - The query to run.\r\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\r\n * available, or rejects if the client is unable to return a value (e.g., if the\r\n * server is unreachable and there is nothing cached).\r\n */\r\nfunction get(query) {\r\n    query = getModularInstance(query);\r\n    return repoGetValue(query._repo, query).then(node => {\r\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\r\n    });\r\n}\r\n/**\r\n * Represents registration for 'value' events.\r\n */\r\nclass ValueEventRegistration {\r\n    constructor(callbackContext) {\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        return eventType === 'value';\r\n    }\r\n    createEvent(change, query) {\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\r\n        }\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (!(other instanceof ValueEventRegistration)) {\r\n            return false;\r\n        }\r\n        else if (!other.callbackContext || !this.callbackContext) {\r\n            // If no callback specified, we consider it to match any callback.\r\n            return true;\r\n        }\r\n        else {\r\n            return other.callbackContext.matches(this.callbackContext);\r\n        }\r\n    }\r\n    hasAnyCallback() {\r\n        return this.callbackContext !== null;\r\n    }\r\n}\r\n/**\r\n * Represents the registration of a child_x event.\r\n */\r\nclass ChildEventRegistration {\r\n    constructor(eventType, callbackContext) {\r\n        this.eventType = eventType;\r\n        this.callbackContext = callbackContext;\r\n    }\r\n    respondsTo(eventType) {\r\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\r\n        eventToCheck =\r\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\r\n        return this.eventType === eventToCheck;\r\n    }\r\n    createCancelEvent(error, path) {\r\n        if (this.callbackContext.hasCancelCallback) {\r\n            return new CancelEvent(this, error, path);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    createEvent(change, query) {\r\n        assert(change.childName != null, 'Child events should have a childName.');\r\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\r\n        const index = query._queryParams.getIndex();\r\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\r\n    }\r\n    getEventRunner(eventData) {\r\n        if (eventData.getEventType() === 'cancel') {\r\n            return () => this.callbackContext.onCancel(eventData.error);\r\n        }\r\n        else {\r\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\r\n        }\r\n    }\r\n    matches(other) {\r\n        if (other instanceof ChildEventRegistration) {\r\n            return (this.eventType === other.eventType &&\r\n                (!this.callbackContext ||\r\n                    !other.callbackContext ||\r\n                    this.callbackContext.matches(other.callbackContext)));\r\n        }\r\n        return false;\r\n    }\r\n    hasAnyCallback() {\r\n        return !!this.callbackContext;\r\n    }\r\n}\r\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\r\n    let cancelCallback;\r\n    if (typeof cancelCallbackOrListenOptions === 'object') {\r\n        cancelCallback = undefined;\r\n        options = cancelCallbackOrListenOptions;\r\n    }\r\n    if (typeof cancelCallbackOrListenOptions === 'function') {\r\n        cancelCallback = cancelCallbackOrListenOptions;\r\n    }\r\n    if (options && options.onlyOnce) {\r\n        const userCallback = callback;\r\n        const onceCallback = (dataSnapshot, previousChildName) => {\r\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n            userCallback(dataSnapshot, previousChildName);\r\n        };\r\n        onceCallback.userCallback = callback.userCallback;\r\n        onceCallback.context = callback.context;\r\n        callback = onceCallback;\r\n    }\r\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\r\n    const container = eventType === 'value'\r\n        ? new ValueEventRegistration(callbackContext)\r\n        : new ChildEventRegistration(eventType, callbackContext);\r\n    repoAddEventCallbackForQuery(query._repo, query, container);\r\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\r\n}\r\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\r\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\r\n}\r\n/**\r\n * Detaches a callback previously attached with `on()`.\r\n *\r\n * Detach a callback previously attached with `on()`. Note that if `on()` was\r\n * called multiple times with the same eventType and callback, the callback\r\n * will be called multiple times for each event, and `off()` must be called\r\n * multiple times to remove the callback. Calling `off()` on a parent listener\r\n * will not automatically remove listeners registered on child nodes, `off()`\r\n * must also be called on any child listeners to remove the callback.\r\n *\r\n * If a callback is not specified, all callbacks for the specified eventType\r\n * will be removed. Similarly, if no eventType is specified, all callbacks\r\n * for the `Reference` will be removed.\r\n *\r\n * Individual listeners can also be removed by invoking their unsubscribe\r\n * callbacks.\r\n *\r\n * @param query - The query that the listener was registered with.\r\n * @param eventType - One of the following strings: \"value\", \"child_added\",\r\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\r\n * for the `Reference` will be removed.\r\n * @param callback - The callback function that was passed to `on()` or\r\n * `undefined` to remove all callbacks.\r\n */\r\nfunction off(query, eventType, callback) {\r\n    let container = null;\r\n    const expCallback = callback ? new CallbackContext(callback) : null;\r\n    if (eventType === 'value') {\r\n        container = new ValueEventRegistration(expCallback);\r\n    }\r\n    else if (eventType) {\r\n        container = new ChildEventRegistration(eventType, expCallback);\r\n    }\r\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\r\n}\r\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\r\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\r\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\r\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\r\n * {@link orderByValue}  or {@link equalTo} and\r\n * can then be passed to {@link query} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\r\nclass QueryConstraint {\r\n}\r\nclass QueryEndAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\r\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name less than or equal\r\n * to the specified key.\r\n *\r\n * You can read more about `endAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to end at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end at, among the children with the previously\r\n * specified priority. This argument is only allowed if ordering by child,\r\n * value, or priority.\r\n */\r\nfunction endAt(value, key) {\r\n    validateKey('endAt', 'key', key, true);\r\n    return new QueryEndAtConstraint(value, key);\r\n}\r\nclass QueryEndBeforeConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\r\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\r\n                'endBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The ending point is exclusive. If only a value is provided, children\r\n * with a value less than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value lesss than or equal\r\n * to the specified value and a a key name less than the specified key.\r\n *\r\n * @param value - The value to end before. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to end before, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction endBefore(value, key) {\r\n    validateKey('endBefore', 'key', key, true);\r\n    return new QueryEndBeforeConstraint(value, key);\r\n}\r\nclass QueryStartAtConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\r\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\r\n                'startBefore or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is inclusive, so children with exactly the specified value\r\n * will be included in the query. The optional key argument can be used to\r\n * further limit the range of the query. If it is specified, then children that\r\n * have exactly the specified value must also have a key name greater than or\r\n * equal to the specified key.\r\n *\r\n * You can read more about `startAt()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to start at. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAt(value = null, key) {\r\n    validateKey('startAt', 'key', key, true);\r\n    return new QueryStartAtConstraint(value, key);\r\n}\r\nclass QueryStartAfterConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\r\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\r\n        validateLimit(newParams);\r\n        validateQueryEndpoints(newParams);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\r\n                'startAfter, or equalTo).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The starting point is exclusive. If only a value is provided, children\r\n * with a value greater than the specified value will be included in the query.\r\n * If a key is specified, then children must have a value greater than or equal\r\n * to the specified value and a a key name greater than the specified key.\r\n *\r\n * @param value - The value to start after. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start after. This argument is only allowed if\r\n * ordering by child, value, or priority.\r\n */\r\nfunction startAfter(value, key) {\r\n    validateKey('startAfter', 'key', key, true);\r\n    return new QueryStartAfterConstraint(value, key);\r\n}\r\nclass QueryLimitToFirstConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that if limited to the first specific number\r\n * of children.\r\n *\r\n * The `limitToFirst()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the first 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToFirst()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToFirst(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToFirst: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToFirstConstraint(limit);\r\n}\r\nclass QueryLimitToLastConstraint extends QueryConstraint {\r\n    constructor(_limit) {\r\n        super();\r\n        this._limit = _limit;\r\n    }\r\n    _apply(query) {\r\n        if (query._queryParams.hasLimit()) {\r\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\r\n                'or limitToLast).');\r\n        }\r\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that is limited to return only the last\r\n * specified number of children.\r\n *\r\n * The `limitToLast()` method is used to set a maximum number of children to be\r\n * synced for a given callback. If we set a limit of 100, we will initially only\r\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\r\n * stored in our Database, a `child_added` event will fire for each message.\r\n * However, if we have over 100 messages, we will only receive a `child_added`\r\n * event for the last 100 ordered messages. As items change, we will receive\r\n * `child_removed` events for each item that drops out of the active list so\r\n * that the total number stays at 100.\r\n *\r\n * You can read more about `limitToLast()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param limit - The maximum number of nodes to include in this query.\r\n */\r\nfunction limitToLast(limit) {\r\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\r\n        throw new Error('limitToLast: First argument must be a positive integer.');\r\n    }\r\n    return new QueryLimitToLastConstraint(limit);\r\n}\r\nclass QueryOrderByChildConstraint extends QueryConstraint {\r\n    constructor(_path) {\r\n        super();\r\n        this._path = _path;\r\n    }\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByChild');\r\n        const parsedPath = new Path(this._path);\r\n        if (pathIsEmpty(parsedPath)) {\r\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\r\n        }\r\n        const index = new PathIndex(parsedPath);\r\n        const newParams = queryParamsOrderBy(query._queryParams, index);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the specified child key.\r\n *\r\n * Queries can only order by one key at a time. Calling `orderByChild()`\r\n * multiple times on the same query is an error.\r\n *\r\n * Firebase queries allow you to order your data by any child key on the fly.\r\n * However, if you know in advance what your indexes will be, you can define\r\n * them via the .indexOn rule in your Security Rules for better performance. See\r\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\r\n * rule for more information.\r\n *\r\n * You can read more about `orderByChild()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n *\r\n * @param path - The path to order by.\r\n */\r\nfunction orderByChild(path) {\r\n    if (path === '$key') {\r\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\r\n    }\r\n    else if (path === '$priority') {\r\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\r\n    }\r\n    else if (path === '$value') {\r\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\r\n    }\r\n    validatePathString('orderByChild', 'path', path, false);\r\n    return new QueryOrderByChildConstraint(path);\r\n}\r\nclass QueryOrderByKeyConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByKey');\r\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by the key.\r\n *\r\n * Sorts the results of a query by their (ascending) key values.\r\n *\r\n * You can read more about `orderByKey()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByKey() {\r\n    return new QueryOrderByKeyConstraint();\r\n}\r\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\r\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by priority.\r\n *\r\n * Applications need not use priority but can order collections by\r\n * ordinary properties (see\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\r\n * for alternatives to priority.\r\n */\r\nfunction orderByPriority() {\r\n    return new QueryOrderByPriorityConstraint();\r\n}\r\nclass QueryOrderByValueConstraint extends QueryConstraint {\r\n    _apply(query) {\r\n        validateNoPreviousOrderByCall(query, 'orderByValue');\r\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\r\n        validateQueryEndpoints(newParams);\r\n        return new QueryImpl(query._repo, query._path, newParams, \r\n        /*orderByCalled=*/ true);\r\n    }\r\n}\r\n/**\r\n * Creates a new `QueryConstraint` that orders by value.\r\n *\r\n * If the children of a query are all scalar values (string, number, or\r\n * boolean), you can order the results by their (ascending) values.\r\n *\r\n * You can read more about `orderByValue()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\r\n */\r\nfunction orderByValue() {\r\n    return new QueryOrderByValueConstraint();\r\n}\r\nclass QueryEqualToValueConstraint extends QueryConstraint {\r\n    constructor(_value, _key) {\r\n        super();\r\n        this._value = _value;\r\n        this._key = _key;\r\n    }\r\n    _apply(query) {\r\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\r\n        if (query._queryParams.hasStart()) {\r\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\r\n                'equalTo).');\r\n        }\r\n        if (query._queryParams.hasEnd()) {\r\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\r\n                'equalTo).');\r\n        }\r\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\r\n    }\r\n}\r\n/**\r\n * Creates a `QueryConstraint` that includes children that match the specified\r\n * value.\r\n *\r\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\r\n * allows you to choose arbitrary starting and ending points for your queries.\r\n *\r\n * The optional key argument can be used to further limit the range of the\r\n * query. If it is specified, then children that have exactly the specified\r\n * value must also have exactly the specified key as their key name. This can be\r\n * used to filter result sets with many matches for the same value.\r\n *\r\n * You can read more about `equalTo()` in\r\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\r\n *\r\n * @param value - The value to match for. The argument type depends on which\r\n * `orderBy*()` function was used in this query. Specify a value that matches\r\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\r\n * value must be a string.\r\n * @param key - The child key to start at, among the children with the\r\n * previously specified priority. This argument is only allowed if ordering by\r\n * child, value, or priority.\r\n */\r\nfunction equalTo(value, key) {\r\n    validateKey('equalTo', 'key', key, true);\r\n    return new QueryEqualToValueConstraint(value, key);\r\n}\r\n/**\r\n * Creates a new immutable instance of `Query` that is extended to also include\r\n * additional query constraints.\r\n *\r\n * @param query - The Query instance to use as a base for the new constraints.\r\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\r\n * @throws if any of the provided query constraints cannot be combined with the\r\n * existing or new constraints.\r\n */\r\nfunction query(query, ...queryConstraints) {\r\n    let queryImpl = getModularInstance(query);\r\n    for (const constraint of queryConstraints) {\r\n        queryImpl = constraint._apply(queryImpl);\r\n    }\r\n    return queryImpl;\r\n}\r\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\r\nsyncPointSetReferenceConstructor(ReferenceImpl);\r\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * This variable is also defined in the firebase Node.js Admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\r\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\r\n/**\r\n * Creates and caches `Repo` instances.\r\n */\r\nconst repos = {};\r\n/**\r\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\r\n */\r\nlet useRestClient = false;\r\n/**\r\n * Update an existing `Repo` in place to point to a new host/port.\r\n */\r\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\r\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \r\n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\r\n    if (tokenProvider) {\r\n        repo.authTokenProvider_ = tokenProvider;\r\n    }\r\n}\r\n/**\r\n * This function should only ever be called to CREATE a new database instance.\r\n * @internal\r\n */\r\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\r\n    let dbUrl = url || app.options.databaseURL;\r\n    if (dbUrl === undefined) {\r\n        if (!app.options.projectId) {\r\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\r\n                ' a Project ID when calling firebase.initializeApp().');\r\n        }\r\n        log('Using default host for project ', app.options.projectId);\r\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\r\n    }\r\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n    let repoInfo = parsedUrl.repoInfo;\r\n    let isEmulator;\r\n    let dbEmulatorHost = undefined;\r\n    if (typeof process !== 'undefined' && process.env) {\r\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\r\n    }\r\n    if (dbEmulatorHost) {\r\n        isEmulator = true;\r\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\r\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\r\n        repoInfo = parsedUrl.repoInfo;\r\n    }\r\n    else {\r\n        isEmulator = !parsedUrl.repoInfo.secure;\r\n    }\r\n    const authTokenProvider = nodeAdmin && isEmulator\r\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\r\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\r\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\r\n    if (!pathIsEmpty(parsedUrl.path)) {\r\n        fatal('Database URL must point to the root of a Firebase Database ' +\r\n            '(not including a child path).');\r\n    }\r\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\r\n    return new Database(repo, app);\r\n}\r\n/**\r\n * Remove the repo and make sure it is disconnected.\r\n *\r\n */\r\nfunction repoManagerDeleteRepo(repo, appName) {\r\n    const appRepos = repos[appName];\r\n    // This should never happen...\r\n    if (!appRepos || appRepos[repo.key] !== repo) {\r\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\r\n    }\r\n    repoInterrupt(repo);\r\n    delete appRepos[repo.key];\r\n}\r\n/**\r\n * Ensures a repo doesn't already exist and then creates one using the\r\n * provided app.\r\n *\r\n * @param repoInfo - The metadata about the Repo\r\n * @returns The Repo object for the specified server / repoName.\r\n */\r\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\r\n    let appRepos = repos[app.name];\r\n    if (!appRepos) {\r\n        appRepos = {};\r\n        repos[app.name] = appRepos;\r\n    }\r\n    let repo = appRepos[repoInfo.toURLString()];\r\n    if (repo) {\r\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\r\n    }\r\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\r\n    appRepos[repoInfo.toURLString()] = repo;\r\n    return repo;\r\n}\r\n/**\r\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n */\r\nfunction repoManagerForceRestClient(forceRestClient) {\r\n    useRestClient = forceRestClient;\r\n}\r\n/**\r\n * Class representing a Firebase Realtime Database.\r\n */\r\nclass Database {\r\n    /** @hideconstructor */\r\n    constructor(_repoInternal, \r\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\r\n    app) {\r\n        this._repoInternal = _repoInternal;\r\n        this.app = app;\r\n        /** Represents a `Database` instance. */\r\n        this['type'] = 'database';\r\n        /** Track if the instance has been used (root or repo accessed) */\r\n        this._instanceStarted = false;\r\n    }\r\n    get _repo() {\r\n        if (!this._instanceStarted) {\r\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\r\n            this._instanceStarted = true;\r\n        }\r\n        return this._repoInternal;\r\n    }\r\n    get _root() {\r\n        if (!this._rootInternal) {\r\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\r\n        }\r\n        return this._rootInternal;\r\n    }\r\n    _delete() {\r\n        if (this._rootInternal !== null) {\r\n            repoManagerDeleteRepo(this._repo, this.app.name);\r\n            this._repoInternal = null;\r\n            this._rootInternal = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _checkNotDeleted(apiName) {\r\n        if (this._rootInternal === null) {\r\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\r\n        }\r\n    }\r\n}\r\nfunction checkTransportInit() {\r\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\r\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\r\n    }\r\n}\r\n/**\r\n * Force the use of websockets instead of longPolling.\r\n */\r\nfunction forceWebSockets() {\r\n    checkTransportInit();\r\n    BrowserPollConnection.forceDisallow();\r\n}\r\n/**\r\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\r\n */\r\nfunction forceLongPolling() {\r\n    checkTransportInit();\r\n    WebSocketConnection.forceDisallow();\r\n    BrowserPollConnection.forceAllow();\r\n}\r\n/**\r\n * Returns the instance of the Realtime Database SDK that is associated\r\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\r\n * with default settings if no instance exists or if the existing instance uses\r\n * a custom database URL.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\r\n * Database instance is associated with.\r\n * @param url - The URL of the Realtime Database instance to connect to. If not\r\n * provided, the SDK connects to the default instance of the Firebase App.\r\n * @returns The `Database` instance of the provided app.\r\n */\r\nfunction getDatabase(app = getApp(), url) {\r\n    return _getProvider(app, 'database').getImmediate({\r\n        identifier: url\r\n    });\r\n}\r\n/**\r\n * Modify the provided instance to communicate with the Realtime Database\r\n * emulator.\r\n *\r\n * <p>Note: This method must be called before performing any other operation.\r\n *\r\n * @param db - The instance to modify.\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 8080)\r\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\r\n */\r\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('useEmulator');\r\n    if (db._instanceStarted) {\r\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\r\n    }\r\n    const repo = db._repoInternal;\r\n    let tokenProvider = undefined;\r\n    if (repo.repoInfo_.nodeAdmin) {\r\n        if (options.mockUserToken) {\r\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\r\n        }\r\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\r\n    }\r\n    else if (options.mockUserToken) {\r\n        const token = typeof options.mockUserToken === 'string'\r\n            ? options.mockUserToken\r\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\r\n        tokenProvider = new EmulatorTokenProvider(token);\r\n    }\r\n    // Modify the repo to apply emulator settings\r\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\r\n}\r\n/**\r\n * Disconnects from the server (all Database operations will be completed\r\n * offline).\r\n *\r\n * The client automatically maintains a persistent connection to the Database\r\n * server, which will remain active indefinitely and reconnect when\r\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\r\n * to control the client connection in cases where a persistent connection is\r\n * undesirable.\r\n *\r\n * While offline, the client will no longer receive data updates from the\r\n * Database. However, all Database operations performed locally will continue to\r\n * immediately fire events, allowing your application to continue behaving\r\n * normally. Additionally, each operation performed locally will automatically\r\n * be queued and retried upon reconnection to the Database server.\r\n *\r\n * To reconnect to the Database and begin receiving remote events, see\r\n * `goOnline()`.\r\n *\r\n * @param db - The instance to disconnect.\r\n */\r\nfunction goOffline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOffline');\r\n    repoInterrupt(db._repo);\r\n}\r\n/**\r\n * Reconnects to the server and synchronizes the offline Database state\r\n * with the server state.\r\n *\r\n * This method should be used after disabling the active connection with\r\n * `goOffline()`. Once reconnected, the client will transmit the proper data\r\n * and fire the appropriate events so that your client \"catches up\"\r\n * automatically.\r\n *\r\n * @param db - The instance to reconnect.\r\n */\r\nfunction goOnline(db) {\r\n    db = getModularInstance(db);\r\n    db._checkNotDeleted('goOnline');\r\n    repoResume(db._repo);\r\n}\r\nfunction enableLogging(logger, persistent) {\r\n    enableLogging$1(logger, persistent);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerDatabase(variant) {\r\n    setSDKVersion(SDK_VERSION$1);\r\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider('auth-internal');\r\n        const appCheckProvider = container.getProvider('app-check-internal');\r\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\r\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SERVER_TIMESTAMP = {\r\n    '.sv': 'timestamp'\r\n};\r\n/**\r\n * Returns a placeholder value for auto-populating the current timestamp (time\r\n * since the Unix epoch, in milliseconds) as determined by the Firebase\r\n * servers.\r\n */\r\nfunction serverTimestamp() {\r\n    return SERVER_TIMESTAMP;\r\n}\r\n/**\r\n * Returns a placeholder value that can be used to atomically increment the\r\n * current database value by the provided delta.\r\n *\r\n * @param delta - the amount to modify the current value atomically.\r\n * @returns A placeholder value for modifying data atomically server-side.\r\n */\r\nfunction increment(delta) {\r\n    return {\r\n        '.sv': {\r\n            'increment': delta\r\n        }\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A type for the resolve value of {@link runTransaction}.\r\n */\r\nclass TransactionResult {\r\n    /** @hideconstructor */\r\n    constructor(\r\n    /** Whether the transaction was successfully committed. */\r\n    committed, \r\n    /** The resulting data snapshot. */\r\n    snapshot) {\r\n        this.committed = committed;\r\n        this.snapshot = snapshot;\r\n    }\r\n    /** Returns a JSON-serializable representation of this object. */\r\n    toJSON() {\r\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\r\n    }\r\n}\r\n/**\r\n * Atomically modifies the data at this location.\r\n *\r\n * Atomically modify the data at this location. Unlike a normal `set()`, which\r\n * just overwrites the data regardless of its previous value, `runTransaction()` is\r\n * used to modify the existing value to a new value, ensuring there are no\r\n * conflicts with other clients writing to the same location at the same time.\r\n *\r\n * To accomplish this, you pass `runTransaction()` an update function which is\r\n * used to transform the current value into a new value. If another client\r\n * writes to the location before your new value is successfully written, your\r\n * update function will be called again with the new current value, and the\r\n * write will be retried. This will happen repeatedly until your write succeeds\r\n * without conflict or you abort the transaction by not returning a value from\r\n * your update function.\r\n *\r\n * Note: Modifying data with `set()` will cancel any pending transactions at\r\n * that location, so extreme care should be taken if mixing `set()` and\r\n * `runTransaction()` to update the same data.\r\n *\r\n * Note: When using transactions with Security and Firebase Rules in place, be\r\n * aware that a client needs `.read` access in addition to `.write` access in\r\n * order to perform a transaction. This is because the client-side nature of\r\n * transactions requires the client to read the data in order to transactionally\r\n * update it.\r\n *\r\n * @param ref - The location to atomically modify.\r\n * @param transactionUpdate - A developer-supplied function which will be passed\r\n * the current data stored at this location (as a JavaScript object). The\r\n * function should return the new value it would like written (as a JavaScript\r\n * object). If `undefined` is returned (i.e. you return with no arguments) the\r\n * transaction will be aborted and the data at this location will not be\r\n * modified.\r\n * @param options - An options object to configure transactions.\r\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\r\n * callback to handle success and failure.\r\n */\r\nfunction runTransaction(ref, \r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntransactionUpdate, options) {\r\n    var _a;\r\n    ref = getModularInstance(ref);\r\n    validateWritablePath('Reference.transaction', ref._path);\r\n    if (ref.key === '.length' || ref.key === '.keys') {\r\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\r\n    }\r\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\r\n    const deferred = new Deferred();\r\n    const promiseComplete = (error, committed, node) => {\r\n        let dataSnapshot = null;\r\n        if (error) {\r\n            deferred.reject(error);\r\n        }\r\n        else {\r\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\r\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\r\n        }\r\n    };\r\n    // Add a watch to make sure we get server updates.\r\n    const unwatcher = onValue(ref, () => { });\r\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\r\n    return deferred.promise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nPersistentConnection;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\r\n    this.sendRequest('q', { p: pathString }, onComplete);\r\n};\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nPersistentConnection.prototype.echo = function (data, onEcho) {\r\n    this.sendRequest('echo', { d: data }, onEcho);\r\n};\r\n// RealTimeConnection properties that we use in tests.\r\nConnection;\r\n/**\r\n * @internal\r\n */\r\nconst hijackHash = function (newHash) {\r\n    const oldPut = PersistentConnection.prototype.put;\r\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\r\n        if (hash !== undefined) {\r\n            hash = newHash();\r\n        }\r\n        oldPut.call(this, pathString, data, onComplete, hash);\r\n    };\r\n    return function () {\r\n        PersistentConnection.prototype.put = oldPut;\r\n    };\r\n};\r\nRepoInfo;\r\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n * @internal\r\n */\r\nconst forceRestClient = function (forceRestClient) {\r\n    repoManagerForceRestClient(forceRestClient);\r\n};\n\n/**\r\n * Firebase Realtime Database\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n","import { render } from \"./AboutView.vue?vue&type=template&id=0ec955f5\"\nimport script from \"./AboutView.vue?vue&type=script&lang=js\"\nexport * from \"./AboutView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\user\\\\Documents\\\\ms\\\\programming\\\\twinny-beongae\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["isPrototypeOf","$TypeError","TypeError","module","exports","it","Prototype","IndexSizeError","s","c","m","DOMStringSizeError","HierarchyRequestError","WrongDocumentError","InvalidCharacterError","NoDataAllowedError","NoModificationAllowedError","NotFoundError","NotSupportedError","InUseAttributeError","InvalidStateError","SyntaxError","InvalidModificationError","NamespaceError","InvalidAccessError","ValidationError","TypeMismatchError","SecurityError","NetworkError","AbortError","URLMismatchError","QuotaExceededError","TimeoutError","InvalidNodeTypeError","DataCloneError","$","getBuiltIn","createPropertyDescriptor","defineProperty","hasOwn","anInstance","inheritIfRequired","normalizeStringArgument","DOMExceptionConstants","clearErrorStack","IS_PURE","DOM_EXCEPTION","Error","NativeDOMException","$DOMException","this","DOMExceptionPrototype","argumentsLength","arguments","length","message","undefined","name","that","error","stack","prototype","ERROR_HAS_STACK","DOM_EXCEPTION_HAS_STACK","FORCED_CONSTRUCTOR","global","constructor","forced","DOMException","PolyfilledDOMException","PolyfilledDOMExceptionPrototype","key","constant","constantName","class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_3","CONSTANTS","NODE_CLIENT","NODE_ADMIN","SDK_VERSION","assertion","assertionError","stringToByteArray","str","out","p","i","charCodeAt","byteArrayToString","bytes","pos","c1","String","fromCharCode","c2","c3","c4","u","join","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","encodeString","btoa","decodeString","decodeStringToByteArray","charToByteMap","charAt","haveByte4","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","deepCopy","value","deepExtend","target","source","Object","Date","dateValue","getTime","prop","hasOwnProperty","isValidKey","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","getUA","navigator","isMobileCordova","window","test","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","preExist","DB_CHECK_NAME","request","self","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","_a","ERROR_NAME","FirebaseError","code","customData","super","setPrototypeOf","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replaceTemplate","fullMessage","PATTERN","_","jsonEval","JSON","parse","stringify","decode","token","header","claims","signature","parts","split","isValidFormat","decoded","isAdmin","obj","call","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","fnName","argName","high","assert","low","stringLength","getModularInstance","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","isComponentEager","instanceDeferred","clearInstance","delete","services","from","values","all","filter","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","normalizeIdentifierForFactory","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","args","logLevel","now","toISOString","method","Logger","_logLevel","_logHandler","_userLogHandler","val","setLogLevel","logHandler","userLogHandler","debug","log","info","warn","instanceOfAny","object","constructors","some","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","unlisten","removeEventListener","success","wrap","addEventListener","then","cacheDonePromiseForTransaction","tx","done","complete","idbProxyTraps","receiver","objectStoreNames","objectStore","replaceTraps","wrapFunction","func","transaction","apply","unwrap","storeNames","sort","transformCachableValue","Proxy","IDBRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","isVersionServiceProvider","library","logString","logger","PLATFORM_LOG_STRING","appName","appCompatName","analyticsName","analyticsCompatName","appCheckName","appCheckCompatName","authName","authCompatName","databaseName","databaseCompatName","functionsName","functionsCompatName","installationsName","installationsCompatName","messagingName","messagingCompatName","performanceName","performanceCompatName","remoteConfigName","remoteConfigCompatName","storageName","storageCompatName","firestoreName","firestoreCompatName","packageName","_apps","_components","_addComponent","app","_registerComponent","componentName","_getProvider","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","config","_isDeleted","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","initializeApp","rawConfig","existingApp","newApp","getApp","registerVersion","libraryKeyOrName","variant","libraryMismatch","match","versionMismatch","warning","DB_NAME","DB_VERSION","STORE_NAME","dbPromise","getDbPromise","createObjectStore","originalErrorMessage","readHeartbeatsFromIndexedDB","computeKey","writeHeartbeatsToIndexedDB","heartbeatObject","put","appId","MAX_HEADER_BYTES","STORED_HEARTBEAT_RETENTION_MAX_MILLIS","HeartbeatServiceImpl","_heartbeatsCache","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","platformLogger","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","extractHeartbeatsForHeader","headerString","today","substring","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","countBytes","pop","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","canUseIndexedDB","idbHeartbeatObject","heartbeatsObject","existingHeartbeatsObject","registerCoreComponents","setSDKVersion","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","setItem","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","contains","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","varArgs","arg","firstLog_","enableLogging$1","logger_","persistent","bind","logWrapper","prefix","fatal","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","attachEvent","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","ebits","fbits","bias","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","href","isWindowsStoreApp","Windows","UI","errorForServerCode","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","onload","onreadystatechange","rstate","parentNode","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","isOldAndroid","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","et","OnlineMonitor","online_","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","pathSlice","begin","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","GET_CONNECT_TIMEOUT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","q","_queryObject","outstandingGet","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","left","right","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON$1","MAX_NODE$1","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","sparseSnapshotTreeForEachChild","tree","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layeredCache","subMerge","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorRevertUserWrite","viewProcessorAckUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","changedChildren","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","referenceConstructor","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","changeTree","fromObject","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery_","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidPathString","isValidRootPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","validatePathString","argumentName","validateRootPathString","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","currentNode","currentInputSnapshot","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","applyLocally","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","_checkNotDeleted","_root","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerDatabaseFromApp","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appRepos","_repoInternal","_instanceStarted","_rootInternal","apiName","getDatabase","registerDatabase","SDK_VERSION$1","simpleListen","echo","onEcho","firebaseConfig","apiKey","authDomain","storageBucket","messagingSenderId","measurementId","appointmentTimeRef","components","appointmentTime","methods","__exports__","render"],"sourceRoot":""}